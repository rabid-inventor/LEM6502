ARM GAS  /tmp/ccjHcktl.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"6502.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.imp,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	imp:
  23              	.LFB40:
  24              		.file 1 "Src/6502.c"
   1:Src/6502.c    **** /* MoarNES source - CPU.c
   2:Src/6502.c    **** 
   3:Src/6502.c    ****    This open-source software is (c)2010-2013 Mike Chambers, and is released
   4:Src/6502.c    ****    under the terms of the GNU GPL v2 license.
   5:Src/6502.c    **** 
   6:Src/6502.c    ****    This is my implementation of a MOS Technology 6502 CPU emulator. The
   7:Src/6502.c    ****    NES technically has a Ricoh 2A03, not a true 6502, however it is nearly
   8:Src/6502.c    ****    identical to it.
   9:Src/6502.c    **** 
  10:Src/6502.c    ****    The differences are small:
  11:Src/6502.c    ****      - The 2A03 does not support binary-coded decimal (BCD) arithmetic.
  12:Src/6502.c    **** 	 - It has the audio processor built into it.
  13:Src/6502.c    **** 
  14:Src/6502.c    ****    The audio emulation is, however, handled in APU.c.
  15:Src/6502.c    **** */
  16:Src/6502.c    **** 
  17:Src/6502.c    **** 
  18:Src/6502.c    **** //#include <stdio.h>
  19:Src/6502.c    **** //#include <malloc.h>
  20:Src/6502.c    **** #include "main.h"
  21:Src/6502.c    **** #include "6502.h"
  22:Src/6502.c    **** 
  23:Src/6502.c    **** //externally supplied functions
  24:Src/6502.c    **** extern uint8_t read6502(uint16_t address);
  25:Src/6502.c    **** extern void write6502(uint16_t address, uint8_t value);
  26:Src/6502.c    **** 
  27:Src/6502.c    **** //6502 CPU registers
  28:Src/6502.c    **** uint16_t pc;
  29:Src/6502.c    **** uint8_t sp, a, x, y, status;
  30:Src/6502.c    **** 
  31:Src/6502.c    **** //helper variables
  32:Src/6502.c    **** uint64_t instructions = 0; //keep track of total instructions executed
  33:Src/6502.c    **** uint64_t clockticks6502 = 0, clockgoal6502 = 0;
  34:Src/6502.c    **** uint16_t oldpc, ea, reladdr, value, result;
ARM GAS  /tmp/ccjHcktl.s 			page 2


  35:Src/6502.c    **** uint8_t opcode, oldstatus;
  36:Src/6502.c    **** 
  37:Src/6502.c    **** //a few general functions used by various other functions
  38:Src/6502.c    **** void push16(uint16_t pushval) {
  39:Src/6502.c    ****     write6502(BASE_STACK + sp, (pushval >> 8) & 0xFF);
  40:Src/6502.c    ****     write6502(BASE_STACK + ((sp - 1) & 0xFF), pushval & 0xFF);
  41:Src/6502.c    ****     sp -= 2;
  42:Src/6502.c    **** }
  43:Src/6502.c    **** 
  44:Src/6502.c    **** void push8(uint8_t pushval) {
  45:Src/6502.c    ****     write6502(BASE_STACK + sp--, pushval);
  46:Src/6502.c    **** }
  47:Src/6502.c    **** 
  48:Src/6502.c    **** uint16_t pull16() {
  49:Src/6502.c    ****     uint16_t temp16;
  50:Src/6502.c    ****     temp16 = read6502(BASE_STACK + ((sp + 1) & 0xFF)) | ((uint16_t)read6502(BASE_STACK + ((sp + 2) 
  51:Src/6502.c    ****     sp += 2;
  52:Src/6502.c    ****     return(temp16);
  53:Src/6502.c    **** }
  54:Src/6502.c    **** 
  55:Src/6502.c    **** uint8_t pull8() {
  56:Src/6502.c    ****     return (read6502(BASE_STACK + ++sp));
  57:Src/6502.c    **** }
  58:Src/6502.c    **** 
  59:Src/6502.c    **** void reset6502() {
  60:Src/6502.c    ****     pc = (uint16_t)read6502(0xFFFC) | ((uint16_t)read6502(0xFFFD) << 8);
  61:Src/6502.c    ****     a = 0;
  62:Src/6502.c    ****     x = 0;
  63:Src/6502.c    ****     y = 0;
  64:Src/6502.c    ****     sp = 0xFF;
  65:Src/6502.c    ****     status |= FLAG_CONSTANT;
  66:Src/6502.c    **** }
  67:Src/6502.c    **** 
  68:Src/6502.c    **** 
  69:Src/6502.c    **** static void (*addrtable[256])();
  70:Src/6502.c    **** static void (*optable[256])();
  71:Src/6502.c    **** uint8_t penaltyop, penaltyaddr;
  72:Src/6502.c    **** 
  73:Src/6502.c    **** //addressing mode functions, calculates effective addresses
  74:Src/6502.c    **** static void imp() { //implied
  25              		.loc 1 74 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  75:Src/6502.c    **** }
  30              		.loc 1 75 0
  31              		@ sp needed
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE40:
  36              		.section	.text.acc,"ax",%progbits
  37              		.align	1
  38              		.syntax unified
  39              		.code	16
  40              		.thumb_func
  41              		.fpu softvfp
ARM GAS  /tmp/ccjHcktl.s 			page 3


  43              	acc:
  44              	.LFB41:
  76:Src/6502.c    **** 
  77:Src/6502.c    **** static void acc() { //accumulator
  45              		.loc 1 77 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  78:Src/6502.c    **** }
  50              		.loc 1 78 0
  51              		@ sp needed
  52 0000 7047     		bx	lr
  53              		.cfi_endproc
  54              	.LFE41:
  56              		.section	.text.imm,"ax",%progbits
  57              		.align	1
  58              		.syntax unified
  59              		.code	16
  60              		.thumb_func
  61              		.fpu softvfp
  63              	imm:
  64              	.LFB42:
  79:Src/6502.c    **** 
  80:Src/6502.c    **** static void imm() { //immediate
  65              		.loc 1 80 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  81:Src/6502.c    ****     ea = pc++;
  70              		.loc 1 81 0
  71 0000 034A     		ldr	r2, .L4
  72 0002 1388     		ldrh	r3, [r2]
  73 0004 591C     		adds	r1, r3, #1
  74 0006 1180     		strh	r1, [r2]
  75 0008 024A     		ldr	r2, .L4+4
  76 000a 1380     		strh	r3, [r2]
  82:Src/6502.c    **** }
  77              		.loc 1 82 0
  78              		@ sp needed
  79 000c 7047     		bx	lr
  80              	.L5:
  81 000e C046     		.align	2
  82              	.L4:
  83 0010 00000000 		.word	pc
  84 0014 00000000 		.word	ea
  85              		.cfi_endproc
  86              	.LFE42:
  88              		.section	.text.bcc,"ax",%progbits
  89              		.align	1
  90              		.syntax unified
  91              		.code	16
  92              		.thumb_func
  93              		.fpu softvfp
  95              	bcc:
  96              	.LFB59:
ARM GAS  /tmp/ccjHcktl.s 			page 4


  83:Src/6502.c    **** 
  84:Src/6502.c    **** static void zp() { //zero-page
  85:Src/6502.c    ****     ea = (uint16_t)read6502((uint16_t)pc++);
  86:Src/6502.c    **** }
  87:Src/6502.c    **** 
  88:Src/6502.c    **** static void zpx() { //zero-page,X
  89:Src/6502.c    ****     ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)x) & 0xFF; //zero-page wraparound
  90:Src/6502.c    **** }
  91:Src/6502.c    **** 
  92:Src/6502.c    **** static void zpy() { //zero-page,Y
  93:Src/6502.c    ****     ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)y) & 0xFF; //zero-page wraparound
  94:Src/6502.c    **** }
  95:Src/6502.c    **** 
  96:Src/6502.c    **** static void rel() { //relative for branch ops (8-bit immediate value, sign-extended)
  97:Src/6502.c    ****     reladdr = (uint16_t)read6502(pc++);
  98:Src/6502.c    ****     if (reladdr & 0x80) reladdr |= 0xFF00;
  99:Src/6502.c    **** }
 100:Src/6502.c    **** 
 101:Src/6502.c    **** static void abso() { //absolute
 102:Src/6502.c    ****     ea = (uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8);
 103:Src/6502.c    ****     pc += 2;
 104:Src/6502.c    **** }
 105:Src/6502.c    **** 
 106:Src/6502.c    **** static void absx() { //absolute,X
 107:Src/6502.c    ****     uint16_t startpage;
 108:Src/6502.c    ****     ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 109:Src/6502.c    ****     startpage = ea & 0xFF00;
 110:Src/6502.c    ****     ea += (uint16_t)x;
 111:Src/6502.c    **** 
 112:Src/6502.c    ****     if (startpage != (ea & 0xFF00)) { //one cycle penlty for page-crossing on some opcodes
 113:Src/6502.c    ****         penaltyaddr = 1;
 114:Src/6502.c    ****     }
 115:Src/6502.c    **** 
 116:Src/6502.c    ****     pc += 2;
 117:Src/6502.c    **** }
 118:Src/6502.c    **** 
 119:Src/6502.c    **** static void absy() { //absolute,Y
 120:Src/6502.c    ****     uint16_t startpage;
 121:Src/6502.c    ****     ea = ((uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8));
 122:Src/6502.c    ****     startpage = ea & 0xFF00;
 123:Src/6502.c    ****     ea += (uint16_t)y;
 124:Src/6502.c    **** 
 125:Src/6502.c    ****     if (startpage != (ea & 0xFF00)) { //one cycle penlty for page-crossing on some opcodes
 126:Src/6502.c    ****         penaltyaddr = 1;
 127:Src/6502.c    ****     }
 128:Src/6502.c    **** 
 129:Src/6502.c    ****     pc += 2;
 130:Src/6502.c    **** }
 131:Src/6502.c    **** 
 132:Src/6502.c    **** static void ind() { //indirect
 133:Src/6502.c    ****     uint16_t eahelp, eahelp2;
 134:Src/6502.c    ****     eahelp = (uint16_t)read6502(pc) | (uint16_t)((uint16_t)read6502(pc+1) << 8);
 135:Src/6502.c    ****     eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); //replicate 6502 page-boundary wraparoun
 136:Src/6502.c    ****     ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 137:Src/6502.c    ****     pc += 2;
 138:Src/6502.c    **** }
 139:Src/6502.c    **** 
ARM GAS  /tmp/ccjHcktl.s 			page 5


 140:Src/6502.c    **** static void indx() { // (indirect,X)
 141:Src/6502.c    ****     uint16_t eahelp;
 142:Src/6502.c    ****     eahelp = (uint16_t)(((uint16_t)read6502(pc++) + (uint16_t)x) & 0xFF); //zero-page wraparound fo
 143:Src/6502.c    ****     ea = (uint16_t)read6502(eahelp & 0x00FF) | ((uint16_t)read6502((eahelp+1) & 0x00FF) << 8);
 144:Src/6502.c    **** }
 145:Src/6502.c    **** 
 146:Src/6502.c    **** static void indy() { // (indirect),Y
 147:Src/6502.c    ****     uint16_t eahelp, eahelp2, startpage;
 148:Src/6502.c    ****     eahelp = (uint16_t)read6502(pc++);
 149:Src/6502.c    ****     eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); //zero-page wraparound
 150:Src/6502.c    ****     ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 151:Src/6502.c    ****     startpage = ea & 0xFF00;
 152:Src/6502.c    ****     ea += (uint16_t)y;
 153:Src/6502.c    **** 
 154:Src/6502.c    ****     if (startpage != (ea & 0xFF00)) { //one cycle penlty for page-crossing on some opcodes
 155:Src/6502.c    ****         penaltyaddr = 1;
 156:Src/6502.c    ****     }
 157:Src/6502.c    **** }
 158:Src/6502.c    **** 
 159:Src/6502.c    **** static uint16_t getvalue() {
 160:Src/6502.c    ****     if (addrtable[opcode] == acc) return((uint16_t)a);
 161:Src/6502.c    ****         else return((uint16_t)read6502(ea));
 162:Src/6502.c    **** }
 163:Src/6502.c    **** 
 164:Src/6502.c    **** static uint16_t getvalue16() {
 165:Src/6502.c    ****     return((uint16_t)read6502(ea) | ((uint16_t)read6502(ea+1) << 8));
 166:Src/6502.c    **** }
 167:Src/6502.c    **** 
 168:Src/6502.c    **** static void putvalue(uint16_t saveval) {
 169:Src/6502.c    ****     if (addrtable[opcode] == acc) a = (uint8_t)(saveval & 0x00FF);
 170:Src/6502.c    ****         else write6502(ea, (saveval & 0x00FF));
 171:Src/6502.c    **** }
 172:Src/6502.c    **** 
 173:Src/6502.c    **** 
 174:Src/6502.c    **** //instruction handler functions
 175:Src/6502.c    **** static void adc() {
 176:Src/6502.c    ****     penaltyop = 1;
 177:Src/6502.c    ****     value = getvalue();
 178:Src/6502.c    ****     result = (uint16_t)a + value + (uint16_t)(status & FLAG_CARRY);
 179:Src/6502.c    ****    
 180:Src/6502.c    ****     carrycalc(result);
 181:Src/6502.c    ****     zerocalc(result);
 182:Src/6502.c    ****     overflowcalc(result, a, value);
 183:Src/6502.c    ****     signcalc(result);
 184:Src/6502.c    ****     
 185:Src/6502.c    ****     #ifndef NES_CPU
 186:Src/6502.c    ****     if (status & FLAG_DECIMAL) {
 187:Src/6502.c    ****         clearcarry();
 188:Src/6502.c    ****         
 189:Src/6502.c    ****         if ((a & 0x0F) > 0x09) {
 190:Src/6502.c    ****             a += 0x06;
 191:Src/6502.c    ****         }
 192:Src/6502.c    ****         if ((a & 0xF0) > 0x90) {
 193:Src/6502.c    ****             a += 0x60;
 194:Src/6502.c    ****             setcarry();
 195:Src/6502.c    ****         }
 196:Src/6502.c    ****         
ARM GAS  /tmp/ccjHcktl.s 			page 6


 197:Src/6502.c    ****         clockticks6502++;
 198:Src/6502.c    ****     }
 199:Src/6502.c    ****     #endif
 200:Src/6502.c    ****    
 201:Src/6502.c    ****     saveaccum(result);
 202:Src/6502.c    **** }
 203:Src/6502.c    **** 
 204:Src/6502.c    **** static void and() {
 205:Src/6502.c    ****     penaltyop = 1;
 206:Src/6502.c    ****     value = getvalue();
 207:Src/6502.c    ****     result = (uint16_t)a & value;
 208:Src/6502.c    ****    
 209:Src/6502.c    ****     zerocalc(result);
 210:Src/6502.c    ****     signcalc(result);
 211:Src/6502.c    ****    
 212:Src/6502.c    ****     saveaccum(result);
 213:Src/6502.c    **** }
 214:Src/6502.c    **** 
 215:Src/6502.c    **** static void asl() {
 216:Src/6502.c    ****     value = getvalue();
 217:Src/6502.c    ****     result = value << 1;
 218:Src/6502.c    **** 
 219:Src/6502.c    ****     carrycalc(result);
 220:Src/6502.c    ****     zerocalc(result);
 221:Src/6502.c    ****     signcalc(result);
 222:Src/6502.c    ****    
 223:Src/6502.c    ****     putvalue(result);
 224:Src/6502.c    **** }
 225:Src/6502.c    **** 
 226:Src/6502.c    **** static void bcc() {
  97              		.loc 1 226 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101 0000 30B5     		push	{r4, r5, lr}
 102              	.LCFI0:
 103              		.cfi_def_cfa_offset 12
 104              		.cfi_offset 4, -12
 105              		.cfi_offset 5, -8
 106              		.cfi_offset 14, -4
 227:Src/6502.c    ****     if ((status & FLAG_CARRY) == 0) {
 107              		.loc 1 227 0
 108 0002 124B     		ldr	r3, .L10
 109 0004 1B78     		ldrb	r3, [r3]
 110 0006 DB07     		lsls	r3, r3, #31
 111 0008 15D4     		bmi	.L6
 228:Src/6502.c    ****         oldpc = pc;
 112              		.loc 1 228 0
 113 000a 1149     		ldr	r1, .L10+4
 114 000c 0B88     		ldrh	r3, [r1]
 115 000e 114A     		ldr	r2, .L10+8
 116 0010 1380     		strh	r3, [r2]
 229:Src/6502.c    ****         pc += reladdr;
 117              		.loc 1 229 0
 118 0012 114A     		ldr	r2, .L10+12
 119 0014 1288     		ldrh	r2, [r2]
 120 0016 9A18     		adds	r2, r3, r2
ARM GAS  /tmp/ccjHcktl.s 			page 7


 121 0018 92B2     		uxth	r2, r2
 122 001a 0A80     		strh	r2, [r1]
 230:Src/6502.c    ****         if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; //check if jump crossed a page 
 123              		.loc 1 230 0
 124 001c 5340     		eors	r3, r2
 125 001e FF22     		movs	r2, #255
 126 0020 9343     		bics	r3, r2
 127 0022 09D1     		bne	.L9
 231:Src/6502.c    ****             else clockticks6502++;
 128              		.loc 1 231 0
 129 0024 0D49     		ldr	r1, .L10+16
 130 0026 0122     		movs	r2, #1
 131 0028 0023     		movs	r3, #0
 132 002a 0C68     		ldr	r4, [r1]
 133 002c 4D68     		ldr	r5, [r1, #4]
 134 002e 1219     		adds	r2, r2, r4
 135 0030 6B41     		adcs	r3, r3, r5
 136 0032 0A60     		str	r2, [r1]
 137 0034 4B60     		str	r3, [r1, #4]
 138              	.L6:
 232:Src/6502.c    ****     }
 233:Src/6502.c    **** }
 139              		.loc 1 233 0
 140              		@ sp needed
 141 0036 30BD     		pop	{r4, r5, pc}
 142              	.L9:
 230:Src/6502.c    ****             else clockticks6502++;
 143              		.loc 1 230 0 discriminator 1
 144 0038 0849     		ldr	r1, .L10+16
 145 003a 0222     		movs	r2, #2
 146 003c 0023     		movs	r3, #0
 147 003e 0C68     		ldr	r4, [r1]
 148 0040 4D68     		ldr	r5, [r1, #4]
 149 0042 1219     		adds	r2, r2, r4
 150 0044 6B41     		adcs	r3, r3, r5
 151 0046 0A60     		str	r2, [r1]
 152 0048 4B60     		str	r3, [r1, #4]
 153 004a F4E7     		b	.L6
 154              	.L11:
 155              		.align	2
 156              	.L10:
 157 004c 00000000 		.word	status
 158 0050 00000000 		.word	pc
 159 0054 00000000 		.word	oldpc
 160 0058 00000000 		.word	reladdr
 161 005c 00000000 		.word	.LANCHOR0
 162              		.cfi_endproc
 163              	.LFE59:
 165              		.section	.text.bcs,"ax",%progbits
 166              		.align	1
 167              		.syntax unified
 168              		.code	16
 169              		.thumb_func
 170              		.fpu softvfp
 172              	bcs:
 173              	.LFB60:
 234:Src/6502.c    **** 
ARM GAS  /tmp/ccjHcktl.s 			page 8


 235:Src/6502.c    **** static void bcs() {
 174              		.loc 1 235 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178 0000 30B5     		push	{r4, r5, lr}
 179              	.LCFI1:
 180              		.cfi_def_cfa_offset 12
 181              		.cfi_offset 4, -12
 182              		.cfi_offset 5, -8
 183              		.cfi_offset 14, -4
 236:Src/6502.c    ****     if ((status & FLAG_CARRY) == FLAG_CARRY) {
 184              		.loc 1 236 0
 185 0002 124B     		ldr	r3, .L16
 186 0004 1B78     		ldrb	r3, [r3]
 187 0006 DB07     		lsls	r3, r3, #31
 188 0008 15D5     		bpl	.L12
 237:Src/6502.c    ****         oldpc = pc;
 189              		.loc 1 237 0
 190 000a 1149     		ldr	r1, .L16+4
 191 000c 0B88     		ldrh	r3, [r1]
 192 000e 114A     		ldr	r2, .L16+8
 193 0010 1380     		strh	r3, [r2]
 238:Src/6502.c    ****         pc += reladdr;
 194              		.loc 1 238 0
 195 0012 114A     		ldr	r2, .L16+12
 196 0014 1288     		ldrh	r2, [r2]
 197 0016 9A18     		adds	r2, r3, r2
 198 0018 92B2     		uxth	r2, r2
 199 001a 0A80     		strh	r2, [r1]
 239:Src/6502.c    ****         if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; //check if jump crossed a page 
 200              		.loc 1 239 0
 201 001c 5340     		eors	r3, r2
 202 001e FF22     		movs	r2, #255
 203 0020 9343     		bics	r3, r2
 204 0022 09D1     		bne	.L15
 240:Src/6502.c    ****             else clockticks6502++;
 205              		.loc 1 240 0
 206 0024 0D49     		ldr	r1, .L16+16
 207 0026 0122     		movs	r2, #1
 208 0028 0023     		movs	r3, #0
 209 002a 0C68     		ldr	r4, [r1]
 210 002c 4D68     		ldr	r5, [r1, #4]
 211 002e 1219     		adds	r2, r2, r4
 212 0030 6B41     		adcs	r3, r3, r5
 213 0032 0A60     		str	r2, [r1]
 214 0034 4B60     		str	r3, [r1, #4]
 215              	.L12:
 241:Src/6502.c    ****     }
 242:Src/6502.c    **** }
 216              		.loc 1 242 0
 217              		@ sp needed
 218 0036 30BD     		pop	{r4, r5, pc}
 219              	.L15:
 239:Src/6502.c    ****             else clockticks6502++;
 220              		.loc 1 239 0 discriminator 1
 221 0038 0849     		ldr	r1, .L16+16
ARM GAS  /tmp/ccjHcktl.s 			page 9


 222 003a 0222     		movs	r2, #2
 223 003c 0023     		movs	r3, #0
 224 003e 0C68     		ldr	r4, [r1]
 225 0040 4D68     		ldr	r5, [r1, #4]
 226 0042 1219     		adds	r2, r2, r4
 227 0044 6B41     		adcs	r3, r3, r5
 228 0046 0A60     		str	r2, [r1]
 229 0048 4B60     		str	r3, [r1, #4]
 230 004a F4E7     		b	.L12
 231              	.L17:
 232              		.align	2
 233              	.L16:
 234 004c 00000000 		.word	status
 235 0050 00000000 		.word	pc
 236 0054 00000000 		.word	oldpc
 237 0058 00000000 		.word	reladdr
 238 005c 00000000 		.word	.LANCHOR0
 239              		.cfi_endproc
 240              	.LFE60:
 242              		.section	.text.beq,"ax",%progbits
 243              		.align	1
 244              		.syntax unified
 245              		.code	16
 246              		.thumb_func
 247              		.fpu softvfp
 249              	beq:
 250              	.LFB61:
 243:Src/6502.c    **** 
 244:Src/6502.c    **** static void beq() {
 251              		.loc 1 244 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255 0000 30B5     		push	{r4, r5, lr}
 256              	.LCFI2:
 257              		.cfi_def_cfa_offset 12
 258              		.cfi_offset 4, -12
 259              		.cfi_offset 5, -8
 260              		.cfi_offset 14, -4
 245:Src/6502.c    ****     if ((status & FLAG_ZERO) == FLAG_ZERO) {
 261              		.loc 1 245 0
 262 0002 124B     		ldr	r3, .L22
 263 0004 1B78     		ldrb	r3, [r3]
 264 0006 9B07     		lsls	r3, r3, #30
 265 0008 15D5     		bpl	.L18
 246:Src/6502.c    ****         oldpc = pc;
 266              		.loc 1 246 0
 267 000a 1149     		ldr	r1, .L22+4
 268 000c 0B88     		ldrh	r3, [r1]
 269 000e 114A     		ldr	r2, .L22+8
 270 0010 1380     		strh	r3, [r2]
 247:Src/6502.c    ****         pc += reladdr;
 271              		.loc 1 247 0
 272 0012 114A     		ldr	r2, .L22+12
 273 0014 1288     		ldrh	r2, [r2]
 274 0016 9A18     		adds	r2, r3, r2
 275 0018 92B2     		uxth	r2, r2
ARM GAS  /tmp/ccjHcktl.s 			page 10


 276 001a 0A80     		strh	r2, [r1]
 248:Src/6502.c    ****         if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; //check if jump crossed a page 
 277              		.loc 1 248 0
 278 001c 5340     		eors	r3, r2
 279 001e FF22     		movs	r2, #255
 280 0020 9343     		bics	r3, r2
 281 0022 09D1     		bne	.L21
 249:Src/6502.c    ****             else clockticks6502++;
 282              		.loc 1 249 0
 283 0024 0D49     		ldr	r1, .L22+16
 284 0026 0122     		movs	r2, #1
 285 0028 0023     		movs	r3, #0
 286 002a 0C68     		ldr	r4, [r1]
 287 002c 4D68     		ldr	r5, [r1, #4]
 288 002e 1219     		adds	r2, r2, r4
 289 0030 6B41     		adcs	r3, r3, r5
 290 0032 0A60     		str	r2, [r1]
 291 0034 4B60     		str	r3, [r1, #4]
 292              	.L18:
 250:Src/6502.c    ****     }
 251:Src/6502.c    **** }
 293              		.loc 1 251 0
 294              		@ sp needed
 295 0036 30BD     		pop	{r4, r5, pc}
 296              	.L21:
 248:Src/6502.c    ****             else clockticks6502++;
 297              		.loc 1 248 0 discriminator 1
 298 0038 0849     		ldr	r1, .L22+16
 299 003a 0222     		movs	r2, #2
 300 003c 0023     		movs	r3, #0
 301 003e 0C68     		ldr	r4, [r1]
 302 0040 4D68     		ldr	r5, [r1, #4]
 303 0042 1219     		adds	r2, r2, r4
 304 0044 6B41     		adcs	r3, r3, r5
 305 0046 0A60     		str	r2, [r1]
 306 0048 4B60     		str	r3, [r1, #4]
 307 004a F4E7     		b	.L18
 308              	.L23:
 309              		.align	2
 310              	.L22:
 311 004c 00000000 		.word	status
 312 0050 00000000 		.word	pc
 313 0054 00000000 		.word	oldpc
 314 0058 00000000 		.word	reladdr
 315 005c 00000000 		.word	.LANCHOR0
 316              		.cfi_endproc
 317              	.LFE61:
 319              		.section	.text.bmi,"ax",%progbits
 320              		.align	1
 321              		.syntax unified
 322              		.code	16
 323              		.thumb_func
 324              		.fpu softvfp
 326              	bmi:
 327              	.LFB63:
 252:Src/6502.c    **** 
 253:Src/6502.c    **** static void bit() {
ARM GAS  /tmp/ccjHcktl.s 			page 11


 254:Src/6502.c    ****     value = getvalue();
 255:Src/6502.c    ****     result = (uint16_t)a & value;
 256:Src/6502.c    ****    
 257:Src/6502.c    ****     zerocalc(result);
 258:Src/6502.c    ****     status = (status & 0x3F) | (uint8_t)(value & 0xC0);
 259:Src/6502.c    **** }
 260:Src/6502.c    **** 
 261:Src/6502.c    **** static void bmi() {
 328              		.loc 1 261 0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332 0000 30B5     		push	{r4, r5, lr}
 333              	.LCFI3:
 334              		.cfi_def_cfa_offset 12
 335              		.cfi_offset 4, -12
 336              		.cfi_offset 5, -8
 337              		.cfi_offset 14, -4
 262:Src/6502.c    ****     if ((status & FLAG_SIGN) == FLAG_SIGN) {
 338              		.loc 1 262 0
 339 0002 134B     		ldr	r3, .L29
 340 0004 1B78     		ldrb	r3, [r3]
 341 0006 5BB2     		sxtb	r3, r3
 342 0008 002B     		cmp	r3, #0
 343 000a 00DB     		blt	.L27
 344              	.L24:
 263:Src/6502.c    ****         oldpc = pc;
 264:Src/6502.c    ****         pc += reladdr;
 265:Src/6502.c    ****         if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; //check if jump crossed a page 
 266:Src/6502.c    ****             else clockticks6502++;
 267:Src/6502.c    ****     }
 268:Src/6502.c    **** }
 345              		.loc 1 268 0
 346              		@ sp needed
 347 000c 30BD     		pop	{r4, r5, pc}
 348              	.L27:
 263:Src/6502.c    ****         oldpc = pc;
 349              		.loc 1 263 0
 350 000e 1149     		ldr	r1, .L29+4
 351 0010 0B88     		ldrh	r3, [r1]
 352 0012 114A     		ldr	r2, .L29+8
 353 0014 1380     		strh	r3, [r2]
 264:Src/6502.c    ****         if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; //check if jump crossed a page 
 354              		.loc 1 264 0
 355 0016 114A     		ldr	r2, .L29+12
 356 0018 1288     		ldrh	r2, [r2]
 357 001a 9A18     		adds	r2, r3, r2
 358 001c 92B2     		uxth	r2, r2
 359 001e 0A80     		strh	r2, [r1]
 265:Src/6502.c    ****             else clockticks6502++;
 360              		.loc 1 265 0
 361 0020 5340     		eors	r3, r2
 362 0022 FF22     		movs	r2, #255
 363 0024 9343     		bics	r3, r2
 364 0026 09D1     		bne	.L28
 266:Src/6502.c    ****     }
 365              		.loc 1 266 0
ARM GAS  /tmp/ccjHcktl.s 			page 12


 366 0028 0D49     		ldr	r1, .L29+16
 367 002a 0122     		movs	r2, #1
 368 002c 0023     		movs	r3, #0
 369 002e 0C68     		ldr	r4, [r1]
 370 0030 4D68     		ldr	r5, [r1, #4]
 371 0032 1219     		adds	r2, r2, r4
 372 0034 6B41     		adcs	r3, r3, r5
 373 0036 0A60     		str	r2, [r1]
 374 0038 4B60     		str	r3, [r1, #4]
 375              		.loc 1 268 0
 376 003a E7E7     		b	.L24
 377              	.L28:
 265:Src/6502.c    ****             else clockticks6502++;
 378              		.loc 1 265 0 discriminator 1
 379 003c 0849     		ldr	r1, .L29+16
 380 003e 0222     		movs	r2, #2
 381 0040 0023     		movs	r3, #0
 382 0042 0C68     		ldr	r4, [r1]
 383 0044 4D68     		ldr	r5, [r1, #4]
 384 0046 1219     		adds	r2, r2, r4
 385 0048 6B41     		adcs	r3, r3, r5
 386 004a 0A60     		str	r2, [r1]
 387 004c 4B60     		str	r3, [r1, #4]
 388 004e DDE7     		b	.L24
 389              	.L30:
 390              		.align	2
 391              	.L29:
 392 0050 00000000 		.word	status
 393 0054 00000000 		.word	pc
 394 0058 00000000 		.word	oldpc
 395 005c 00000000 		.word	reladdr
 396 0060 00000000 		.word	.LANCHOR0
 397              		.cfi_endproc
 398              	.LFE63:
 400              		.section	.text.bne,"ax",%progbits
 401              		.align	1
 402              		.syntax unified
 403              		.code	16
 404              		.thumb_func
 405              		.fpu softvfp
 407              	bne:
 408              	.LFB64:
 269:Src/6502.c    **** 
 270:Src/6502.c    **** static void bne() {
 409              		.loc 1 270 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413 0000 30B5     		push	{r4, r5, lr}
 414              	.LCFI4:
 415              		.cfi_def_cfa_offset 12
 416              		.cfi_offset 4, -12
 417              		.cfi_offset 5, -8
 418              		.cfi_offset 14, -4
 271:Src/6502.c    ****     if ((status & FLAG_ZERO) == 0) {
 419              		.loc 1 271 0
 420 0002 124B     		ldr	r3, .L35
ARM GAS  /tmp/ccjHcktl.s 			page 13


 421 0004 1B78     		ldrb	r3, [r3]
 422 0006 9B07     		lsls	r3, r3, #30
 423 0008 15D4     		bmi	.L31
 272:Src/6502.c    ****         oldpc = pc;
 424              		.loc 1 272 0
 425 000a 1149     		ldr	r1, .L35+4
 426 000c 0B88     		ldrh	r3, [r1]
 427 000e 114A     		ldr	r2, .L35+8
 428 0010 1380     		strh	r3, [r2]
 273:Src/6502.c    ****         pc += reladdr;
 429              		.loc 1 273 0
 430 0012 114A     		ldr	r2, .L35+12
 431 0014 1288     		ldrh	r2, [r2]
 432 0016 9A18     		adds	r2, r3, r2
 433 0018 92B2     		uxth	r2, r2
 434 001a 0A80     		strh	r2, [r1]
 274:Src/6502.c    ****         if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; //check if jump crossed a page 
 435              		.loc 1 274 0
 436 001c 5340     		eors	r3, r2
 437 001e FF22     		movs	r2, #255
 438 0020 9343     		bics	r3, r2
 439 0022 09D1     		bne	.L34
 275:Src/6502.c    ****             else clockticks6502++;
 440              		.loc 1 275 0
 441 0024 0D49     		ldr	r1, .L35+16
 442 0026 0122     		movs	r2, #1
 443 0028 0023     		movs	r3, #0
 444 002a 0C68     		ldr	r4, [r1]
 445 002c 4D68     		ldr	r5, [r1, #4]
 446 002e 1219     		adds	r2, r2, r4
 447 0030 6B41     		adcs	r3, r3, r5
 448 0032 0A60     		str	r2, [r1]
 449 0034 4B60     		str	r3, [r1, #4]
 450              	.L31:
 276:Src/6502.c    ****     }
 277:Src/6502.c    **** }
 451              		.loc 1 277 0
 452              		@ sp needed
 453 0036 30BD     		pop	{r4, r5, pc}
 454              	.L34:
 274:Src/6502.c    ****             else clockticks6502++;
 455              		.loc 1 274 0 discriminator 1
 456 0038 0849     		ldr	r1, .L35+16
 457 003a 0222     		movs	r2, #2
 458 003c 0023     		movs	r3, #0
 459 003e 0C68     		ldr	r4, [r1]
 460 0040 4D68     		ldr	r5, [r1, #4]
 461 0042 1219     		adds	r2, r2, r4
 462 0044 6B41     		adcs	r3, r3, r5
 463 0046 0A60     		str	r2, [r1]
 464 0048 4B60     		str	r3, [r1, #4]
 465 004a F4E7     		b	.L31
 466              	.L36:
 467              		.align	2
 468              	.L35:
 469 004c 00000000 		.word	status
 470 0050 00000000 		.word	pc
ARM GAS  /tmp/ccjHcktl.s 			page 14


 471 0054 00000000 		.word	oldpc
 472 0058 00000000 		.word	reladdr
 473 005c 00000000 		.word	.LANCHOR0
 474              		.cfi_endproc
 475              	.LFE64:
 477              		.section	.text.bpl,"ax",%progbits
 478              		.align	1
 479              		.syntax unified
 480              		.code	16
 481              		.thumb_func
 482              		.fpu softvfp
 484              	bpl:
 485              	.LFB65:
 278:Src/6502.c    **** 
 279:Src/6502.c    **** static void bpl() {
 486              		.loc 1 279 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490 0000 30B5     		push	{r4, r5, lr}
 491              	.LCFI5:
 492              		.cfi_def_cfa_offset 12
 493              		.cfi_offset 4, -12
 494              		.cfi_offset 5, -8
 495              		.cfi_offset 14, -4
 280:Src/6502.c    ****     if ((status & FLAG_SIGN) == 0) {
 496              		.loc 1 280 0
 497 0002 134B     		ldr	r3, .L41
 498 0004 1B78     		ldrb	r3, [r3]
 499 0006 5BB2     		sxtb	r3, r3
 500 0008 002B     		cmp	r3, #0
 501 000a 15DB     		blt	.L37
 281:Src/6502.c    ****         oldpc = pc;
 502              		.loc 1 281 0
 503 000c 1149     		ldr	r1, .L41+4
 504 000e 0B88     		ldrh	r3, [r1]
 505 0010 114A     		ldr	r2, .L41+8
 506 0012 1380     		strh	r3, [r2]
 282:Src/6502.c    ****         pc += reladdr;
 507              		.loc 1 282 0
 508 0014 114A     		ldr	r2, .L41+12
 509 0016 1288     		ldrh	r2, [r2]
 510 0018 9A18     		adds	r2, r3, r2
 511 001a 92B2     		uxth	r2, r2
 512 001c 0A80     		strh	r2, [r1]
 283:Src/6502.c    ****         if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; //check if jump crossed a page 
 513              		.loc 1 283 0
 514 001e 5340     		eors	r3, r2
 515 0020 FF22     		movs	r2, #255
 516 0022 9343     		bics	r3, r2
 517 0024 09D1     		bne	.L40
 284:Src/6502.c    ****             else clockticks6502++;
 518              		.loc 1 284 0
 519 0026 0E49     		ldr	r1, .L41+16
 520 0028 0122     		movs	r2, #1
 521 002a 0023     		movs	r3, #0
 522 002c 0C68     		ldr	r4, [r1]
ARM GAS  /tmp/ccjHcktl.s 			page 15


 523 002e 4D68     		ldr	r5, [r1, #4]
 524 0030 1219     		adds	r2, r2, r4
 525 0032 6B41     		adcs	r3, r3, r5
 526 0034 0A60     		str	r2, [r1]
 527 0036 4B60     		str	r3, [r1, #4]
 528              	.L37:
 285:Src/6502.c    ****     }
 286:Src/6502.c    **** }
 529              		.loc 1 286 0
 530              		@ sp needed
 531 0038 30BD     		pop	{r4, r5, pc}
 532              	.L40:
 283:Src/6502.c    ****             else clockticks6502++;
 533              		.loc 1 283 0 discriminator 1
 534 003a 0949     		ldr	r1, .L41+16
 535 003c 0222     		movs	r2, #2
 536 003e 0023     		movs	r3, #0
 537 0040 0C68     		ldr	r4, [r1]
 538 0042 4D68     		ldr	r5, [r1, #4]
 539 0044 1219     		adds	r2, r2, r4
 540 0046 6B41     		adcs	r3, r3, r5
 541 0048 0A60     		str	r2, [r1]
 542 004a 4B60     		str	r3, [r1, #4]
 543 004c F4E7     		b	.L37
 544              	.L42:
 545 004e C046     		.align	2
 546              	.L41:
 547 0050 00000000 		.word	status
 548 0054 00000000 		.word	pc
 549 0058 00000000 		.word	oldpc
 550 005c 00000000 		.word	reladdr
 551 0060 00000000 		.word	.LANCHOR0
 552              		.cfi_endproc
 553              	.LFE65:
 555              		.section	.text.bvc,"ax",%progbits
 556              		.align	1
 557              		.syntax unified
 558              		.code	16
 559              		.thumb_func
 560              		.fpu softvfp
 562              	bvc:
 563              	.LFB67:
 287:Src/6502.c    **** 
 288:Src/6502.c    **** static void brk() {
 289:Src/6502.c    ****     pc++;
 290:Src/6502.c    ****     push16(pc); //push next instruction address onto stack
 291:Src/6502.c    ****     push8(status | FLAG_BREAK); //push CPU status OR'd with break flag to stack
 292:Src/6502.c    ****     setinterrupt(); //set interrupt flag
 293:Src/6502.c    ****     pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 294:Src/6502.c    **** }
 295:Src/6502.c    **** 
 296:Src/6502.c    **** static void bvc() {
 564              		.loc 1 296 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/ccjHcktl.s 			page 16


 569              	.LCFI6:
 570              		.cfi_def_cfa_offset 12
 571              		.cfi_offset 4, -12
 572              		.cfi_offset 5, -8
 573              		.cfi_offset 14, -4
 297:Src/6502.c    ****     if ((status & FLAG_OVERFLOW) == 0) {
 574              		.loc 1 297 0
 575 0002 124B     		ldr	r3, .L47
 576 0004 1B78     		ldrb	r3, [r3]
 577 0006 5B06     		lsls	r3, r3, #25
 578 0008 15D4     		bmi	.L43
 298:Src/6502.c    ****         oldpc = pc;
 579              		.loc 1 298 0
 580 000a 1149     		ldr	r1, .L47+4
 581 000c 0B88     		ldrh	r3, [r1]
 582 000e 114A     		ldr	r2, .L47+8
 583 0010 1380     		strh	r3, [r2]
 299:Src/6502.c    ****         pc += reladdr;
 584              		.loc 1 299 0
 585 0012 114A     		ldr	r2, .L47+12
 586 0014 1288     		ldrh	r2, [r2]
 587 0016 9A18     		adds	r2, r3, r2
 588 0018 92B2     		uxth	r2, r2
 589 001a 0A80     		strh	r2, [r1]
 300:Src/6502.c    ****         if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; //check if jump crossed a page 
 590              		.loc 1 300 0
 591 001c 5340     		eors	r3, r2
 592 001e FF22     		movs	r2, #255
 593 0020 9343     		bics	r3, r2
 594 0022 09D1     		bne	.L46
 301:Src/6502.c    ****             else clockticks6502++;
 595              		.loc 1 301 0
 596 0024 0D49     		ldr	r1, .L47+16
 597 0026 0122     		movs	r2, #1
 598 0028 0023     		movs	r3, #0
 599 002a 0C68     		ldr	r4, [r1]
 600 002c 4D68     		ldr	r5, [r1, #4]
 601 002e 1219     		adds	r2, r2, r4
 602 0030 6B41     		adcs	r3, r3, r5
 603 0032 0A60     		str	r2, [r1]
 604 0034 4B60     		str	r3, [r1, #4]
 605              	.L43:
 302:Src/6502.c    ****     }
 303:Src/6502.c    **** }
 606              		.loc 1 303 0
 607              		@ sp needed
 608 0036 30BD     		pop	{r4, r5, pc}
 609              	.L46:
 300:Src/6502.c    ****             else clockticks6502++;
 610              		.loc 1 300 0 discriminator 1
 611 0038 0849     		ldr	r1, .L47+16
 612 003a 0222     		movs	r2, #2
 613 003c 0023     		movs	r3, #0
 614 003e 0C68     		ldr	r4, [r1]
 615 0040 4D68     		ldr	r5, [r1, #4]
 616 0042 1219     		adds	r2, r2, r4
 617 0044 6B41     		adcs	r3, r3, r5
ARM GAS  /tmp/ccjHcktl.s 			page 17


 618 0046 0A60     		str	r2, [r1]
 619 0048 4B60     		str	r3, [r1, #4]
 620 004a F4E7     		b	.L43
 621              	.L48:
 622              		.align	2
 623              	.L47:
 624 004c 00000000 		.word	status
 625 0050 00000000 		.word	pc
 626 0054 00000000 		.word	oldpc
 627 0058 00000000 		.word	reladdr
 628 005c 00000000 		.word	.LANCHOR0
 629              		.cfi_endproc
 630              	.LFE67:
 632              		.section	.text.bvs,"ax",%progbits
 633              		.align	1
 634              		.syntax unified
 635              		.code	16
 636              		.thumb_func
 637              		.fpu softvfp
 639              	bvs:
 640              	.LFB68:
 304:Src/6502.c    **** 
 305:Src/6502.c    **** static void bvs() {
 641              		.loc 1 305 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645 0000 30B5     		push	{r4, r5, lr}
 646              	.LCFI7:
 647              		.cfi_def_cfa_offset 12
 648              		.cfi_offset 4, -12
 649              		.cfi_offset 5, -8
 650              		.cfi_offset 14, -4
 306:Src/6502.c    ****     if ((status & FLAG_OVERFLOW) == FLAG_OVERFLOW) {
 651              		.loc 1 306 0
 652 0002 124B     		ldr	r3, .L53
 653 0004 1B78     		ldrb	r3, [r3]
 654 0006 5B06     		lsls	r3, r3, #25
 655 0008 15D5     		bpl	.L49
 307:Src/6502.c    ****         oldpc = pc;
 656              		.loc 1 307 0
 657 000a 1149     		ldr	r1, .L53+4
 658 000c 0B88     		ldrh	r3, [r1]
 659 000e 114A     		ldr	r2, .L53+8
 660 0010 1380     		strh	r3, [r2]
 308:Src/6502.c    ****         pc += reladdr;
 661              		.loc 1 308 0
 662 0012 114A     		ldr	r2, .L53+12
 663 0014 1288     		ldrh	r2, [r2]
 664 0016 9A18     		adds	r2, r3, r2
 665 0018 92B2     		uxth	r2, r2
 666 001a 0A80     		strh	r2, [r1]
 309:Src/6502.c    ****         if ((oldpc & 0xFF00) != (pc & 0xFF00)) clockticks6502 += 2; //check if jump crossed a page 
 667              		.loc 1 309 0
 668 001c 5340     		eors	r3, r2
 669 001e FF22     		movs	r2, #255
 670 0020 9343     		bics	r3, r2
ARM GAS  /tmp/ccjHcktl.s 			page 18


 671 0022 09D1     		bne	.L52
 310:Src/6502.c    ****             else clockticks6502++;
 672              		.loc 1 310 0
 673 0024 0D49     		ldr	r1, .L53+16
 674 0026 0122     		movs	r2, #1
 675 0028 0023     		movs	r3, #0
 676 002a 0C68     		ldr	r4, [r1]
 677 002c 4D68     		ldr	r5, [r1, #4]
 678 002e 1219     		adds	r2, r2, r4
 679 0030 6B41     		adcs	r3, r3, r5
 680 0032 0A60     		str	r2, [r1]
 681 0034 4B60     		str	r3, [r1, #4]
 682              	.L49:
 311:Src/6502.c    ****     }
 312:Src/6502.c    **** }
 683              		.loc 1 312 0
 684              		@ sp needed
 685 0036 30BD     		pop	{r4, r5, pc}
 686              	.L52:
 309:Src/6502.c    ****             else clockticks6502++;
 687              		.loc 1 309 0 discriminator 1
 688 0038 0849     		ldr	r1, .L53+16
 689 003a 0222     		movs	r2, #2
 690 003c 0023     		movs	r3, #0
 691 003e 0C68     		ldr	r4, [r1]
 692 0040 4D68     		ldr	r5, [r1, #4]
 693 0042 1219     		adds	r2, r2, r4
 694 0044 6B41     		adcs	r3, r3, r5
 695 0046 0A60     		str	r2, [r1]
 696 0048 4B60     		str	r3, [r1, #4]
 697 004a F4E7     		b	.L49
 698              	.L54:
 699              		.align	2
 700              	.L53:
 701 004c 00000000 		.word	status
 702 0050 00000000 		.word	pc
 703 0054 00000000 		.word	oldpc
 704 0058 00000000 		.word	reladdr
 705 005c 00000000 		.word	.LANCHOR0
 706              		.cfi_endproc
 707              	.LFE68:
 709              		.section	.text.clc,"ax",%progbits
 710              		.align	1
 711              		.syntax unified
 712              		.code	16
 713              		.thumb_func
 714              		.fpu softvfp
 716              	clc:
 717              	.LFB69:
 313:Src/6502.c    **** 
 314:Src/6502.c    **** static void clc() {
 718              		.loc 1 314 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		@ link register save eliminated.
 315:Src/6502.c    ****     clearcarry();
ARM GAS  /tmp/ccjHcktl.s 			page 19


 723              		.loc 1 315 0
 724 0000 024A     		ldr	r2, .L56
 725 0002 1378     		ldrb	r3, [r2]
 726 0004 0121     		movs	r1, #1
 727 0006 8B43     		bics	r3, r1
 728 0008 1370     		strb	r3, [r2]
 316:Src/6502.c    **** }
 729              		.loc 1 316 0
 730              		@ sp needed
 731 000a 7047     		bx	lr
 732              	.L57:
 733              		.align	2
 734              	.L56:
 735 000c 00000000 		.word	status
 736              		.cfi_endproc
 737              	.LFE69:
 739              		.section	.text.cld,"ax",%progbits
 740              		.align	1
 741              		.syntax unified
 742              		.code	16
 743              		.thumb_func
 744              		.fpu softvfp
 746              	cld:
 747              	.LFB70:
 317:Src/6502.c    **** 
 318:Src/6502.c    **** static void cld() {
 748              		.loc 1 318 0
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 0
 751              		@ frame_needed = 0, uses_anonymous_args = 0
 752              		@ link register save eliminated.
 319:Src/6502.c    ****     cleardecimal();
 753              		.loc 1 319 0
 754 0000 024A     		ldr	r2, .L59
 755 0002 1378     		ldrb	r3, [r2]
 756 0004 0821     		movs	r1, #8
 757 0006 8B43     		bics	r3, r1
 758 0008 1370     		strb	r3, [r2]
 320:Src/6502.c    **** }
 759              		.loc 1 320 0
 760              		@ sp needed
 761 000a 7047     		bx	lr
 762              	.L60:
 763              		.align	2
 764              	.L59:
 765 000c 00000000 		.word	status
 766              		.cfi_endproc
 767              	.LFE70:
 769              		.section	.text.cli,"ax",%progbits
 770              		.align	1
 771              		.syntax unified
 772              		.code	16
 773              		.thumb_func
 774              		.fpu softvfp
 776              	cli:
 777              	.LFB71:
 321:Src/6502.c    **** 
ARM GAS  /tmp/ccjHcktl.s 			page 20


 322:Src/6502.c    **** static void cli() {
 778              		.loc 1 322 0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 0
 781              		@ frame_needed = 0, uses_anonymous_args = 0
 782              		@ link register save eliminated.
 323:Src/6502.c    ****     clearinterrupt();
 783              		.loc 1 323 0
 784 0000 024A     		ldr	r2, .L62
 785 0002 1378     		ldrb	r3, [r2]
 786 0004 0421     		movs	r1, #4
 787 0006 8B43     		bics	r3, r1
 788 0008 1370     		strb	r3, [r2]
 324:Src/6502.c    **** }
 789              		.loc 1 324 0
 790              		@ sp needed
 791 000a 7047     		bx	lr
 792              	.L63:
 793              		.align	2
 794              	.L62:
 795 000c 00000000 		.word	status
 796              		.cfi_endproc
 797              	.LFE71:
 799              		.section	.text.clv,"ax",%progbits
 800              		.align	1
 801              		.syntax unified
 802              		.code	16
 803              		.thumb_func
 804              		.fpu softvfp
 806              	clv:
 807              	.LFB72:
 325:Src/6502.c    **** 
 326:Src/6502.c    **** static void clv() {
 808              		.loc 1 326 0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 0
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 812              		@ link register save eliminated.
 327:Src/6502.c    ****     clearoverflow();
 813              		.loc 1 327 0
 814 0000 024A     		ldr	r2, .L65
 815 0002 1378     		ldrb	r3, [r2]
 816 0004 4021     		movs	r1, #64
 817 0006 8B43     		bics	r3, r1
 818 0008 1370     		strb	r3, [r2]
 328:Src/6502.c    **** }
 819              		.loc 1 328 0
 820              		@ sp needed
 821 000a 7047     		bx	lr
 822              	.L66:
 823              		.align	2
 824              	.L65:
 825 000c 00000000 		.word	status
 826              		.cfi_endproc
 827              	.LFE72:
 829              		.section	.text.dex,"ax",%progbits
 830              		.align	1
ARM GAS  /tmp/ccjHcktl.s 			page 21


 831              		.syntax unified
 832              		.code	16
 833              		.thumb_func
 834              		.fpu softvfp
 836              	dex:
 837              	.LFB77:
 329:Src/6502.c    **** 
 330:Src/6502.c    **** static void cmp() {
 331:Src/6502.c    ****     penaltyop = 1;
 332:Src/6502.c    ****     value = getvalue();
 333:Src/6502.c    ****     result = (uint16_t)a - value;
 334:Src/6502.c    ****    
 335:Src/6502.c    ****     if (a >= (uint8_t)(value & 0x00FF)) setcarry();
 336:Src/6502.c    ****         else clearcarry();
 337:Src/6502.c    ****     if (a == (uint8_t)(value & 0x00FF)) setzero();
 338:Src/6502.c    ****         else clearzero();
 339:Src/6502.c    ****     signcalc(result);
 340:Src/6502.c    **** }
 341:Src/6502.c    **** 
 342:Src/6502.c    **** static void cpx() {
 343:Src/6502.c    ****     value = getvalue();
 344:Src/6502.c    ****     result = (uint16_t)x - value;
 345:Src/6502.c    ****    
 346:Src/6502.c    ****     if (x >= (uint8_t)(value & 0x00FF)) setcarry();
 347:Src/6502.c    ****         else clearcarry();
 348:Src/6502.c    ****     if (x == (uint8_t)(value & 0x00FF)) setzero();
 349:Src/6502.c    ****         else clearzero();
 350:Src/6502.c    ****     signcalc(result);
 351:Src/6502.c    **** }
 352:Src/6502.c    **** 
 353:Src/6502.c    **** static void cpy() {
 354:Src/6502.c    ****     value = getvalue();
 355:Src/6502.c    ****     result = (uint16_t)y - value;
 356:Src/6502.c    ****    
 357:Src/6502.c    ****     if (y >= (uint8_t)(value & 0x00FF)) setcarry();
 358:Src/6502.c    ****         else clearcarry();
 359:Src/6502.c    ****     if (y == (uint8_t)(value & 0x00FF)) setzero();
 360:Src/6502.c    ****         else clearzero();
 361:Src/6502.c    ****     signcalc(result);
 362:Src/6502.c    **** }
 363:Src/6502.c    **** 
 364:Src/6502.c    **** static void dec() {
 365:Src/6502.c    ****     value = getvalue();
 366:Src/6502.c    ****     result = value - 1;
 367:Src/6502.c    ****    
 368:Src/6502.c    ****     zerocalc(result);
 369:Src/6502.c    ****     signcalc(result);
 370:Src/6502.c    ****    
 371:Src/6502.c    ****     putvalue(result);
 372:Src/6502.c    **** }
 373:Src/6502.c    **** 
 374:Src/6502.c    **** static void dex() {
 838              		.loc 1 374 0
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 0
 841              		@ frame_needed = 0, uses_anonymous_args = 0
 842              		@ link register save eliminated.
ARM GAS  /tmp/ccjHcktl.s 			page 22


 375:Src/6502.c    ****     x--;
 843              		.loc 1 375 0
 844 0000 104A     		ldr	r2, .L73
 845 0002 1378     		ldrb	r3, [r2]
 846 0004 013B     		subs	r3, r3, #1
 847 0006 DBB2     		uxtb	r3, r3
 848 0008 1370     		strb	r3, [r2]
 376:Src/6502.c    ****    
 377:Src/6502.c    ****     zerocalc(x);
 849              		.loc 1 377 0
 850 000a 002B     		cmp	r3, #0
 851 000c 0DD0     		beq	.L68
 852              		.loc 1 377 0 is_stmt 0 discriminator 1
 853 000e 0E49     		ldr	r1, .L73+4
 854 0010 0A78     		ldrb	r2, [r1]
 855 0012 0220     		movs	r0, #2
 856 0014 8243     		bics	r2, r0
 857 0016 0A70     		strb	r2, [r1]
 858              	.L69:
 378:Src/6502.c    ****     signcalc(x);
 859              		.loc 1 378 0 is_stmt 1
 860 0018 5BB2     		sxtb	r3, r3
 861 001a 002B     		cmp	r3, #0
 862 001c 0BDB     		blt	.L72
 863              		.loc 1 378 0 is_stmt 0 discriminator 2
 864 001e 0A4A     		ldr	r2, .L73+4
 865 0020 1178     		ldrb	r1, [r2]
 866 0022 7F23     		movs	r3, #127
 867 0024 0B40     		ands	r3, r1
 868 0026 1370     		strb	r3, [r2]
 869              	.L67:
 379:Src/6502.c    **** }
 870              		.loc 1 379 0 is_stmt 1
 871              		@ sp needed
 872 0028 7047     		bx	lr
 873              	.L68:
 377:Src/6502.c    ****     signcalc(x);
 874              		.loc 1 377 0 discriminator 2
 875 002a 0749     		ldr	r1, .L73+4
 876 002c 0A78     		ldrb	r2, [r1]
 877 002e 0220     		movs	r0, #2
 878 0030 0243     		orrs	r2, r0
 879 0032 0A70     		strb	r2, [r1]
 880 0034 F0E7     		b	.L69
 881              	.L72:
 378:Src/6502.c    ****     signcalc(x);
 882              		.loc 1 378 0 discriminator 1
 883 0036 044A     		ldr	r2, .L73+4
 884 0038 1178     		ldrb	r1, [r2]
 885 003a 8023     		movs	r3, #128
 886 003c 5B42     		rsbs	r3, r3, #0
 887 003e 0B43     		orrs	r3, r1
 888 0040 1370     		strb	r3, [r2]
 889 0042 F1E7     		b	.L67
 890              	.L74:
 891              		.align	2
 892              	.L73:
ARM GAS  /tmp/ccjHcktl.s 			page 23


 893 0044 00000000 		.word	x
 894 0048 00000000 		.word	status
 895              		.cfi_endproc
 896              	.LFE77:
 898              		.section	.text.dey,"ax",%progbits
 899              		.align	1
 900              		.syntax unified
 901              		.code	16
 902              		.thumb_func
 903              		.fpu softvfp
 905              	dey:
 906              	.LFB78:
 380:Src/6502.c    **** 
 381:Src/6502.c    **** static void dey() {
 907              		.loc 1 381 0
 908              		.cfi_startproc
 909              		@ args = 0, pretend = 0, frame = 0
 910              		@ frame_needed = 0, uses_anonymous_args = 0
 911              		@ link register save eliminated.
 382:Src/6502.c    ****     y--;
 912              		.loc 1 382 0
 913 0000 104A     		ldr	r2, .L81
 914 0002 1378     		ldrb	r3, [r2]
 915 0004 013B     		subs	r3, r3, #1
 916 0006 DBB2     		uxtb	r3, r3
 917 0008 1370     		strb	r3, [r2]
 383:Src/6502.c    ****    
 384:Src/6502.c    ****     zerocalc(y);
 918              		.loc 1 384 0
 919 000a 002B     		cmp	r3, #0
 920 000c 0DD0     		beq	.L76
 921              		.loc 1 384 0 is_stmt 0 discriminator 1
 922 000e 0E49     		ldr	r1, .L81+4
 923 0010 0A78     		ldrb	r2, [r1]
 924 0012 0220     		movs	r0, #2
 925 0014 8243     		bics	r2, r0
 926 0016 0A70     		strb	r2, [r1]
 927              	.L77:
 385:Src/6502.c    ****     signcalc(y);
 928              		.loc 1 385 0 is_stmt 1
 929 0018 5BB2     		sxtb	r3, r3
 930 001a 002B     		cmp	r3, #0
 931 001c 0BDB     		blt	.L80
 932              		.loc 1 385 0 is_stmt 0 discriminator 2
 933 001e 0A4A     		ldr	r2, .L81+4
 934 0020 1178     		ldrb	r1, [r2]
 935 0022 7F23     		movs	r3, #127
 936 0024 0B40     		ands	r3, r1
 937 0026 1370     		strb	r3, [r2]
 938              	.L75:
 386:Src/6502.c    **** }
 939              		.loc 1 386 0 is_stmt 1
 940              		@ sp needed
 941 0028 7047     		bx	lr
 942              	.L76:
 384:Src/6502.c    ****     signcalc(y);
 943              		.loc 1 384 0 discriminator 2
ARM GAS  /tmp/ccjHcktl.s 			page 24


 944 002a 0749     		ldr	r1, .L81+4
 945 002c 0A78     		ldrb	r2, [r1]
 946 002e 0220     		movs	r0, #2
 947 0030 0243     		orrs	r2, r0
 948 0032 0A70     		strb	r2, [r1]
 949 0034 F0E7     		b	.L77
 950              	.L80:
 385:Src/6502.c    ****     signcalc(y);
 951              		.loc 1 385 0 discriminator 1
 952 0036 044A     		ldr	r2, .L81+4
 953 0038 1178     		ldrb	r1, [r2]
 954 003a 8023     		movs	r3, #128
 955 003c 5B42     		rsbs	r3, r3, #0
 956 003e 0B43     		orrs	r3, r1
 957 0040 1370     		strb	r3, [r2]
 958 0042 F1E7     		b	.L75
 959              	.L82:
 960              		.align	2
 961              	.L81:
 962 0044 00000000 		.word	y
 963 0048 00000000 		.word	status
 964              		.cfi_endproc
 965              	.LFE78:
 967              		.section	.text.inx,"ax",%progbits
 968              		.align	1
 969              		.syntax unified
 970              		.code	16
 971              		.thumb_func
 972              		.fpu softvfp
 974              	inx:
 975              	.LFB81:
 387:Src/6502.c    **** 
 388:Src/6502.c    **** static void eor() {
 389:Src/6502.c    ****     penaltyop = 1;
 390:Src/6502.c    ****     value = getvalue();
 391:Src/6502.c    ****     result = (uint16_t)a ^ value;
 392:Src/6502.c    ****    
 393:Src/6502.c    ****     zerocalc(result);
 394:Src/6502.c    ****     signcalc(result);
 395:Src/6502.c    ****    
 396:Src/6502.c    ****     saveaccum(result);
 397:Src/6502.c    **** }
 398:Src/6502.c    **** 
 399:Src/6502.c    **** static void inc() {
 400:Src/6502.c    ****     value = getvalue();
 401:Src/6502.c    ****     result = value + 1;
 402:Src/6502.c    ****    
 403:Src/6502.c    ****     zerocalc(result);
 404:Src/6502.c    ****     signcalc(result);
 405:Src/6502.c    ****    
 406:Src/6502.c    ****     putvalue(result);
 407:Src/6502.c    **** }
 408:Src/6502.c    **** 
 409:Src/6502.c    **** static void inx() {
 976              		.loc 1 409 0
 977              		.cfi_startproc
 978              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccjHcktl.s 			page 25


 979              		@ frame_needed = 0, uses_anonymous_args = 0
 980              		@ link register save eliminated.
 410:Src/6502.c    ****     x++;
 981              		.loc 1 410 0
 982 0000 104A     		ldr	r2, .L89
 983 0002 1378     		ldrb	r3, [r2]
 984 0004 0133     		adds	r3, r3, #1
 985 0006 DBB2     		uxtb	r3, r3
 986 0008 1370     		strb	r3, [r2]
 411:Src/6502.c    ****    
 412:Src/6502.c    ****     zerocalc(x);
 987              		.loc 1 412 0
 988 000a 002B     		cmp	r3, #0
 989 000c 0DD0     		beq	.L84
 990              		.loc 1 412 0 is_stmt 0 discriminator 1
 991 000e 0E49     		ldr	r1, .L89+4
 992 0010 0A78     		ldrb	r2, [r1]
 993 0012 0220     		movs	r0, #2
 994 0014 8243     		bics	r2, r0
 995 0016 0A70     		strb	r2, [r1]
 996              	.L85:
 413:Src/6502.c    ****     signcalc(x);
 997              		.loc 1 413 0 is_stmt 1
 998 0018 5BB2     		sxtb	r3, r3
 999 001a 002B     		cmp	r3, #0
 1000 001c 0BDB     		blt	.L88
 1001              		.loc 1 413 0 is_stmt 0 discriminator 2
 1002 001e 0A4A     		ldr	r2, .L89+4
 1003 0020 1178     		ldrb	r1, [r2]
 1004 0022 7F23     		movs	r3, #127
 1005 0024 0B40     		ands	r3, r1
 1006 0026 1370     		strb	r3, [r2]
 1007              	.L83:
 414:Src/6502.c    **** }
 1008              		.loc 1 414 0 is_stmt 1
 1009              		@ sp needed
 1010 0028 7047     		bx	lr
 1011              	.L84:
 412:Src/6502.c    ****     signcalc(x);
 1012              		.loc 1 412 0 discriminator 2
 1013 002a 0749     		ldr	r1, .L89+4
 1014 002c 0A78     		ldrb	r2, [r1]
 1015 002e 0220     		movs	r0, #2
 1016 0030 0243     		orrs	r2, r0
 1017 0032 0A70     		strb	r2, [r1]
 1018 0034 F0E7     		b	.L85
 1019              	.L88:
 413:Src/6502.c    ****     signcalc(x);
 1020              		.loc 1 413 0 discriminator 1
 1021 0036 044A     		ldr	r2, .L89+4
 1022 0038 1178     		ldrb	r1, [r2]
 1023 003a 8023     		movs	r3, #128
 1024 003c 5B42     		rsbs	r3, r3, #0
 1025 003e 0B43     		orrs	r3, r1
 1026 0040 1370     		strb	r3, [r2]
 1027 0042 F1E7     		b	.L83
 1028              	.L90:
ARM GAS  /tmp/ccjHcktl.s 			page 26


 1029              		.align	2
 1030              	.L89:
 1031 0044 00000000 		.word	x
 1032 0048 00000000 		.word	status
 1033              		.cfi_endproc
 1034              	.LFE81:
 1036              		.section	.text.iny,"ax",%progbits
 1037              		.align	1
 1038              		.syntax unified
 1039              		.code	16
 1040              		.thumb_func
 1041              		.fpu softvfp
 1043              	iny:
 1044              	.LFB82:
 415:Src/6502.c    **** 
 416:Src/6502.c    **** static void iny() {
 1045              		.loc 1 416 0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 0
 1048              		@ frame_needed = 0, uses_anonymous_args = 0
 1049              		@ link register save eliminated.
 417:Src/6502.c    ****     y++;
 1050              		.loc 1 417 0
 1051 0000 104A     		ldr	r2, .L97
 1052 0002 1378     		ldrb	r3, [r2]
 1053 0004 0133     		adds	r3, r3, #1
 1054 0006 DBB2     		uxtb	r3, r3
 1055 0008 1370     		strb	r3, [r2]
 418:Src/6502.c    ****    
 419:Src/6502.c    ****     zerocalc(y);
 1056              		.loc 1 419 0
 1057 000a 002B     		cmp	r3, #0
 1058 000c 0DD0     		beq	.L92
 1059              		.loc 1 419 0 is_stmt 0 discriminator 1
 1060 000e 0E49     		ldr	r1, .L97+4
 1061 0010 0A78     		ldrb	r2, [r1]
 1062 0012 0220     		movs	r0, #2
 1063 0014 8243     		bics	r2, r0
 1064 0016 0A70     		strb	r2, [r1]
 1065              	.L93:
 420:Src/6502.c    ****     signcalc(y);
 1066              		.loc 1 420 0 is_stmt 1
 1067 0018 5BB2     		sxtb	r3, r3
 1068 001a 002B     		cmp	r3, #0
 1069 001c 0BDB     		blt	.L96
 1070              		.loc 1 420 0 is_stmt 0 discriminator 2
 1071 001e 0A4A     		ldr	r2, .L97+4
 1072 0020 1178     		ldrb	r1, [r2]
 1073 0022 7F23     		movs	r3, #127
 1074 0024 0B40     		ands	r3, r1
 1075 0026 1370     		strb	r3, [r2]
 1076              	.L91:
 421:Src/6502.c    **** }
 1077              		.loc 1 421 0 is_stmt 1
 1078              		@ sp needed
 1079 0028 7047     		bx	lr
 1080              	.L92:
ARM GAS  /tmp/ccjHcktl.s 			page 27


 419:Src/6502.c    ****     signcalc(y);
 1081              		.loc 1 419 0 discriminator 2
 1082 002a 0749     		ldr	r1, .L97+4
 1083 002c 0A78     		ldrb	r2, [r1]
 1084 002e 0220     		movs	r0, #2
 1085 0030 0243     		orrs	r2, r0
 1086 0032 0A70     		strb	r2, [r1]
 1087 0034 F0E7     		b	.L93
 1088              	.L96:
 420:Src/6502.c    ****     signcalc(y);
 1089              		.loc 1 420 0 discriminator 1
 1090 0036 044A     		ldr	r2, .L97+4
 1091 0038 1178     		ldrb	r1, [r2]
 1092 003a 8023     		movs	r3, #128
 1093 003c 5B42     		rsbs	r3, r3, #0
 1094 003e 0B43     		orrs	r3, r1
 1095 0040 1370     		strb	r3, [r2]
 1096 0042 F1E7     		b	.L91
 1097              	.L98:
 1098              		.align	2
 1099              	.L97:
 1100 0044 00000000 		.word	y
 1101 0048 00000000 		.word	status
 1102              		.cfi_endproc
 1103              	.LFE82:
 1105              		.section	.text.jmp,"ax",%progbits
 1106              		.align	1
 1107              		.syntax unified
 1108              		.code	16
 1109              		.thumb_func
 1110              		.fpu softvfp
 1112              	jmp:
 1113              	.LFB83:
 422:Src/6502.c    **** 
 423:Src/6502.c    **** static void jmp() {
 1114              		.loc 1 423 0
 1115              		.cfi_startproc
 1116              		@ args = 0, pretend = 0, frame = 0
 1117              		@ frame_needed = 0, uses_anonymous_args = 0
 1118              		@ link register save eliminated.
 424:Src/6502.c    ****     pc = ea;
 1119              		.loc 1 424 0
 1120 0000 024B     		ldr	r3, .L100
 1121 0002 1A88     		ldrh	r2, [r3]
 1122 0004 024B     		ldr	r3, .L100+4
 1123 0006 1A80     		strh	r2, [r3]
 425:Src/6502.c    **** }
 1124              		.loc 1 425 0
 1125              		@ sp needed
 1126 0008 7047     		bx	lr
 1127              	.L101:
 1128 000a C046     		.align	2
 1129              	.L100:
 1130 000c 00000000 		.word	ea
 1131 0010 00000000 		.word	pc
 1132              		.cfi_endproc
 1133              	.LFE83:
ARM GAS  /tmp/ccjHcktl.s 			page 28


 1135              		.section	.text.nop,"ax",%progbits
 1136              		.align	1
 1137              		.syntax unified
 1138              		.code	16
 1139              		.thumb_func
 1140              		.fpu softvfp
 1142              	nop:
 1143              	.LFB89:
 426:Src/6502.c    **** 
 427:Src/6502.c    **** static void jsr() {
 428:Src/6502.c    ****     push16(pc - 1);
 429:Src/6502.c    ****     pc = ea;
 430:Src/6502.c    **** }
 431:Src/6502.c    **** 
 432:Src/6502.c    **** static void lda() {
 433:Src/6502.c    ****     penaltyop = 1;
 434:Src/6502.c    ****     value = getvalue();
 435:Src/6502.c    ****     a = (uint8_t)(value & 0x00FF);
 436:Src/6502.c    ****    
 437:Src/6502.c    ****     zerocalc(a);
 438:Src/6502.c    ****     signcalc(a);
 439:Src/6502.c    **** }
 440:Src/6502.c    **** 
 441:Src/6502.c    **** static void ldx() {
 442:Src/6502.c    ****     penaltyop = 1;
 443:Src/6502.c    ****     value = getvalue();
 444:Src/6502.c    ****     x = (uint8_t)(value & 0x00FF);
 445:Src/6502.c    ****    
 446:Src/6502.c    ****     zerocalc(x);
 447:Src/6502.c    ****     signcalc(x);
 448:Src/6502.c    **** }
 449:Src/6502.c    **** 
 450:Src/6502.c    **** static void ldy() {
 451:Src/6502.c    ****     penaltyop = 1;
 452:Src/6502.c    ****     value = getvalue();
 453:Src/6502.c    ****     y = (uint8_t)(value & 0x00FF);
 454:Src/6502.c    ****    
 455:Src/6502.c    ****     zerocalc(y);
 456:Src/6502.c    ****     signcalc(y);
 457:Src/6502.c    **** }
 458:Src/6502.c    **** 
 459:Src/6502.c    **** static void lsr() {
 460:Src/6502.c    ****     value = getvalue();
 461:Src/6502.c    ****     result = value >> 1;
 462:Src/6502.c    ****    
 463:Src/6502.c    ****     if (value & 1) setcarry();
 464:Src/6502.c    ****         else clearcarry();
 465:Src/6502.c    ****     zerocalc(result);
 466:Src/6502.c    ****     signcalc(result);
 467:Src/6502.c    ****    
 468:Src/6502.c    ****     putvalue(result);
 469:Src/6502.c    **** }
 470:Src/6502.c    **** 
 471:Src/6502.c    **** static void nop() {
 1144              		.loc 1 471 0
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccjHcktl.s 			page 29


 1147              		@ frame_needed = 0, uses_anonymous_args = 0
 1148              		@ link register save eliminated.
 472:Src/6502.c    ****     switch (opcode) {
 1149              		.loc 1 472 0
 1150 0000 0B4B     		ldr	r3, .L107
 1151 0002 1B78     		ldrb	r3, [r3]
 1152 0004 5C2B     		cmp	r3, #92
 1153 0006 0ED0     		beq	.L104
 1154 0008 DAB2     		uxtb	r2, r3
 1155 000a 5C2A     		cmp	r2, #92
 1156 000c 07D9     		bls	.L106
 1157 000e DAB2     		uxtb	r2, r3
 1158 0010 DC2A     		cmp	r2, #220
 1159 0012 08D0     		beq	.L104
 1160 0014 FC2A     		cmp	r2, #252
 1161 0016 06D0     		beq	.L104
 1162 0018 7C2B     		cmp	r3, #124
 1163 001a 07D1     		bne	.L102
 1164 001c 03E0     		b	.L104
 1165              	.L106:
 1166 001e 1C2B     		cmp	r3, #28
 1167 0020 01D0     		beq	.L104
 1168 0022 3C2B     		cmp	r3, #60
 1169 0024 02D1     		bne	.L102
 1170              	.L104:
 473:Src/6502.c    ****         case 0x1C:
 474:Src/6502.c    ****         case 0x3C:
 475:Src/6502.c    ****         case 0x5C:
 476:Src/6502.c    ****         case 0x7C:
 477:Src/6502.c    ****         case 0xDC:
 478:Src/6502.c    ****         case 0xFC:
 479:Src/6502.c    ****             penaltyop = 1;
 1171              		.loc 1 479 0
 1172 0026 0122     		movs	r2, #1
 1173 0028 024B     		ldr	r3, .L107+4
 1174 002a 1A70     		strb	r2, [r3]
 1175              	.L102:
 480:Src/6502.c    ****             break;
 481:Src/6502.c    ****     }
 482:Src/6502.c    **** }
 1176              		.loc 1 482 0
 1177              		@ sp needed
 1178 002c 7047     		bx	lr
 1179              	.L108:
 1180 002e C046     		.align	2
 1181              	.L107:
 1182 0030 00000000 		.word	opcode
 1183 0034 00000000 		.word	penaltyop
 1184              		.cfi_endproc
 1185              	.LFE89:
 1187              		.section	.text.sec,"ax",%progbits
 1188              		.align	1
 1189              		.syntax unified
 1190              		.code	16
 1191              		.thumb_func
 1192              		.fpu softvfp
 1194              	sec:
ARM GAS  /tmp/ccjHcktl.s 			page 30


 1195              	.LFB100:
 483:Src/6502.c    **** 
 484:Src/6502.c    **** static void ora() {
 485:Src/6502.c    ****     penaltyop = 1;
 486:Src/6502.c    ****     value = getvalue();
 487:Src/6502.c    ****     result = (uint16_t)a | value;
 488:Src/6502.c    ****    
 489:Src/6502.c    ****     zerocalc(result);
 490:Src/6502.c    ****     signcalc(result);
 491:Src/6502.c    ****    
 492:Src/6502.c    ****     saveaccum(result);
 493:Src/6502.c    **** }
 494:Src/6502.c    **** 
 495:Src/6502.c    **** static void pha() {
 496:Src/6502.c    ****     push8(a);
 497:Src/6502.c    **** }
 498:Src/6502.c    **** 
 499:Src/6502.c    **** static void php() {
 500:Src/6502.c    ****     push8(status | FLAG_BREAK);
 501:Src/6502.c    **** }
 502:Src/6502.c    **** 
 503:Src/6502.c    **** static void pla() {
 504:Src/6502.c    ****     a = pull8();
 505:Src/6502.c    ****    
 506:Src/6502.c    ****     zerocalc(a);
 507:Src/6502.c    ****     signcalc(a);
 508:Src/6502.c    **** }
 509:Src/6502.c    **** 
 510:Src/6502.c    **** static void plp() {
 511:Src/6502.c    ****     status = pull8() | FLAG_CONSTANT;
 512:Src/6502.c    **** }
 513:Src/6502.c    **** 
 514:Src/6502.c    **** static void rol() {
 515:Src/6502.c    ****     value = getvalue();
 516:Src/6502.c    ****     result = (value << 1) | (status & FLAG_CARRY);
 517:Src/6502.c    ****    
 518:Src/6502.c    ****     carrycalc(result);
 519:Src/6502.c    ****     zerocalc(result);
 520:Src/6502.c    ****     signcalc(result);
 521:Src/6502.c    ****    
 522:Src/6502.c    ****     putvalue(result);
 523:Src/6502.c    **** }
 524:Src/6502.c    **** 
 525:Src/6502.c    **** static void ror() {
 526:Src/6502.c    ****     value = getvalue();
 527:Src/6502.c    ****     result = (value >> 1) | ((status & FLAG_CARRY) << 7);
 528:Src/6502.c    ****    
 529:Src/6502.c    ****     if (value & 1) setcarry();
 530:Src/6502.c    ****         else clearcarry();
 531:Src/6502.c    ****     zerocalc(result);
 532:Src/6502.c    ****     signcalc(result);
 533:Src/6502.c    ****    
 534:Src/6502.c    ****     putvalue(result);
 535:Src/6502.c    **** }
 536:Src/6502.c    **** 
 537:Src/6502.c    **** static void rti() {
 538:Src/6502.c    ****     status = pull8();
ARM GAS  /tmp/ccjHcktl.s 			page 31


 539:Src/6502.c    ****     value = pull16();
 540:Src/6502.c    ****     pc = value;
 541:Src/6502.c    **** }
 542:Src/6502.c    **** 
 543:Src/6502.c    **** static void rts() {
 544:Src/6502.c    ****     value = pull16();
 545:Src/6502.c    ****     pc = value + 1;
 546:Src/6502.c    **** }
 547:Src/6502.c    **** 
 548:Src/6502.c    **** static void sbc() {
 549:Src/6502.c    ****     penaltyop = 1;
 550:Src/6502.c    ****     value = getvalue() ^ 0x00FF;
 551:Src/6502.c    ****     result = (uint16_t)a + value + (uint16_t)(status & FLAG_CARRY);
 552:Src/6502.c    ****    
 553:Src/6502.c    ****     carrycalc(result);
 554:Src/6502.c    ****     zerocalc(result);
 555:Src/6502.c    ****     overflowcalc(result, a, value);
 556:Src/6502.c    ****     signcalc(result);
 557:Src/6502.c    **** 
 558:Src/6502.c    ****     #ifndef NES_CPU
 559:Src/6502.c    ****     if (status & FLAG_DECIMAL) {
 560:Src/6502.c    ****         clearcarry();
 561:Src/6502.c    ****         
 562:Src/6502.c    ****         a -= 0x66;
 563:Src/6502.c    ****         if ((a & 0x0F) > 0x09) {
 564:Src/6502.c    ****             a += 0x06;
 565:Src/6502.c    ****         }
 566:Src/6502.c    ****         if ((a & 0xF0) > 0x90) {
 567:Src/6502.c    ****             a += 0x60;
 568:Src/6502.c    ****             setcarry();
 569:Src/6502.c    ****         }
 570:Src/6502.c    ****         
 571:Src/6502.c    ****         clockticks6502++;
 572:Src/6502.c    ****     }
 573:Src/6502.c    ****     #endif
 574:Src/6502.c    ****    
 575:Src/6502.c    ****     saveaccum(result);
 576:Src/6502.c    **** }
 577:Src/6502.c    **** 
 578:Src/6502.c    **** static void sec() {
 1196              		.loc 1 578 0
 1197              		.cfi_startproc
 1198              		@ args = 0, pretend = 0, frame = 0
 1199              		@ frame_needed = 0, uses_anonymous_args = 0
 1200              		@ link register save eliminated.
 579:Src/6502.c    ****     setcarry();
 1201              		.loc 1 579 0
 1202 0000 024A     		ldr	r2, .L110
 1203 0002 1378     		ldrb	r3, [r2]
 1204 0004 0121     		movs	r1, #1
 1205 0006 0B43     		orrs	r3, r1
 1206 0008 1370     		strb	r3, [r2]
 580:Src/6502.c    **** }
 1207              		.loc 1 580 0
 1208              		@ sp needed
 1209 000a 7047     		bx	lr
 1210              	.L111:
ARM GAS  /tmp/ccjHcktl.s 			page 32


 1211              		.align	2
 1212              	.L110:
 1213 000c 00000000 		.word	status
 1214              		.cfi_endproc
 1215              	.LFE100:
 1217              		.section	.text.sed,"ax",%progbits
 1218              		.align	1
 1219              		.syntax unified
 1220              		.code	16
 1221              		.thumb_func
 1222              		.fpu softvfp
 1224              	sed:
 1225              	.LFB101:
 581:Src/6502.c    **** 
 582:Src/6502.c    **** static void sed() {
 1226              		.loc 1 582 0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 0
 1229              		@ frame_needed = 0, uses_anonymous_args = 0
 1230              		@ link register save eliminated.
 583:Src/6502.c    ****     setdecimal();
 1231              		.loc 1 583 0
 1232 0000 024A     		ldr	r2, .L113
 1233 0002 1378     		ldrb	r3, [r2]
 1234 0004 0821     		movs	r1, #8
 1235 0006 0B43     		orrs	r3, r1
 1236 0008 1370     		strb	r3, [r2]
 584:Src/6502.c    **** }
 1237              		.loc 1 584 0
 1238              		@ sp needed
 1239 000a 7047     		bx	lr
 1240              	.L114:
 1241              		.align	2
 1242              	.L113:
 1243 000c 00000000 		.word	status
 1244              		.cfi_endproc
 1245              	.LFE101:
 1247              		.section	.text.sei,"ax",%progbits
 1248              		.align	1
 1249              		.syntax unified
 1250              		.code	16
 1251              		.thumb_func
 1252              		.fpu softvfp
 1254              	sei:
 1255              	.LFB102:
 585:Src/6502.c    **** 
 586:Src/6502.c    **** static void sei() {
 1256              		.loc 1 586 0
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 0
 1259              		@ frame_needed = 0, uses_anonymous_args = 0
 1260              		@ link register save eliminated.
 587:Src/6502.c    ****     setinterrupt();
 1261              		.loc 1 587 0
 1262 0000 024A     		ldr	r2, .L116
 1263 0002 1378     		ldrb	r3, [r2]
 1264 0004 0421     		movs	r1, #4
ARM GAS  /tmp/ccjHcktl.s 			page 33


 1265 0006 0B43     		orrs	r3, r1
 1266 0008 1370     		strb	r3, [r2]
 588:Src/6502.c    **** }
 1267              		.loc 1 588 0
 1268              		@ sp needed
 1269 000a 7047     		bx	lr
 1270              	.L117:
 1271              		.align	2
 1272              	.L116:
 1273 000c 00000000 		.word	status
 1274              		.cfi_endproc
 1275              	.LFE102:
 1277              		.section	.text.tax,"ax",%progbits
 1278              		.align	1
 1279              		.syntax unified
 1280              		.code	16
 1281              		.thumb_func
 1282              		.fpu softvfp
 1284              	tax:
 1285              	.LFB106:
 589:Src/6502.c    **** 
 590:Src/6502.c    **** static void sta() {
 591:Src/6502.c    ****     putvalue(a);
 592:Src/6502.c    **** }
 593:Src/6502.c    **** 
 594:Src/6502.c    **** static void stx() {
 595:Src/6502.c    ****     putvalue(x);
 596:Src/6502.c    **** }
 597:Src/6502.c    **** 
 598:Src/6502.c    **** static void sty() {
 599:Src/6502.c    ****     putvalue(y);
 600:Src/6502.c    **** }
 601:Src/6502.c    **** 
 602:Src/6502.c    **** static void tax() {
 1286              		.loc 1 602 0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 0
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290              		@ link register save eliminated.
 603:Src/6502.c    ****     x = a;
 1291              		.loc 1 603 0
 1292 0000 104B     		ldr	r3, .L124
 1293 0002 1B78     		ldrb	r3, [r3]
 1294 0004 104A     		ldr	r2, .L124+4
 1295 0006 1370     		strb	r3, [r2]
 604:Src/6502.c    ****    
 605:Src/6502.c    ****     zerocalc(x);
 1296              		.loc 1 605 0
 1297 0008 002B     		cmp	r3, #0
 1298 000a 0DD0     		beq	.L119
 1299              		.loc 1 605 0 is_stmt 0 discriminator 1
 1300 000c 0F49     		ldr	r1, .L124+8
 1301 000e 0A78     		ldrb	r2, [r1]
 1302 0010 0220     		movs	r0, #2
 1303 0012 8243     		bics	r2, r0
 1304 0014 0A70     		strb	r2, [r1]
 1305              	.L120:
ARM GAS  /tmp/ccjHcktl.s 			page 34


 606:Src/6502.c    ****     signcalc(x);
 1306              		.loc 1 606 0 is_stmt 1
 1307 0016 5BB2     		sxtb	r3, r3
 1308 0018 002B     		cmp	r3, #0
 1309 001a 0BDB     		blt	.L123
 1310              		.loc 1 606 0 is_stmt 0 discriminator 2
 1311 001c 0B4A     		ldr	r2, .L124+8
 1312 001e 1178     		ldrb	r1, [r2]
 1313 0020 7F23     		movs	r3, #127
 1314 0022 0B40     		ands	r3, r1
 1315 0024 1370     		strb	r3, [r2]
 1316              	.L118:
 607:Src/6502.c    **** }
 1317              		.loc 1 607 0 is_stmt 1
 1318              		@ sp needed
 1319 0026 7047     		bx	lr
 1320              	.L119:
 605:Src/6502.c    ****     signcalc(x);
 1321              		.loc 1 605 0 discriminator 2
 1322 0028 0849     		ldr	r1, .L124+8
 1323 002a 0A78     		ldrb	r2, [r1]
 1324 002c 0220     		movs	r0, #2
 1325 002e 0243     		orrs	r2, r0
 1326 0030 0A70     		strb	r2, [r1]
 1327 0032 F0E7     		b	.L120
 1328              	.L123:
 606:Src/6502.c    ****     signcalc(x);
 1329              		.loc 1 606 0 discriminator 1
 1330 0034 054A     		ldr	r2, .L124+8
 1331 0036 1178     		ldrb	r1, [r2]
 1332 0038 8023     		movs	r3, #128
 1333 003a 5B42     		rsbs	r3, r3, #0
 1334 003c 0B43     		orrs	r3, r1
 1335 003e 1370     		strb	r3, [r2]
 1336 0040 F1E7     		b	.L118
 1337              	.L125:
 1338 0042 C046     		.align	2
 1339              	.L124:
 1340 0044 00000000 		.word	a
 1341 0048 00000000 		.word	x
 1342 004c 00000000 		.word	status
 1343              		.cfi_endproc
 1344              	.LFE106:
 1346              		.section	.text.tay,"ax",%progbits
 1347              		.align	1
 1348              		.syntax unified
 1349              		.code	16
 1350              		.thumb_func
 1351              		.fpu softvfp
 1353              	tay:
 1354              	.LFB107:
 608:Src/6502.c    **** 
 609:Src/6502.c    **** static void tay() {
 1355              		.loc 1 609 0
 1356              		.cfi_startproc
 1357              		@ args = 0, pretend = 0, frame = 0
 1358              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccjHcktl.s 			page 35


 1359              		@ link register save eliminated.
 610:Src/6502.c    ****     y = a;
 1360              		.loc 1 610 0
 1361 0000 104B     		ldr	r3, .L132
 1362 0002 1B78     		ldrb	r3, [r3]
 1363 0004 104A     		ldr	r2, .L132+4
 1364 0006 1370     		strb	r3, [r2]
 611:Src/6502.c    ****    
 612:Src/6502.c    ****     zerocalc(y);
 1365              		.loc 1 612 0
 1366 0008 002B     		cmp	r3, #0
 1367 000a 0DD0     		beq	.L127
 1368              		.loc 1 612 0 is_stmt 0 discriminator 1
 1369 000c 0F49     		ldr	r1, .L132+8
 1370 000e 0A78     		ldrb	r2, [r1]
 1371 0010 0220     		movs	r0, #2
 1372 0012 8243     		bics	r2, r0
 1373 0014 0A70     		strb	r2, [r1]
 1374              	.L128:
 613:Src/6502.c    ****     signcalc(y);
 1375              		.loc 1 613 0 is_stmt 1
 1376 0016 5BB2     		sxtb	r3, r3
 1377 0018 002B     		cmp	r3, #0
 1378 001a 0BDB     		blt	.L131
 1379              		.loc 1 613 0 is_stmt 0 discriminator 2
 1380 001c 0B4A     		ldr	r2, .L132+8
 1381 001e 1178     		ldrb	r1, [r2]
 1382 0020 7F23     		movs	r3, #127
 1383 0022 0B40     		ands	r3, r1
 1384 0024 1370     		strb	r3, [r2]
 1385              	.L126:
 614:Src/6502.c    **** }
 1386              		.loc 1 614 0 is_stmt 1
 1387              		@ sp needed
 1388 0026 7047     		bx	lr
 1389              	.L127:
 612:Src/6502.c    ****     signcalc(y);
 1390              		.loc 1 612 0 discriminator 2
 1391 0028 0849     		ldr	r1, .L132+8
 1392 002a 0A78     		ldrb	r2, [r1]
 1393 002c 0220     		movs	r0, #2
 1394 002e 0243     		orrs	r2, r0
 1395 0030 0A70     		strb	r2, [r1]
 1396 0032 F0E7     		b	.L128
 1397              	.L131:
 613:Src/6502.c    ****     signcalc(y);
 1398              		.loc 1 613 0 discriminator 1
 1399 0034 054A     		ldr	r2, .L132+8
 1400 0036 1178     		ldrb	r1, [r2]
 1401 0038 8023     		movs	r3, #128
 1402 003a 5B42     		rsbs	r3, r3, #0
 1403 003c 0B43     		orrs	r3, r1
 1404 003e 1370     		strb	r3, [r2]
 1405 0040 F1E7     		b	.L126
 1406              	.L133:
 1407 0042 C046     		.align	2
 1408              	.L132:
ARM GAS  /tmp/ccjHcktl.s 			page 36


 1409 0044 00000000 		.word	a
 1410 0048 00000000 		.word	y
 1411 004c 00000000 		.word	status
 1412              		.cfi_endproc
 1413              	.LFE107:
 1415              		.section	.text.tsx,"ax",%progbits
 1416              		.align	1
 1417              		.syntax unified
 1418              		.code	16
 1419              		.thumb_func
 1420              		.fpu softvfp
 1422              	tsx:
 1423              	.LFB108:
 615:Src/6502.c    **** 
 616:Src/6502.c    **** static void tsx() {
 1424              		.loc 1 616 0
 1425              		.cfi_startproc
 1426              		@ args = 0, pretend = 0, frame = 0
 1427              		@ frame_needed = 0, uses_anonymous_args = 0
 1428              		@ link register save eliminated.
 617:Src/6502.c    ****     x = sp;
 1429              		.loc 1 617 0
 1430 0000 104B     		ldr	r3, .L140
 1431 0002 1B78     		ldrb	r3, [r3]
 1432 0004 104A     		ldr	r2, .L140+4
 1433 0006 1370     		strb	r3, [r2]
 618:Src/6502.c    ****    
 619:Src/6502.c    ****     zerocalc(x);
 1434              		.loc 1 619 0
 1435 0008 002B     		cmp	r3, #0
 1436 000a 0DD0     		beq	.L135
 1437              		.loc 1 619 0 is_stmt 0 discriminator 1
 1438 000c 0F49     		ldr	r1, .L140+8
 1439 000e 0A78     		ldrb	r2, [r1]
 1440 0010 0220     		movs	r0, #2
 1441 0012 8243     		bics	r2, r0
 1442 0014 0A70     		strb	r2, [r1]
 1443              	.L136:
 620:Src/6502.c    ****     signcalc(x);
 1444              		.loc 1 620 0 is_stmt 1
 1445 0016 5BB2     		sxtb	r3, r3
 1446 0018 002B     		cmp	r3, #0
 1447 001a 0BDB     		blt	.L139
 1448              		.loc 1 620 0 is_stmt 0 discriminator 2
 1449 001c 0B4A     		ldr	r2, .L140+8
 1450 001e 1178     		ldrb	r1, [r2]
 1451 0020 7F23     		movs	r3, #127
 1452 0022 0B40     		ands	r3, r1
 1453 0024 1370     		strb	r3, [r2]
 1454              	.L134:
 621:Src/6502.c    **** }
 1455              		.loc 1 621 0 is_stmt 1
 1456              		@ sp needed
 1457 0026 7047     		bx	lr
 1458              	.L135:
 619:Src/6502.c    ****     signcalc(x);
 1459              		.loc 1 619 0 discriminator 2
ARM GAS  /tmp/ccjHcktl.s 			page 37


 1460 0028 0849     		ldr	r1, .L140+8
 1461 002a 0A78     		ldrb	r2, [r1]
 1462 002c 0220     		movs	r0, #2
 1463 002e 0243     		orrs	r2, r0
 1464 0030 0A70     		strb	r2, [r1]
 1465 0032 F0E7     		b	.L136
 1466              	.L139:
 620:Src/6502.c    ****     signcalc(x);
 1467              		.loc 1 620 0 discriminator 1
 1468 0034 054A     		ldr	r2, .L140+8
 1469 0036 1178     		ldrb	r1, [r2]
 1470 0038 8023     		movs	r3, #128
 1471 003a 5B42     		rsbs	r3, r3, #0
 1472 003c 0B43     		orrs	r3, r1
 1473 003e 1370     		strb	r3, [r2]
 1474 0040 F1E7     		b	.L134
 1475              	.L141:
 1476 0042 C046     		.align	2
 1477              	.L140:
 1478 0044 00000000 		.word	sp
 1479 0048 00000000 		.word	x
 1480 004c 00000000 		.word	status
 1481              		.cfi_endproc
 1482              	.LFE108:
 1484              		.section	.text.txa,"ax",%progbits
 1485              		.align	1
 1486              		.syntax unified
 1487              		.code	16
 1488              		.thumb_func
 1489              		.fpu softvfp
 1491              	txa:
 1492              	.LFB109:
 622:Src/6502.c    **** 
 623:Src/6502.c    **** static void txa() {
 1493              		.loc 1 623 0
 1494              		.cfi_startproc
 1495              		@ args = 0, pretend = 0, frame = 0
 1496              		@ frame_needed = 0, uses_anonymous_args = 0
 1497              		@ link register save eliminated.
 624:Src/6502.c    ****     a = x;
 1498              		.loc 1 624 0
 1499 0000 104B     		ldr	r3, .L148
 1500 0002 1B78     		ldrb	r3, [r3]
 1501 0004 104A     		ldr	r2, .L148+4
 1502 0006 1370     		strb	r3, [r2]
 625:Src/6502.c    ****    
 626:Src/6502.c    ****     zerocalc(a);
 1503              		.loc 1 626 0
 1504 0008 002B     		cmp	r3, #0
 1505 000a 0DD0     		beq	.L143
 1506              		.loc 1 626 0 is_stmt 0 discriminator 1
 1507 000c 0F49     		ldr	r1, .L148+8
 1508 000e 0A78     		ldrb	r2, [r1]
 1509 0010 0220     		movs	r0, #2
 1510 0012 8243     		bics	r2, r0
 1511 0014 0A70     		strb	r2, [r1]
 1512              	.L144:
ARM GAS  /tmp/ccjHcktl.s 			page 38


 627:Src/6502.c    ****     signcalc(a);
 1513              		.loc 1 627 0 is_stmt 1
 1514 0016 5BB2     		sxtb	r3, r3
 1515 0018 002B     		cmp	r3, #0
 1516 001a 0BDB     		blt	.L147
 1517              		.loc 1 627 0 is_stmt 0 discriminator 2
 1518 001c 0B4A     		ldr	r2, .L148+8
 1519 001e 1178     		ldrb	r1, [r2]
 1520 0020 7F23     		movs	r3, #127
 1521 0022 0B40     		ands	r3, r1
 1522 0024 1370     		strb	r3, [r2]
 1523              	.L142:
 628:Src/6502.c    **** }
 1524              		.loc 1 628 0 is_stmt 1
 1525              		@ sp needed
 1526 0026 7047     		bx	lr
 1527              	.L143:
 626:Src/6502.c    ****     signcalc(a);
 1528              		.loc 1 626 0 discriminator 2
 1529 0028 0849     		ldr	r1, .L148+8
 1530 002a 0A78     		ldrb	r2, [r1]
 1531 002c 0220     		movs	r0, #2
 1532 002e 0243     		orrs	r2, r0
 1533 0030 0A70     		strb	r2, [r1]
 1534 0032 F0E7     		b	.L144
 1535              	.L147:
 627:Src/6502.c    ****     signcalc(a);
 1536              		.loc 1 627 0 discriminator 1
 1537 0034 054A     		ldr	r2, .L148+8
 1538 0036 1178     		ldrb	r1, [r2]
 1539 0038 8023     		movs	r3, #128
 1540 003a 5B42     		rsbs	r3, r3, #0
 1541 003c 0B43     		orrs	r3, r1
 1542 003e 1370     		strb	r3, [r2]
 1543 0040 F1E7     		b	.L142
 1544              	.L149:
 1545 0042 C046     		.align	2
 1546              	.L148:
 1547 0044 00000000 		.word	x
 1548 0048 00000000 		.word	a
 1549 004c 00000000 		.word	status
 1550              		.cfi_endproc
 1551              	.LFE109:
 1553              		.section	.text.txs,"ax",%progbits
 1554              		.align	1
 1555              		.syntax unified
 1556              		.code	16
 1557              		.thumb_func
 1558              		.fpu softvfp
 1560              	txs:
 1561              	.LFB110:
 629:Src/6502.c    **** 
 630:Src/6502.c    **** static void txs() {
 1562              		.loc 1 630 0
 1563              		.cfi_startproc
 1564              		@ args = 0, pretend = 0, frame = 0
 1565              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccjHcktl.s 			page 39


 1566              		@ link register save eliminated.
 631:Src/6502.c    ****     sp = x;
 1567              		.loc 1 631 0
 1568 0000 024B     		ldr	r3, .L151
 1569 0002 1A78     		ldrb	r2, [r3]
 1570 0004 024B     		ldr	r3, .L151+4
 1571 0006 1A70     		strb	r2, [r3]
 632:Src/6502.c    **** }
 1572              		.loc 1 632 0
 1573              		@ sp needed
 1574 0008 7047     		bx	lr
 1575              	.L152:
 1576 000a C046     		.align	2
 1577              	.L151:
 1578 000c 00000000 		.word	x
 1579 0010 00000000 		.word	sp
 1580              		.cfi_endproc
 1581              	.LFE110:
 1583              		.section	.text.tya,"ax",%progbits
 1584              		.align	1
 1585              		.syntax unified
 1586              		.code	16
 1587              		.thumb_func
 1588              		.fpu softvfp
 1590              	tya:
 1591              	.LFB111:
 633:Src/6502.c    **** 
 634:Src/6502.c    **** static void tya() {
 1592              		.loc 1 634 0
 1593              		.cfi_startproc
 1594              		@ args = 0, pretend = 0, frame = 0
 1595              		@ frame_needed = 0, uses_anonymous_args = 0
 1596              		@ link register save eliminated.
 635:Src/6502.c    ****     a = y;
 1597              		.loc 1 635 0
 1598 0000 104B     		ldr	r3, .L159
 1599 0002 1B78     		ldrb	r3, [r3]
 1600 0004 104A     		ldr	r2, .L159+4
 1601 0006 1370     		strb	r3, [r2]
 636:Src/6502.c    ****    
 637:Src/6502.c    ****     zerocalc(a);
 1602              		.loc 1 637 0
 1603 0008 002B     		cmp	r3, #0
 1604 000a 0DD0     		beq	.L154
 1605              		.loc 1 637 0 is_stmt 0 discriminator 1
 1606 000c 0F49     		ldr	r1, .L159+8
 1607 000e 0A78     		ldrb	r2, [r1]
 1608 0010 0220     		movs	r0, #2
 1609 0012 8243     		bics	r2, r0
 1610 0014 0A70     		strb	r2, [r1]
 1611              	.L155:
 638:Src/6502.c    ****     signcalc(a);
 1612              		.loc 1 638 0 is_stmt 1
 1613 0016 5BB2     		sxtb	r3, r3
 1614 0018 002B     		cmp	r3, #0
 1615 001a 0BDB     		blt	.L158
 1616              		.loc 1 638 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/ccjHcktl.s 			page 40


 1617 001c 0B4A     		ldr	r2, .L159+8
 1618 001e 1178     		ldrb	r1, [r2]
 1619 0020 7F23     		movs	r3, #127
 1620 0022 0B40     		ands	r3, r1
 1621 0024 1370     		strb	r3, [r2]
 1622              	.L153:
 639:Src/6502.c    **** }
 1623              		.loc 1 639 0 is_stmt 1
 1624              		@ sp needed
 1625 0026 7047     		bx	lr
 1626              	.L154:
 637:Src/6502.c    ****     signcalc(a);
 1627              		.loc 1 637 0 discriminator 2
 1628 0028 0849     		ldr	r1, .L159+8
 1629 002a 0A78     		ldrb	r2, [r1]
 1630 002c 0220     		movs	r0, #2
 1631 002e 0243     		orrs	r2, r0
 1632 0030 0A70     		strb	r2, [r1]
 1633 0032 F0E7     		b	.L155
 1634              	.L158:
 638:Src/6502.c    ****     signcalc(a);
 1635              		.loc 1 638 0 discriminator 1
 1636 0034 054A     		ldr	r2, .L159+8
 1637 0036 1178     		ldrb	r1, [r2]
 1638 0038 8023     		movs	r3, #128
 1639 003a 5B42     		rsbs	r3, r3, #0
 1640 003c 0B43     		orrs	r3, r1
 1641 003e 1370     		strb	r3, [r2]
 1642 0040 F1E7     		b	.L153
 1643              	.L160:
 1644 0042 C046     		.align	2
 1645              	.L159:
 1646 0044 00000000 		.word	y
 1647 0048 00000000 		.word	a
 1648 004c 00000000 		.word	status
 1649              		.cfi_endproc
 1650              	.LFE111:
 1652              		.section	.text.putvalue,"ax",%progbits
 1653              		.align	1
 1654              		.syntax unified
 1655              		.code	16
 1656              		.thumb_func
 1657              		.fpu softvfp
 1659              	putvalue:
 1660              	.LFB55:
 168:Src/6502.c    ****     if (addrtable[opcode] == acc) a = (uint8_t)(saveval & 0x00FF);
 1661              		.loc 1 168 0
 1662              		.cfi_startproc
 1663              		@ args = 0, pretend = 0, frame = 0
 1664              		@ frame_needed = 0, uses_anonymous_args = 0
 1665              	.LVL0:
 1666 0000 10B5     		push	{r4, lr}
 1667              	.LCFI8:
 1668              		.cfi_def_cfa_offset 8
 1669              		.cfi_offset 4, -8
 1670              		.cfi_offset 14, -4
 169:Src/6502.c    ****         else write6502(ea, (saveval & 0x00FF));
ARM GAS  /tmp/ccjHcktl.s 			page 41


 1671              		.loc 1 169 0
 1672 0002 084B     		ldr	r3, .L165
 1673 0004 1B78     		ldrb	r3, [r3]
 1674 0006 9B00     		lsls	r3, r3, #2
 1675 0008 074A     		ldr	r2, .L165+4
 1676 000a 9A58     		ldr	r2, [r3, r2]
 1677 000c 074B     		ldr	r3, .L165+8
 1678 000e 9A42     		cmp	r2, r3
 1679 0010 05D0     		beq	.L164
 170:Src/6502.c    **** }
 1680              		.loc 1 170 0
 1681 0012 C1B2     		uxtb	r1, r0
 1682 0014 064B     		ldr	r3, .L165+12
 1683 0016 1888     		ldrh	r0, [r3]
 1684              	.LVL1:
 1685 0018 FFF7FEFF 		bl	write6502
 1686              	.LVL2:
 1687              	.L161:
 171:Src/6502.c    **** 
 1688              		.loc 1 171 0
 1689              		@ sp needed
 1690 001c 10BD     		pop	{r4, pc}
 1691              	.LVL3:
 1692              	.L164:
 169:Src/6502.c    ****         else write6502(ea, (saveval & 0x00FF));
 1693              		.loc 1 169 0 discriminator 1
 1694 001e 054B     		ldr	r3, .L165+16
 1695 0020 1870     		strb	r0, [r3]
 1696 0022 FBE7     		b	.L161
 1697              	.L166:
 1698              		.align	2
 1699              	.L165:
 1700 0024 00000000 		.word	opcode
 1701 0028 00000000 		.word	.LANCHOR1
 1702 002c 00000000 		.word	acc
 1703 0030 00000000 		.word	ea
 1704 0034 00000000 		.word	a
 1705              		.cfi_endproc
 1706              	.LFE55:
 1708              		.section	.text.stx,"ax",%progbits
 1709              		.align	1
 1710              		.syntax unified
 1711              		.code	16
 1712              		.thumb_func
 1713              		.fpu softvfp
 1715              	stx:
 1716              	.LFB104:
 594:Src/6502.c    ****     putvalue(x);
 1717              		.loc 1 594 0
 1718              		.cfi_startproc
 1719              		@ args = 0, pretend = 0, frame = 0
 1720              		@ frame_needed = 0, uses_anonymous_args = 0
 1721 0000 10B5     		push	{r4, lr}
 1722              	.LCFI9:
 1723              		.cfi_def_cfa_offset 8
 1724              		.cfi_offset 4, -8
 1725              		.cfi_offset 14, -4
ARM GAS  /tmp/ccjHcktl.s 			page 42


 595:Src/6502.c    **** }
 1726              		.loc 1 595 0
 1727 0002 024B     		ldr	r3, .L168
 1728 0004 1878     		ldrb	r0, [r3]
 1729 0006 FFF7FEFF 		bl	putvalue
 1730              	.LVL4:
 596:Src/6502.c    **** 
 1731              		.loc 1 596 0
 1732              		@ sp needed
 1733 000a 10BD     		pop	{r4, pc}
 1734              	.L169:
 1735              		.align	2
 1736              	.L168:
 1737 000c 00000000 		.word	x
 1738              		.cfi_endproc
 1739              	.LFE104:
 1741              		.section	.text.sty,"ax",%progbits
 1742              		.align	1
 1743              		.syntax unified
 1744              		.code	16
 1745              		.thumb_func
 1746              		.fpu softvfp
 1748              	sty:
 1749              	.LFB105:
 598:Src/6502.c    ****     putvalue(y);
 1750              		.loc 1 598 0
 1751              		.cfi_startproc
 1752              		@ args = 0, pretend = 0, frame = 0
 1753              		@ frame_needed = 0, uses_anonymous_args = 0
 1754 0000 10B5     		push	{r4, lr}
 1755              	.LCFI10:
 1756              		.cfi_def_cfa_offset 8
 1757              		.cfi_offset 4, -8
 1758              		.cfi_offset 14, -4
 599:Src/6502.c    **** }
 1759              		.loc 1 599 0
 1760 0002 024B     		ldr	r3, .L171
 1761 0004 1878     		ldrb	r0, [r3]
 1762 0006 FFF7FEFF 		bl	putvalue
 1763              	.LVL5:
 600:Src/6502.c    **** 
 1764              		.loc 1 600 0
 1765              		@ sp needed
 1766 000a 10BD     		pop	{r4, pc}
 1767              	.L172:
 1768              		.align	2
 1769              	.L171:
 1770 000c 00000000 		.word	y
 1771              		.cfi_endproc
 1772              	.LFE105:
 1774              		.section	.text.sta,"ax",%progbits
 1775              		.align	1
 1776              		.syntax unified
 1777              		.code	16
 1778              		.thumb_func
 1779              		.fpu softvfp
 1781              	sta:
ARM GAS  /tmp/ccjHcktl.s 			page 43


 1782              	.LFB103:
 590:Src/6502.c    ****     putvalue(a);
 1783              		.loc 1 590 0
 1784              		.cfi_startproc
 1785              		@ args = 0, pretend = 0, frame = 0
 1786              		@ frame_needed = 0, uses_anonymous_args = 0
 1787 0000 10B5     		push	{r4, lr}
 1788              	.LCFI11:
 1789              		.cfi_def_cfa_offset 8
 1790              		.cfi_offset 4, -8
 1791              		.cfi_offset 14, -4
 591:Src/6502.c    **** }
 1792              		.loc 1 591 0
 1793 0002 024B     		ldr	r3, .L174
 1794 0004 1878     		ldrb	r0, [r3]
 1795 0006 FFF7FEFF 		bl	putvalue
 1796              	.LVL6:
 592:Src/6502.c    **** 
 1797              		.loc 1 592 0
 1798              		@ sp needed
 1799 000a 10BD     		pop	{r4, pc}
 1800              	.L175:
 1801              		.align	2
 1802              	.L174:
 1803 000c 00000000 		.word	a
 1804              		.cfi_endproc
 1805              	.LFE103:
 1807              		.section	.text.sax,"ax",%progbits
 1808              		.align	1
 1809              		.syntax unified
 1810              		.code	16
 1811              		.thumb_func
 1812              		.fpu softvfp
 1814              	sax:
 1815              	.LFB113:
 640:Src/6502.c    **** 
 641:Src/6502.c    **** //undocumented instructions
 642:Src/6502.c    **** #ifdef UNDOCUMENTED
 643:Src/6502.c    ****     static void lax() {
 644:Src/6502.c    ****         lda();
 645:Src/6502.c    ****         ldx();
 646:Src/6502.c    ****     }
 647:Src/6502.c    **** 
 648:Src/6502.c    ****     static void sax() {
 1816              		.loc 1 648 0
 1817              		.cfi_startproc
 1818              		@ args = 0, pretend = 0, frame = 0
 1819              		@ frame_needed = 0, uses_anonymous_args = 0
 1820 0000 70B5     		push	{r4, r5, r6, lr}
 1821              	.LCFI12:
 1822              		.cfi_def_cfa_offset 16
 1823              		.cfi_offset 4, -16
 1824              		.cfi_offset 5, -12
 1825              		.cfi_offset 6, -8
 1826              		.cfi_offset 14, -4
 649:Src/6502.c    ****         sta();
 1827              		.loc 1 649 0
ARM GAS  /tmp/ccjHcktl.s 			page 44


 1828 0002 FFF7FEFF 		bl	sta
 1829              	.LVL7:
 650:Src/6502.c    ****         stx();
 1830              		.loc 1 650 0
 1831 0006 FFF7FEFF 		bl	stx
 1832              	.LVL8:
 651:Src/6502.c    ****         putvalue(a & x);
 1833              		.loc 1 651 0
 1834 000a 0D4B     		ldr	r3, .L178
 1835 000c 1B78     		ldrb	r3, [r3]
 1836 000e 0D4A     		ldr	r2, .L178+4
 1837 0010 1078     		ldrb	r0, [r2]
 1838 0012 1840     		ands	r0, r3
 1839 0014 FFF7FEFF 		bl	putvalue
 1840              	.LVL9:
 652:Src/6502.c    ****         if (penaltyop && penaltyaddr) clockticks6502--;
 1841              		.loc 1 652 0
 1842 0018 0B4B     		ldr	r3, .L178+8
 1843 001a 1B78     		ldrb	r3, [r3]
 1844 001c 002B     		cmp	r3, #0
 1845 001e 0DD0     		beq	.L176
 1846              		.loc 1 652 0 is_stmt 0 discriminator 1
 1847 0020 0A4B     		ldr	r3, .L178+12
 1848 0022 1B78     		ldrb	r3, [r3]
 1849 0024 002B     		cmp	r3, #0
 1850 0026 09D0     		beq	.L176
 1851              		.loc 1 652 0 discriminator 2
 1852 0028 0949     		ldr	r1, .L178+16
 1853 002a 0122     		movs	r2, #1
 1854 002c 5242     		rsbs	r2, r2, #0
 1855 002e D317     		asrs	r3, r2, #31
 1856 0030 0C68     		ldr	r4, [r1]
 1857 0032 4D68     		ldr	r5, [r1, #4]
 1858 0034 1219     		adds	r2, r2, r4
 1859 0036 6B41     		adcs	r3, r3, r5
 1860 0038 0A60     		str	r2, [r1]
 1861 003a 4B60     		str	r3, [r1, #4]
 1862              	.L176:
 653:Src/6502.c    ****     }
 1863              		.loc 1 653 0 is_stmt 1
 1864              		@ sp needed
 1865 003c 70BD     		pop	{r4, r5, r6, pc}
 1866              	.L179:
 1867 003e C046     		.align	2
 1868              	.L178:
 1869 0040 00000000 		.word	a
 1870 0044 00000000 		.word	x
 1871 0048 00000000 		.word	penaltyop
 1872 004c 00000000 		.word	penaltyaddr
 1873 0050 00000000 		.word	.LANCHOR0
 1874              		.cfi_endproc
 1875              	.LFE113:
 1877              		.section	.text.getvalue,"ax",%progbits
 1878              		.align	1
 1879              		.syntax unified
 1880              		.code	16
 1881              		.thumb_func
ARM GAS  /tmp/ccjHcktl.s 			page 45


 1882              		.fpu softvfp
 1884              	getvalue:
 1885              	.LFB53:
 159:Src/6502.c    ****     if (addrtable[opcode] == acc) return((uint16_t)a);
 1886              		.loc 1 159 0
 1887              		.cfi_startproc
 1888              		@ args = 0, pretend = 0, frame = 0
 1889              		@ frame_needed = 0, uses_anonymous_args = 0
 1890 0000 10B5     		push	{r4, lr}
 1891              	.LCFI13:
 1892              		.cfi_def_cfa_offset 8
 1893              		.cfi_offset 4, -8
 1894              		.cfi_offset 14, -4
 160:Src/6502.c    ****         else return((uint16_t)read6502(ea));
 1895              		.loc 1 160 0
 1896 0002 084B     		ldr	r3, .L184
 1897 0004 1B78     		ldrb	r3, [r3]
 1898 0006 9B00     		lsls	r3, r3, #2
 1899 0008 074A     		ldr	r2, .L184+4
 1900 000a 9A58     		ldr	r2, [r3, r2]
 1901 000c 074B     		ldr	r3, .L184+8
 1902 000e 9A42     		cmp	r2, r3
 1903 0010 05D0     		beq	.L183
 161:Src/6502.c    **** }
 1904              		.loc 1 161 0
 1905 0012 074B     		ldr	r3, .L184+12
 1906 0014 1888     		ldrh	r0, [r3]
 1907 0016 FFF7FEFF 		bl	read6502
 1908              	.LVL10:
 1909 001a 80B2     		uxth	r0, r0
 1910              	.L182:
 162:Src/6502.c    **** 
 1911              		.loc 1 162 0
 1912              		@ sp needed
 1913 001c 10BD     		pop	{r4, pc}
 1914              	.L183:
 160:Src/6502.c    ****         else return((uint16_t)read6502(ea));
 1915              		.loc 1 160 0 discriminator 1
 1916 001e 054B     		ldr	r3, .L184+16
 1917 0020 1878     		ldrb	r0, [r3]
 1918 0022 FBE7     		b	.L182
 1919              	.L185:
 1920              		.align	2
 1921              	.L184:
 1922 0024 00000000 		.word	opcode
 1923 0028 00000000 		.word	.LANCHOR1
 1924 002c 00000000 		.word	acc
 1925 0030 00000000 		.word	ea
 1926 0034 00000000 		.word	a
 1927              		.cfi_endproc
 1928              	.LFE53:
 1930              		.section	.text.inc,"ax",%progbits
 1931              		.align	1
 1932              		.syntax unified
 1933              		.code	16
 1934              		.thumb_func
 1935              		.fpu softvfp
ARM GAS  /tmp/ccjHcktl.s 			page 46


 1937              	inc:
 1938              	.LFB80:
 399:Src/6502.c    ****     value = getvalue();
 1939              		.loc 1 399 0
 1940              		.cfi_startproc
 1941              		@ args = 0, pretend = 0, frame = 0
 1942              		@ frame_needed = 0, uses_anonymous_args = 0
 1943 0000 10B5     		push	{r4, lr}
 1944              	.LCFI14:
 1945              		.cfi_def_cfa_offset 8
 1946              		.cfi_offset 4, -8
 1947              		.cfi_offset 14, -4
 400:Src/6502.c    ****     result = value + 1;
 1948              		.loc 1 400 0
 1949 0002 FFF7FEFF 		bl	getvalue
 1950              	.LVL11:
 1951 0006 124B     		ldr	r3, .L192
 1952 0008 1880     		strh	r0, [r3]
 401:Src/6502.c    ****    
 1953              		.loc 1 401 0
 1954 000a 0130     		adds	r0, r0, #1
 1955 000c 80B2     		uxth	r0, r0
 1956 000e 114B     		ldr	r3, .L192+4
 1957 0010 1880     		strh	r0, [r3]
 403:Src/6502.c    ****     signcalc(result);
 1958              		.loc 1 403 0
 1959 0012 FF23     		movs	r3, #255
 1960 0014 0342     		tst	r3, r0
 1961 0016 0ED0     		beq	.L187
 403:Src/6502.c    ****     signcalc(result);
 1962              		.loc 1 403 0 is_stmt 0 discriminator 1
 1963 0018 0F4A     		ldr	r2, .L192+8
 1964 001a 1378     		ldrb	r3, [r2]
 1965 001c 0221     		movs	r1, #2
 1966 001e 8B43     		bics	r3, r1
 1967 0020 1370     		strb	r3, [r2]
 1968              	.L188:
 404:Src/6502.c    ****    
 1969              		.loc 1 404 0 is_stmt 1
 1970 0022 0306     		lsls	r3, r0, #24
 1971 0024 0DD4     		bmi	.L191
 404:Src/6502.c    ****    
 1972              		.loc 1 404 0 is_stmt 0 discriminator 2
 1973 0026 0C4A     		ldr	r2, .L192+8
 1974 0028 1178     		ldrb	r1, [r2]
 1975 002a 7F23     		movs	r3, #127
 1976 002c 0B40     		ands	r3, r1
 1977 002e 1370     		strb	r3, [r2]
 1978              	.L190:
 406:Src/6502.c    **** }
 1979              		.loc 1 406 0 is_stmt 1
 1980 0030 FFF7FEFF 		bl	putvalue
 1981              	.LVL12:
 407:Src/6502.c    **** 
 1982              		.loc 1 407 0
 1983              		@ sp needed
 1984 0034 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccjHcktl.s 			page 47


 1985              	.L187:
 403:Src/6502.c    ****     signcalc(result);
 1986              		.loc 1 403 0 discriminator 2
 1987 0036 084A     		ldr	r2, .L192+8
 1988 0038 1378     		ldrb	r3, [r2]
 1989 003a 0221     		movs	r1, #2
 1990 003c 0B43     		orrs	r3, r1
 1991 003e 1370     		strb	r3, [r2]
 1992 0040 EFE7     		b	.L188
 1993              	.L191:
 404:Src/6502.c    ****    
 1994              		.loc 1 404 0 discriminator 1
 1995 0042 054A     		ldr	r2, .L192+8
 1996 0044 1178     		ldrb	r1, [r2]
 1997 0046 8023     		movs	r3, #128
 1998 0048 5B42     		rsbs	r3, r3, #0
 1999 004a 0B43     		orrs	r3, r1
 2000 004c 1370     		strb	r3, [r2]
 2001 004e EFE7     		b	.L190
 2002              	.L193:
 2003              		.align	2
 2004              	.L192:
 2005 0050 00000000 		.word	value
 2006 0054 00000000 		.word	result
 2007 0058 00000000 		.word	status
 2008              		.cfi_endproc
 2009              	.LFE80:
 2011              		.section	.text.sbc,"ax",%progbits
 2012              		.align	1
 2013              		.syntax unified
 2014              		.code	16
 2015              		.thumb_func
 2016              		.fpu softvfp
 2018              	sbc:
 2019              	.LFB99:
 548:Src/6502.c    ****     penaltyop = 1;
 2020              		.loc 1 548 0
 2021              		.cfi_startproc
 2022              		@ args = 0, pretend = 0, frame = 0
 2023              		@ frame_needed = 0, uses_anonymous_args = 0
 2024 0000 70B5     		push	{r4, r5, r6, lr}
 2025              	.LCFI15:
 2026              		.cfi_def_cfa_offset 16
 2027              		.cfi_offset 4, -16
 2028              		.cfi_offset 5, -12
 2029              		.cfi_offset 6, -8
 2030              		.cfi_offset 14, -4
 549:Src/6502.c    ****     value = getvalue() ^ 0x00FF;
 2031              		.loc 1 549 0
 2032 0002 0122     		movs	r2, #1
 2033 0004 3B4B     		ldr	r3, .L206
 2034 0006 1A70     		strb	r2, [r3]
 550:Src/6502.c    ****     result = (uint16_t)a + value + (uint16_t)(status & FLAG_CARRY);
 2035              		.loc 1 550 0
 2036 0008 FFF7FEFF 		bl	getvalue
 2037              	.LVL13:
 2038 000c FF23     		movs	r3, #255
ARM GAS  /tmp/ccjHcktl.s 			page 48


 2039 000e 5840     		eors	r0, r3
 2040 0010 80B2     		uxth	r0, r0
 2041 0012 394B     		ldr	r3, .L206+4
 2042 0014 1880     		strh	r0, [r3]
 551:Src/6502.c    ****    
 2043              		.loc 1 551 0
 2044 0016 394B     		ldr	r3, .L206+8
 2045 0018 1A78     		ldrb	r2, [r3]
 2046 001a 8318     		adds	r3, r0, r2
 2047 001c 9BB2     		uxth	r3, r3
 2048 001e 3849     		ldr	r1, .L206+12
 2049 0020 0978     		ldrb	r1, [r1]
 2050 0022 0124     		movs	r4, #1
 2051 0024 0C40     		ands	r4, r1
 2052 0026 1B19     		adds	r3, r3, r4
 2053 0028 9BB2     		uxth	r3, r3
 2054 002a 364C     		ldr	r4, .L206+16
 2055 002c 2380     		strh	r3, [r4]
 553:Src/6502.c    ****     zerocalc(result);
 2056              		.loc 1 553 0
 2057 002e FF24     		movs	r4, #255
 2058 0030 1D00     		movs	r5, r3
 2059 0032 A543     		bics	r5, r4
 2060 0034 47D0     		beq	.L195
 553:Src/6502.c    ****     zerocalc(result);
 2061              		.loc 1 553 0 is_stmt 0 discriminator 1
 2062 0036 0124     		movs	r4, #1
 2063 0038 2143     		orrs	r1, r4
 2064 003a 314C     		ldr	r4, .L206+12
 2065 003c 2170     		strb	r1, [r4]
 2066              	.L196:
 554:Src/6502.c    ****     overflowcalc(result, a, value);
 2067              		.loc 1 554 0 is_stmt 1
 2068 003e FF21     		movs	r1, #255
 2069 0040 1942     		tst	r1, r3
 2070 0042 45D0     		beq	.L197
 554:Src/6502.c    ****     overflowcalc(result, a, value);
 2071              		.loc 1 554 0 is_stmt 0 discriminator 1
 2072 0044 2E4C     		ldr	r4, .L206+12
 2073 0046 2178     		ldrb	r1, [r4]
 2074 0048 0225     		movs	r5, #2
 2075 004a A943     		bics	r1, r5
 2076 004c 2170     		strb	r1, [r4]
 2077              	.L198:
 555:Src/6502.c    ****     signcalc(result);
 2078              		.loc 1 555 0 is_stmt 1
 2079 004e 5840     		eors	r0, r3
 2080 0050 1900     		movs	r1, r3
 2081 0052 5140     		eors	r1, r2
 2082 0054 0840     		ands	r0, r1
 2083 0056 0106     		lsls	r1, r0, #24
 2084 0058 40D5     		bpl	.L199
 555:Src/6502.c    ****     signcalc(result);
 2085              		.loc 1 555 0 is_stmt 0 discriminator 1
 2086 005a 2948     		ldr	r0, .L206+12
 2087 005c 0178     		ldrb	r1, [r0]
 2088 005e 4024     		movs	r4, #64
ARM GAS  /tmp/ccjHcktl.s 			page 49


 2089 0060 2143     		orrs	r1, r4
 2090 0062 0170     		strb	r1, [r0]
 2091              	.L200:
 556:Src/6502.c    **** 
 2092              		.loc 1 556 0 is_stmt 1
 2093 0064 1906     		lsls	r1, r3, #24
 2094 0066 3FD5     		bpl	.L201
 556:Src/6502.c    **** 
 2095              		.loc 1 556 0 is_stmt 0 discriminator 1
 2096 0068 2548     		ldr	r0, .L206+12
 2097 006a 0478     		ldrb	r4, [r0]
 2098 006c 8021     		movs	r1, #128
 2099 006e 4942     		rsbs	r1, r1, #0
 2100 0070 2143     		orrs	r1, r4
 2101 0072 0170     		strb	r1, [r0]
 2102              	.L202:
 559:Src/6502.c    ****         clearcarry();
 2103              		.loc 1 559 0 is_stmt 1
 2104 0074 2249     		ldr	r1, .L206+12
 2105 0076 0978     		ldrb	r1, [r1]
 2106 0078 0807     		lsls	r0, r1, #28
 2107 007a 21D5     		bpl	.L203
 560:Src/6502.c    ****         
 2108              		.loc 1 560 0
 2109 007c 0120     		movs	r0, #1
 2110 007e 8143     		bics	r1, r0
 2111 0080 1F48     		ldr	r0, .L206+12
 2112 0082 0170     		strb	r1, [r0]
 562:Src/6502.c    ****         if ((a & 0x0F) > 0x09) {
 2113              		.loc 1 562 0
 2114 0084 663A     		subs	r2, r2, #102
 2115 0086 D2B2     		uxtb	r2, r2
 2116 0088 1C48     		ldr	r0, .L206+8
 2117 008a 0270     		strb	r2, [r0]
 563:Src/6502.c    ****             a += 0x06;
 2118              		.loc 1 563 0
 2119 008c 0F20     		movs	r0, #15
 2120 008e 1040     		ands	r0, r2
 2121 0090 0928     		cmp	r0, #9
 2122 0092 02DD     		ble	.L204
 564:Src/6502.c    ****         }
 2123              		.loc 1 564 0
 2124 0094 0632     		adds	r2, r2, #6
 2125 0096 1948     		ldr	r0, .L206+8
 2126 0098 0270     		strb	r2, [r0]
 2127              	.L204:
 566:Src/6502.c    ****             a += 0x60;
 2128              		.loc 1 566 0
 2129 009a 184A     		ldr	r2, .L206+8
 2130 009c 1278     		ldrb	r2, [r2]
 2131 009e 0F20     		movs	r0, #15
 2132 00a0 8243     		bics	r2, r0
 2133 00a2 902A     		cmp	r2, #144
 2134 00a4 03DD     		ble	.L205
 568:Src/6502.c    ****         }
 2135              		.loc 1 568 0
 2136 00a6 0122     		movs	r2, #1
ARM GAS  /tmp/ccjHcktl.s 			page 50


 2137 00a8 1143     		orrs	r1, r2
 2138 00aa 154A     		ldr	r2, .L206+12
 2139 00ac 1170     		strb	r1, [r2]
 2140              	.L205:
 571:Src/6502.c    ****     }
 2141              		.loc 1 571 0
 2142 00ae 164A     		ldr	r2, .L206+20
 2143 00b0 0120     		movs	r0, #1
 2144 00b2 0021     		movs	r1, #0
 2145 00b4 1468     		ldr	r4, [r2]
 2146 00b6 5568     		ldr	r5, [r2, #4]
 2147 00b8 0019     		adds	r0, r0, r4
 2148 00ba 6941     		adcs	r1, r1, r5
 2149 00bc 1060     		str	r0, [r2]
 2150 00be 5160     		str	r1, [r2, #4]
 2151              	.L203:
 575:Src/6502.c    **** }
 2152              		.loc 1 575 0
 2153 00c0 0E4A     		ldr	r2, .L206+8
 2154 00c2 1370     		strb	r3, [r2]
 576:Src/6502.c    **** 
 2155              		.loc 1 576 0
 2156              		@ sp needed
 2157 00c4 70BD     		pop	{r4, r5, r6, pc}
 2158              	.L195:
 553:Src/6502.c    ****     zerocalc(result);
 2159              		.loc 1 553 0 discriminator 2
 2160 00c6 0124     		movs	r4, #1
 2161 00c8 A143     		bics	r1, r4
 2162 00ca 0D4C     		ldr	r4, .L206+12
 2163 00cc 2170     		strb	r1, [r4]
 2164 00ce B6E7     		b	.L196
 2165              	.L197:
 554:Src/6502.c    ****     overflowcalc(result, a, value);
 2166              		.loc 1 554 0 discriminator 2
 2167 00d0 0B4C     		ldr	r4, .L206+12
 2168 00d2 2178     		ldrb	r1, [r4]
 2169 00d4 0225     		movs	r5, #2
 2170 00d6 2943     		orrs	r1, r5
 2171 00d8 2170     		strb	r1, [r4]
 2172 00da B8E7     		b	.L198
 2173              	.L199:
 555:Src/6502.c    ****     signcalc(result);
 2174              		.loc 1 555 0 discriminator 2
 2175 00dc 0848     		ldr	r0, .L206+12
 2176 00de 0178     		ldrb	r1, [r0]
 2177 00e0 4024     		movs	r4, #64
 2178 00e2 A143     		bics	r1, r4
 2179 00e4 0170     		strb	r1, [r0]
 2180 00e6 BDE7     		b	.L200
 2181              	.L201:
 556:Src/6502.c    **** 
 2182              		.loc 1 556 0 discriminator 2
 2183 00e8 0548     		ldr	r0, .L206+12
 2184 00ea 0478     		ldrb	r4, [r0]
 2185 00ec 7F21     		movs	r1, #127
 2186 00ee 2140     		ands	r1, r4
ARM GAS  /tmp/ccjHcktl.s 			page 51


 2187 00f0 0170     		strb	r1, [r0]
 2188 00f2 BFE7     		b	.L202
 2189              	.L207:
 2190              		.align	2
 2191              	.L206:
 2192 00f4 00000000 		.word	penaltyop
 2193 00f8 00000000 		.word	value
 2194 00fc 00000000 		.word	a
 2195 0100 00000000 		.word	status
 2196 0104 00000000 		.word	result
 2197 0108 00000000 		.word	.LANCHOR0
 2198              		.cfi_endproc
 2199              	.LFE99:
 2201              		.section	.text.isb,"ax",%progbits
 2202              		.align	1
 2203              		.syntax unified
 2204              		.code	16
 2205              		.thumb_func
 2206              		.fpu softvfp
 2208              	isb:
 2209              	.LFB115:
 654:Src/6502.c    **** 
 655:Src/6502.c    ****     static void dcp() {
 656:Src/6502.c    ****         dec();
 657:Src/6502.c    ****         cmp();
 658:Src/6502.c    ****         if (penaltyop && penaltyaddr) clockticks6502--;
 659:Src/6502.c    ****     }
 660:Src/6502.c    **** 
 661:Src/6502.c    ****     static void isb() {
 2210              		.loc 1 661 0
 2211              		.cfi_startproc
 2212              		@ args = 0, pretend = 0, frame = 0
 2213              		@ frame_needed = 0, uses_anonymous_args = 0
 2214 0000 70B5     		push	{r4, r5, r6, lr}
 2215              	.LCFI16:
 2216              		.cfi_def_cfa_offset 16
 2217              		.cfi_offset 4, -16
 2218              		.cfi_offset 5, -12
 2219              		.cfi_offset 6, -8
 2220              		.cfi_offset 14, -4
 662:Src/6502.c    ****         inc();
 2221              		.loc 1 662 0
 2222 0002 FFF7FEFF 		bl	inc
 2223              	.LVL14:
 663:Src/6502.c    ****         sbc();
 2224              		.loc 1 663 0
 2225 0006 FFF7FEFF 		bl	sbc
 2226              	.LVL15:
 664:Src/6502.c    ****         if (penaltyop && penaltyaddr) clockticks6502--;
 2227              		.loc 1 664 0
 2228 000a 094B     		ldr	r3, .L210
 2229 000c 1B78     		ldrb	r3, [r3]
 2230 000e 002B     		cmp	r3, #0
 2231 0010 0DD0     		beq	.L208
 2232              		.loc 1 664 0 is_stmt 0 discriminator 1
 2233 0012 084B     		ldr	r3, .L210+4
 2234 0014 1B78     		ldrb	r3, [r3]
ARM GAS  /tmp/ccjHcktl.s 			page 52


 2235 0016 002B     		cmp	r3, #0
 2236 0018 09D0     		beq	.L208
 2237              		.loc 1 664 0 discriminator 2
 2238 001a 0749     		ldr	r1, .L210+8
 2239 001c 0122     		movs	r2, #1
 2240 001e 5242     		rsbs	r2, r2, #0
 2241 0020 D317     		asrs	r3, r2, #31
 2242 0022 0C68     		ldr	r4, [r1]
 2243 0024 4D68     		ldr	r5, [r1, #4]
 2244 0026 1219     		adds	r2, r2, r4
 2245 0028 6B41     		adcs	r3, r3, r5
 2246 002a 0A60     		str	r2, [r1]
 2247 002c 4B60     		str	r3, [r1, #4]
 2248              	.L208:
 665:Src/6502.c    ****     }
 2249              		.loc 1 665 0 is_stmt 1
 2250              		@ sp needed
 2251 002e 70BD     		pop	{r4, r5, r6, pc}
 2252              	.L211:
 2253              		.align	2
 2254              	.L210:
 2255 0030 00000000 		.word	penaltyop
 2256 0034 00000000 		.word	penaltyaddr
 2257 0038 00000000 		.word	.LANCHOR0
 2258              		.cfi_endproc
 2259              	.LFE115:
 2261              		.section	.text.cpx,"ax",%progbits
 2262              		.align	1
 2263              		.syntax unified
 2264              		.code	16
 2265              		.thumb_func
 2266              		.fpu softvfp
 2268              	cpx:
 2269              	.LFB74:
 342:Src/6502.c    ****     value = getvalue();
 2270              		.loc 1 342 0
 2271              		.cfi_startproc
 2272              		@ args = 0, pretend = 0, frame = 0
 2273              		@ frame_needed = 0, uses_anonymous_args = 0
 2274 0000 70B5     		push	{r4, r5, r6, lr}
 2275              	.LCFI17:
 2276              		.cfi_def_cfa_offset 16
 2277              		.cfi_offset 4, -16
 2278              		.cfi_offset 5, -12
 2279              		.cfi_offset 6, -8
 2280              		.cfi_offset 14, -4
 343:Src/6502.c    ****     result = (uint16_t)x - value;
 2281              		.loc 1 343 0
 2282 0002 FFF7FEFF 		bl	getvalue
 2283              	.LVL16:
 2284 0006 194B     		ldr	r3, .L221
 2285 0008 1880     		strh	r0, [r3]
 344:Src/6502.c    ****    
 2286              		.loc 1 344 0
 2287 000a 194B     		ldr	r3, .L221+4
 2288 000c 1A78     		ldrb	r2, [r3]
 2289 000e 131A     		subs	r3, r2, r0
ARM GAS  /tmp/ccjHcktl.s 			page 53


 2290 0010 9BB2     		uxth	r3, r3
 2291 0012 1849     		ldr	r1, .L221+8
 2292 0014 0B80     		strh	r3, [r1]
 346:Src/6502.c    ****         else clearcarry();
 2293              		.loc 1 346 0
 2294 0016 C0B2     		uxtb	r0, r0
 2295 0018 8242     		cmp	r2, r0
 2296 001a 13D3     		bcc	.L213
 346:Src/6502.c    ****         else clearcarry();
 2297              		.loc 1 346 0 is_stmt 0 discriminator 1
 2298 001c 164C     		ldr	r4, .L221+12
 2299 001e 2178     		ldrb	r1, [r4]
 2300 0020 0125     		movs	r5, #1
 2301 0022 2943     		orrs	r1, r5
 2302 0024 2170     		strb	r1, [r4]
 2303              	.L214:
 348:Src/6502.c    ****         else clearzero();
 2304              		.loc 1 348 0 is_stmt 1
 2305 0026 8242     		cmp	r2, r0
 2306 0028 12D0     		beq	.L219
 349:Src/6502.c    ****     signcalc(result);
 2307              		.loc 1 349 0
 2308 002a 1349     		ldr	r1, .L221+12
 2309 002c 0A78     		ldrb	r2, [r1]
 2310 002e 0220     		movs	r0, #2
 2311 0030 8243     		bics	r2, r0
 2312 0032 0A70     		strb	r2, [r1]
 2313              	.L216:
 350:Src/6502.c    **** }
 2314              		.loc 1 350 0
 2315 0034 1B06     		lsls	r3, r3, #24
 2316 0036 11D4     		bmi	.L220
 350:Src/6502.c    **** }
 2317              		.loc 1 350 0 is_stmt 0 discriminator 2
 2318 0038 0F4A     		ldr	r2, .L221+12
 2319 003a 1178     		ldrb	r1, [r2]
 2320 003c 7F23     		movs	r3, #127
 2321 003e 0B40     		ands	r3, r1
 2322 0040 1370     		strb	r3, [r2]
 2323              	.L212:
 351:Src/6502.c    **** 
 2324              		.loc 1 351 0 is_stmt 1
 2325              		@ sp needed
 2326 0042 70BD     		pop	{r4, r5, r6, pc}
 2327              	.L213:
 347:Src/6502.c    ****     if (x == (uint8_t)(value & 0x00FF)) setzero();
 2328              		.loc 1 347 0
 2329 0044 0C4C     		ldr	r4, .L221+12
 2330 0046 2178     		ldrb	r1, [r4]
 2331 0048 0125     		movs	r5, #1
 2332 004a A943     		bics	r1, r5
 2333 004c 2170     		strb	r1, [r4]
 2334 004e EAE7     		b	.L214
 2335              	.L219:
 348:Src/6502.c    ****         else clearzero();
 2336              		.loc 1 348 0 discriminator 1
 2337 0050 0949     		ldr	r1, .L221+12
ARM GAS  /tmp/ccjHcktl.s 			page 54


 2338 0052 0A78     		ldrb	r2, [r1]
 2339 0054 0220     		movs	r0, #2
 2340 0056 0243     		orrs	r2, r0
 2341 0058 0A70     		strb	r2, [r1]
 2342 005a EBE7     		b	.L216
 2343              	.L220:
 350:Src/6502.c    **** }
 2344              		.loc 1 350 0 discriminator 1
 2345 005c 064A     		ldr	r2, .L221+12
 2346 005e 1178     		ldrb	r1, [r2]
 2347 0060 8023     		movs	r3, #128
 2348 0062 5B42     		rsbs	r3, r3, #0
 2349 0064 0B43     		orrs	r3, r1
 2350 0066 1370     		strb	r3, [r2]
 2351 0068 EBE7     		b	.L212
 2352              	.L222:
 2353 006a C046     		.align	2
 2354              	.L221:
 2355 006c 00000000 		.word	value
 2356 0070 00000000 		.word	x
 2357 0074 00000000 		.word	result
 2358 0078 00000000 		.word	status
 2359              		.cfi_endproc
 2360              	.LFE74:
 2362              		.section	.text.dec,"ax",%progbits
 2363              		.align	1
 2364              		.syntax unified
 2365              		.code	16
 2366              		.thumb_func
 2367              		.fpu softvfp
 2369              	dec:
 2370              	.LFB76:
 364:Src/6502.c    ****     value = getvalue();
 2371              		.loc 1 364 0
 2372              		.cfi_startproc
 2373              		@ args = 0, pretend = 0, frame = 0
 2374              		@ frame_needed = 0, uses_anonymous_args = 0
 2375 0000 10B5     		push	{r4, lr}
 2376              	.LCFI18:
 2377              		.cfi_def_cfa_offset 8
 2378              		.cfi_offset 4, -8
 2379              		.cfi_offset 14, -4
 365:Src/6502.c    ****     result = value - 1;
 2380              		.loc 1 365 0
 2381 0002 FFF7FEFF 		bl	getvalue
 2382              	.LVL17:
 2383 0006 124B     		ldr	r3, .L229
 2384 0008 1880     		strh	r0, [r3]
 366:Src/6502.c    ****    
 2385              		.loc 1 366 0
 2386 000a 0138     		subs	r0, r0, #1
 2387 000c 80B2     		uxth	r0, r0
 2388 000e 114B     		ldr	r3, .L229+4
 2389 0010 1880     		strh	r0, [r3]
 368:Src/6502.c    ****     signcalc(result);
 2390              		.loc 1 368 0
 2391 0012 FF23     		movs	r3, #255
ARM GAS  /tmp/ccjHcktl.s 			page 55


 2392 0014 0342     		tst	r3, r0
 2393 0016 0ED0     		beq	.L224
 368:Src/6502.c    ****     signcalc(result);
 2394              		.loc 1 368 0 is_stmt 0 discriminator 1
 2395 0018 0F4A     		ldr	r2, .L229+8
 2396 001a 1378     		ldrb	r3, [r2]
 2397 001c 0221     		movs	r1, #2
 2398 001e 8B43     		bics	r3, r1
 2399 0020 1370     		strb	r3, [r2]
 2400              	.L225:
 369:Src/6502.c    ****    
 2401              		.loc 1 369 0 is_stmt 1
 2402 0022 0306     		lsls	r3, r0, #24
 2403 0024 0DD4     		bmi	.L228
 369:Src/6502.c    ****    
 2404              		.loc 1 369 0 is_stmt 0 discriminator 2
 2405 0026 0C4A     		ldr	r2, .L229+8
 2406 0028 1178     		ldrb	r1, [r2]
 2407 002a 7F23     		movs	r3, #127
 2408 002c 0B40     		ands	r3, r1
 2409 002e 1370     		strb	r3, [r2]
 2410              	.L227:
 371:Src/6502.c    **** }
 2411              		.loc 1 371 0 is_stmt 1
 2412 0030 FFF7FEFF 		bl	putvalue
 2413              	.LVL18:
 372:Src/6502.c    **** 
 2414              		.loc 1 372 0
 2415              		@ sp needed
 2416 0034 10BD     		pop	{r4, pc}
 2417              	.L224:
 368:Src/6502.c    ****     signcalc(result);
 2418              		.loc 1 368 0 discriminator 2
 2419 0036 084A     		ldr	r2, .L229+8
 2420 0038 1378     		ldrb	r3, [r2]
 2421 003a 0221     		movs	r1, #2
 2422 003c 0B43     		orrs	r3, r1
 2423 003e 1370     		strb	r3, [r2]
 2424 0040 EFE7     		b	.L225
 2425              	.L228:
 369:Src/6502.c    ****    
 2426              		.loc 1 369 0 discriminator 1
 2427 0042 054A     		ldr	r2, .L229+8
 2428 0044 1178     		ldrb	r1, [r2]
 2429 0046 8023     		movs	r3, #128
 2430 0048 5B42     		rsbs	r3, r3, #0
 2431 004a 0B43     		orrs	r3, r1
 2432 004c 1370     		strb	r3, [r2]
 2433 004e EFE7     		b	.L227
 2434              	.L230:
 2435              		.align	2
 2436              	.L229:
 2437 0050 00000000 		.word	value
 2438 0054 00000000 		.word	result
 2439 0058 00000000 		.word	status
 2440              		.cfi_endproc
 2441              	.LFE76:
ARM GAS  /tmp/ccjHcktl.s 			page 56


 2443              		.section	.text.cmp,"ax",%progbits
 2444              		.align	1
 2445              		.syntax unified
 2446              		.code	16
 2447              		.thumb_func
 2448              		.fpu softvfp
 2450              	cmp:
 2451              	.LFB73:
 330:Src/6502.c    ****     penaltyop = 1;
 2452              		.loc 1 330 0
 2453              		.cfi_startproc
 2454              		@ args = 0, pretend = 0, frame = 0
 2455              		@ frame_needed = 0, uses_anonymous_args = 0
 2456 0000 70B5     		push	{r4, r5, r6, lr}
 2457              	.LCFI19:
 2458              		.cfi_def_cfa_offset 16
 2459              		.cfi_offset 4, -16
 2460              		.cfi_offset 5, -12
 2461              		.cfi_offset 6, -8
 2462              		.cfi_offset 14, -4
 331:Src/6502.c    ****     value = getvalue();
 2463              		.loc 1 331 0
 2464 0002 0122     		movs	r2, #1
 2465 0004 1A4B     		ldr	r3, .L240
 2466 0006 1A70     		strb	r2, [r3]
 332:Src/6502.c    ****     result = (uint16_t)a - value;
 2467              		.loc 1 332 0
 2468 0008 FFF7FEFF 		bl	getvalue
 2469              	.LVL19:
 2470 000c 194B     		ldr	r3, .L240+4
 2471 000e 1880     		strh	r0, [r3]
 333:Src/6502.c    ****    
 2472              		.loc 1 333 0
 2473 0010 194B     		ldr	r3, .L240+8
 2474 0012 1A78     		ldrb	r2, [r3]
 2475 0014 131A     		subs	r3, r2, r0
 2476 0016 9BB2     		uxth	r3, r3
 2477 0018 1849     		ldr	r1, .L240+12
 2478 001a 0B80     		strh	r3, [r1]
 335:Src/6502.c    ****         else clearcarry();
 2479              		.loc 1 335 0
 2480 001c C0B2     		uxtb	r0, r0
 2481 001e 8242     		cmp	r2, r0
 2482 0020 13D3     		bcc	.L232
 335:Src/6502.c    ****         else clearcarry();
 2483              		.loc 1 335 0 is_stmt 0 discriminator 1
 2484 0022 174C     		ldr	r4, .L240+16
 2485 0024 2178     		ldrb	r1, [r4]
 2486 0026 0125     		movs	r5, #1
 2487 0028 2943     		orrs	r1, r5
 2488 002a 2170     		strb	r1, [r4]
 2489              	.L233:
 337:Src/6502.c    ****         else clearzero();
 2490              		.loc 1 337 0 is_stmt 1
 2491 002c 8242     		cmp	r2, r0
 2492 002e 12D0     		beq	.L238
 338:Src/6502.c    ****     signcalc(result);
ARM GAS  /tmp/ccjHcktl.s 			page 57


 2493              		.loc 1 338 0
 2494 0030 1349     		ldr	r1, .L240+16
 2495 0032 0A78     		ldrb	r2, [r1]
 2496 0034 0220     		movs	r0, #2
 2497 0036 8243     		bics	r2, r0
 2498 0038 0A70     		strb	r2, [r1]
 2499              	.L235:
 339:Src/6502.c    **** }
 2500              		.loc 1 339 0
 2501 003a 1B06     		lsls	r3, r3, #24
 2502 003c 11D4     		bmi	.L239
 339:Src/6502.c    **** }
 2503              		.loc 1 339 0 is_stmt 0 discriminator 2
 2504 003e 104A     		ldr	r2, .L240+16
 2505 0040 1178     		ldrb	r1, [r2]
 2506 0042 7F23     		movs	r3, #127
 2507 0044 0B40     		ands	r3, r1
 2508 0046 1370     		strb	r3, [r2]
 2509              	.L231:
 340:Src/6502.c    **** 
 2510              		.loc 1 340 0 is_stmt 1
 2511              		@ sp needed
 2512 0048 70BD     		pop	{r4, r5, r6, pc}
 2513              	.L232:
 336:Src/6502.c    ****     if (a == (uint8_t)(value & 0x00FF)) setzero();
 2514              		.loc 1 336 0
 2515 004a 0D4C     		ldr	r4, .L240+16
 2516 004c 2178     		ldrb	r1, [r4]
 2517 004e 0125     		movs	r5, #1
 2518 0050 A943     		bics	r1, r5
 2519 0052 2170     		strb	r1, [r4]
 2520 0054 EAE7     		b	.L233
 2521              	.L238:
 337:Src/6502.c    ****         else clearzero();
 2522              		.loc 1 337 0 discriminator 1
 2523 0056 0A49     		ldr	r1, .L240+16
 2524 0058 0A78     		ldrb	r2, [r1]
 2525 005a 0220     		movs	r0, #2
 2526 005c 0243     		orrs	r2, r0
 2527 005e 0A70     		strb	r2, [r1]
 2528 0060 EBE7     		b	.L235
 2529              	.L239:
 339:Src/6502.c    **** }
 2530              		.loc 1 339 0 discriminator 1
 2531 0062 074A     		ldr	r2, .L240+16
 2532 0064 1178     		ldrb	r1, [r2]
 2533 0066 8023     		movs	r3, #128
 2534 0068 5B42     		rsbs	r3, r3, #0
 2535 006a 0B43     		orrs	r3, r1
 2536 006c 1370     		strb	r3, [r2]
 2537 006e EBE7     		b	.L231
 2538              	.L241:
 2539              		.align	2
 2540              	.L240:
 2541 0070 00000000 		.word	penaltyop
 2542 0074 00000000 		.word	value
 2543 0078 00000000 		.word	a
ARM GAS  /tmp/ccjHcktl.s 			page 58


 2544 007c 00000000 		.word	result
 2545 0080 00000000 		.word	status
 2546              		.cfi_endproc
 2547              	.LFE73:
 2549              		.section	.text.dcp,"ax",%progbits
 2550              		.align	1
 2551              		.syntax unified
 2552              		.code	16
 2553              		.thumb_func
 2554              		.fpu softvfp
 2556              	dcp:
 2557              	.LFB114:
 655:Src/6502.c    ****         dec();
 2558              		.loc 1 655 0
 2559              		.cfi_startproc
 2560              		@ args = 0, pretend = 0, frame = 0
 2561              		@ frame_needed = 0, uses_anonymous_args = 0
 2562 0000 70B5     		push	{r4, r5, r6, lr}
 2563              	.LCFI20:
 2564              		.cfi_def_cfa_offset 16
 2565              		.cfi_offset 4, -16
 2566              		.cfi_offset 5, -12
 2567              		.cfi_offset 6, -8
 2568              		.cfi_offset 14, -4
 656:Src/6502.c    ****         cmp();
 2569              		.loc 1 656 0
 2570 0002 FFF7FEFF 		bl	dec
 2571              	.LVL20:
 657:Src/6502.c    ****         if (penaltyop && penaltyaddr) clockticks6502--;
 2572              		.loc 1 657 0
 2573 0006 FFF7FEFF 		bl	cmp
 2574              	.LVL21:
 658:Src/6502.c    ****     }
 2575              		.loc 1 658 0
 2576 000a 094B     		ldr	r3, .L244
 2577 000c 1B78     		ldrb	r3, [r3]
 2578 000e 002B     		cmp	r3, #0
 2579 0010 0DD0     		beq	.L242
 658:Src/6502.c    ****     }
 2580              		.loc 1 658 0 is_stmt 0 discriminator 1
 2581 0012 084B     		ldr	r3, .L244+4
 2582 0014 1B78     		ldrb	r3, [r3]
 2583 0016 002B     		cmp	r3, #0
 2584 0018 09D0     		beq	.L242
 658:Src/6502.c    ****     }
 2585              		.loc 1 658 0 discriminator 2
 2586 001a 0749     		ldr	r1, .L244+8
 2587 001c 0122     		movs	r2, #1
 2588 001e 5242     		rsbs	r2, r2, #0
 2589 0020 D317     		asrs	r3, r2, #31
 2590 0022 0C68     		ldr	r4, [r1]
 2591 0024 4D68     		ldr	r5, [r1, #4]
 2592 0026 1219     		adds	r2, r2, r4
 2593 0028 6B41     		adcs	r3, r3, r5
 2594 002a 0A60     		str	r2, [r1]
 2595 002c 4B60     		str	r3, [r1, #4]
 2596              	.L242:
ARM GAS  /tmp/ccjHcktl.s 			page 59


 659:Src/6502.c    **** 
 2597              		.loc 1 659 0 is_stmt 1
 2598              		@ sp needed
 2599 002e 70BD     		pop	{r4, r5, r6, pc}
 2600              	.L245:
 2601              		.align	2
 2602              	.L244:
 2603 0030 00000000 		.word	penaltyop
 2604 0034 00000000 		.word	penaltyaddr
 2605 0038 00000000 		.word	.LANCHOR0
 2606              		.cfi_endproc
 2607              	.LFE114:
 2609              		.section	.text.cpy,"ax",%progbits
 2610              		.align	1
 2611              		.syntax unified
 2612              		.code	16
 2613              		.thumb_func
 2614              		.fpu softvfp
 2616              	cpy:
 2617              	.LFB75:
 353:Src/6502.c    ****     value = getvalue();
 2618              		.loc 1 353 0
 2619              		.cfi_startproc
 2620              		@ args = 0, pretend = 0, frame = 0
 2621              		@ frame_needed = 0, uses_anonymous_args = 0
 2622 0000 70B5     		push	{r4, r5, r6, lr}
 2623              	.LCFI21:
 2624              		.cfi_def_cfa_offset 16
 2625              		.cfi_offset 4, -16
 2626              		.cfi_offset 5, -12
 2627              		.cfi_offset 6, -8
 2628              		.cfi_offset 14, -4
 354:Src/6502.c    ****     result = (uint16_t)y - value;
 2629              		.loc 1 354 0
 2630 0002 FFF7FEFF 		bl	getvalue
 2631              	.LVL22:
 2632 0006 194B     		ldr	r3, .L255
 2633 0008 1880     		strh	r0, [r3]
 355:Src/6502.c    ****    
 2634              		.loc 1 355 0
 2635 000a 194B     		ldr	r3, .L255+4
 2636 000c 1A78     		ldrb	r2, [r3]
 2637 000e 131A     		subs	r3, r2, r0
 2638 0010 9BB2     		uxth	r3, r3
 2639 0012 1849     		ldr	r1, .L255+8
 2640 0014 0B80     		strh	r3, [r1]
 357:Src/6502.c    ****         else clearcarry();
 2641              		.loc 1 357 0
 2642 0016 C0B2     		uxtb	r0, r0
 2643 0018 8242     		cmp	r2, r0
 2644 001a 13D3     		bcc	.L247
 357:Src/6502.c    ****         else clearcarry();
 2645              		.loc 1 357 0 is_stmt 0 discriminator 1
 2646 001c 164C     		ldr	r4, .L255+12
 2647 001e 2178     		ldrb	r1, [r4]
 2648 0020 0125     		movs	r5, #1
 2649 0022 2943     		orrs	r1, r5
ARM GAS  /tmp/ccjHcktl.s 			page 60


 2650 0024 2170     		strb	r1, [r4]
 2651              	.L248:
 359:Src/6502.c    ****         else clearzero();
 2652              		.loc 1 359 0 is_stmt 1
 2653 0026 8242     		cmp	r2, r0
 2654 0028 12D0     		beq	.L253
 360:Src/6502.c    ****     signcalc(result);
 2655              		.loc 1 360 0
 2656 002a 1349     		ldr	r1, .L255+12
 2657 002c 0A78     		ldrb	r2, [r1]
 2658 002e 0220     		movs	r0, #2
 2659 0030 8243     		bics	r2, r0
 2660 0032 0A70     		strb	r2, [r1]
 2661              	.L250:
 361:Src/6502.c    **** }
 2662              		.loc 1 361 0
 2663 0034 1B06     		lsls	r3, r3, #24
 2664 0036 11D4     		bmi	.L254
 361:Src/6502.c    **** }
 2665              		.loc 1 361 0 is_stmt 0 discriminator 2
 2666 0038 0F4A     		ldr	r2, .L255+12
 2667 003a 1178     		ldrb	r1, [r2]
 2668 003c 7F23     		movs	r3, #127
 2669 003e 0B40     		ands	r3, r1
 2670 0040 1370     		strb	r3, [r2]
 2671              	.L246:
 362:Src/6502.c    **** 
 2672              		.loc 1 362 0 is_stmt 1
 2673              		@ sp needed
 2674 0042 70BD     		pop	{r4, r5, r6, pc}
 2675              	.L247:
 358:Src/6502.c    ****     if (y == (uint8_t)(value & 0x00FF)) setzero();
 2676              		.loc 1 358 0
 2677 0044 0C4C     		ldr	r4, .L255+12
 2678 0046 2178     		ldrb	r1, [r4]
 2679 0048 0125     		movs	r5, #1
 2680 004a A943     		bics	r1, r5
 2681 004c 2170     		strb	r1, [r4]
 2682 004e EAE7     		b	.L248
 2683              	.L253:
 359:Src/6502.c    ****         else clearzero();
 2684              		.loc 1 359 0 discriminator 1
 2685 0050 0949     		ldr	r1, .L255+12
 2686 0052 0A78     		ldrb	r2, [r1]
 2687 0054 0220     		movs	r0, #2
 2688 0056 0243     		orrs	r2, r0
 2689 0058 0A70     		strb	r2, [r1]
 2690 005a EBE7     		b	.L250
 2691              	.L254:
 361:Src/6502.c    **** }
 2692              		.loc 1 361 0 discriminator 1
 2693 005c 064A     		ldr	r2, .L255+12
 2694 005e 1178     		ldrb	r1, [r2]
 2695 0060 8023     		movs	r3, #128
 2696 0062 5B42     		rsbs	r3, r3, #0
 2697 0064 0B43     		orrs	r3, r1
 2698 0066 1370     		strb	r3, [r2]
ARM GAS  /tmp/ccjHcktl.s 			page 61


 2699 0068 EBE7     		b	.L246
 2700              	.L256:
 2701 006a C046     		.align	2
 2702              	.L255:
 2703 006c 00000000 		.word	value
 2704 0070 00000000 		.word	y
 2705 0074 00000000 		.word	result
 2706 0078 00000000 		.word	status
 2707              		.cfi_endproc
 2708              	.LFE75:
 2710              		.section	.text.ldx,"ax",%progbits
 2711              		.align	1
 2712              		.syntax unified
 2713              		.code	16
 2714              		.thumb_func
 2715              		.fpu softvfp
 2717              	ldx:
 2718              	.LFB86:
 441:Src/6502.c    ****     penaltyop = 1;
 2719              		.loc 1 441 0
 2720              		.cfi_startproc
 2721              		@ args = 0, pretend = 0, frame = 0
 2722              		@ frame_needed = 0, uses_anonymous_args = 0
 2723 0000 10B5     		push	{r4, lr}
 2724              	.LCFI22:
 2725              		.cfi_def_cfa_offset 8
 2726              		.cfi_offset 4, -8
 2727              		.cfi_offset 14, -4
 442:Src/6502.c    ****     value = getvalue();
 2728              		.loc 1 442 0
 2729 0002 0122     		movs	r2, #1
 2730 0004 124B     		ldr	r3, .L263
 2731 0006 1A70     		strb	r2, [r3]
 443:Src/6502.c    ****     x = (uint8_t)(value & 0x00FF);
 2732              		.loc 1 443 0
 2733 0008 FFF7FEFF 		bl	getvalue
 2734              	.LVL23:
 2735 000c 114B     		ldr	r3, .L263+4
 2736 000e 1880     		strh	r0, [r3]
 444:Src/6502.c    ****    
 2737              		.loc 1 444 0
 2738 0010 C0B2     		uxtb	r0, r0
 2739 0012 114B     		ldr	r3, .L263+8
 2740 0014 1870     		strb	r0, [r3]
 446:Src/6502.c    ****     signcalc(x);
 2741              		.loc 1 446 0
 2742 0016 0028     		cmp	r0, #0
 2743 0018 0DD0     		beq	.L258
 446:Src/6502.c    ****     signcalc(x);
 2744              		.loc 1 446 0 is_stmt 0 discriminator 1
 2745 001a 104A     		ldr	r2, .L263+12
 2746 001c 1378     		ldrb	r3, [r2]
 2747 001e 0221     		movs	r1, #2
 2748 0020 8B43     		bics	r3, r1
 2749 0022 1370     		strb	r3, [r2]
 2750              	.L259:
 447:Src/6502.c    **** }
ARM GAS  /tmp/ccjHcktl.s 			page 62


 2751              		.loc 1 447 0 is_stmt 1
 2752 0024 40B2     		sxtb	r0, r0
 2753 0026 0028     		cmp	r0, #0
 2754 0028 0BDB     		blt	.L262
 447:Src/6502.c    **** }
 2755              		.loc 1 447 0 is_stmt 0 discriminator 2
 2756 002a 0C4A     		ldr	r2, .L263+12
 2757 002c 1178     		ldrb	r1, [r2]
 2758 002e 7F23     		movs	r3, #127
 2759 0030 0B40     		ands	r3, r1
 2760 0032 1370     		strb	r3, [r2]
 2761              	.L257:
 448:Src/6502.c    **** 
 2762              		.loc 1 448 0 is_stmt 1
 2763              		@ sp needed
 2764 0034 10BD     		pop	{r4, pc}
 2765              	.L258:
 446:Src/6502.c    ****     signcalc(x);
 2766              		.loc 1 446 0 discriminator 2
 2767 0036 094A     		ldr	r2, .L263+12
 2768 0038 1378     		ldrb	r3, [r2]
 2769 003a 0221     		movs	r1, #2
 2770 003c 0B43     		orrs	r3, r1
 2771 003e 1370     		strb	r3, [r2]
 2772 0040 F0E7     		b	.L259
 2773              	.L262:
 447:Src/6502.c    **** }
 2774              		.loc 1 447 0 discriminator 1
 2775 0042 064A     		ldr	r2, .L263+12
 2776 0044 1178     		ldrb	r1, [r2]
 2777 0046 8023     		movs	r3, #128
 2778 0048 5B42     		rsbs	r3, r3, #0
 2779 004a 0B43     		orrs	r3, r1
 2780 004c 1370     		strb	r3, [r2]
 2781 004e F1E7     		b	.L257
 2782              	.L264:
 2783              		.align	2
 2784              	.L263:
 2785 0050 00000000 		.word	penaltyop
 2786 0054 00000000 		.word	value
 2787 0058 00000000 		.word	x
 2788 005c 00000000 		.word	status
 2789              		.cfi_endproc
 2790              	.LFE86:
 2792              		.section	.text.lda,"ax",%progbits
 2793              		.align	1
 2794              		.syntax unified
 2795              		.code	16
 2796              		.thumb_func
 2797              		.fpu softvfp
 2799              	lda:
 2800              	.LFB85:
 432:Src/6502.c    ****     penaltyop = 1;
 2801              		.loc 1 432 0
 2802              		.cfi_startproc
 2803              		@ args = 0, pretend = 0, frame = 0
 2804              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccjHcktl.s 			page 63


 2805 0000 10B5     		push	{r4, lr}
 2806              	.LCFI23:
 2807              		.cfi_def_cfa_offset 8
 2808              		.cfi_offset 4, -8
 2809              		.cfi_offset 14, -4
 433:Src/6502.c    ****     value = getvalue();
 2810              		.loc 1 433 0
 2811 0002 0122     		movs	r2, #1
 2812 0004 124B     		ldr	r3, .L271
 2813 0006 1A70     		strb	r2, [r3]
 434:Src/6502.c    ****     a = (uint8_t)(value & 0x00FF);
 2814              		.loc 1 434 0
 2815 0008 FFF7FEFF 		bl	getvalue
 2816              	.LVL24:
 2817 000c 114B     		ldr	r3, .L271+4
 2818 000e 1880     		strh	r0, [r3]
 435:Src/6502.c    ****    
 2819              		.loc 1 435 0
 2820 0010 C0B2     		uxtb	r0, r0
 2821 0012 114B     		ldr	r3, .L271+8
 2822 0014 1870     		strb	r0, [r3]
 437:Src/6502.c    ****     signcalc(a);
 2823              		.loc 1 437 0
 2824 0016 0028     		cmp	r0, #0
 2825 0018 0DD0     		beq	.L266
 437:Src/6502.c    ****     signcalc(a);
 2826              		.loc 1 437 0 is_stmt 0 discriminator 1
 2827 001a 104A     		ldr	r2, .L271+12
 2828 001c 1378     		ldrb	r3, [r2]
 2829 001e 0221     		movs	r1, #2
 2830 0020 8B43     		bics	r3, r1
 2831 0022 1370     		strb	r3, [r2]
 2832              	.L267:
 438:Src/6502.c    **** }
 2833              		.loc 1 438 0 is_stmt 1
 2834 0024 40B2     		sxtb	r0, r0
 2835 0026 0028     		cmp	r0, #0
 2836 0028 0BDB     		blt	.L270
 438:Src/6502.c    **** }
 2837              		.loc 1 438 0 is_stmt 0 discriminator 2
 2838 002a 0C4A     		ldr	r2, .L271+12
 2839 002c 1178     		ldrb	r1, [r2]
 2840 002e 7F23     		movs	r3, #127
 2841 0030 0B40     		ands	r3, r1
 2842 0032 1370     		strb	r3, [r2]
 2843              	.L265:
 439:Src/6502.c    **** 
 2844              		.loc 1 439 0 is_stmt 1
 2845              		@ sp needed
 2846 0034 10BD     		pop	{r4, pc}
 2847              	.L266:
 437:Src/6502.c    ****     signcalc(a);
 2848              		.loc 1 437 0 discriminator 2
 2849 0036 094A     		ldr	r2, .L271+12
 2850 0038 1378     		ldrb	r3, [r2]
 2851 003a 0221     		movs	r1, #2
 2852 003c 0B43     		orrs	r3, r1
ARM GAS  /tmp/ccjHcktl.s 			page 64


 2853 003e 1370     		strb	r3, [r2]
 2854 0040 F0E7     		b	.L267
 2855              	.L270:
 438:Src/6502.c    **** }
 2856              		.loc 1 438 0 discriminator 1
 2857 0042 064A     		ldr	r2, .L271+12
 2858 0044 1178     		ldrb	r1, [r2]
 2859 0046 8023     		movs	r3, #128
 2860 0048 5B42     		rsbs	r3, r3, #0
 2861 004a 0B43     		orrs	r3, r1
 2862 004c 1370     		strb	r3, [r2]
 2863 004e F1E7     		b	.L265
 2864              	.L272:
 2865              		.align	2
 2866              	.L271:
 2867 0050 00000000 		.word	penaltyop
 2868 0054 00000000 		.word	value
 2869 0058 00000000 		.word	a
 2870 005c 00000000 		.word	status
 2871              		.cfi_endproc
 2872              	.LFE85:
 2874              		.section	.text.lax,"ax",%progbits
 2875              		.align	1
 2876              		.syntax unified
 2877              		.code	16
 2878              		.thumb_func
 2879              		.fpu softvfp
 2881              	lax:
 2882              	.LFB112:
 643:Src/6502.c    ****         lda();
 2883              		.loc 1 643 0
 2884              		.cfi_startproc
 2885              		@ args = 0, pretend = 0, frame = 0
 2886              		@ frame_needed = 0, uses_anonymous_args = 0
 2887 0000 10B5     		push	{r4, lr}
 2888              	.LCFI24:
 2889              		.cfi_def_cfa_offset 8
 2890              		.cfi_offset 4, -8
 2891              		.cfi_offset 14, -4
 644:Src/6502.c    ****         ldx();
 2892              		.loc 1 644 0
 2893 0002 FFF7FEFF 		bl	lda
 2894              	.LVL25:
 645:Src/6502.c    ****     }
 2895              		.loc 1 645 0
 2896 0006 FFF7FEFF 		bl	ldx
 2897              	.LVL26:
 646:Src/6502.c    **** 
 2898              		.loc 1 646 0
 2899              		@ sp needed
 2900 000a 10BD     		pop	{r4, pc}
 2901              		.cfi_endproc
 2902              	.LFE112:
 2904              		.section	.text.ldy,"ax",%progbits
 2905              		.align	1
 2906              		.syntax unified
 2907              		.code	16
ARM GAS  /tmp/ccjHcktl.s 			page 65


 2908              		.thumb_func
 2909              		.fpu softvfp
 2911              	ldy:
 2912              	.LFB87:
 450:Src/6502.c    ****     penaltyop = 1;
 2913              		.loc 1 450 0
 2914              		.cfi_startproc
 2915              		@ args = 0, pretend = 0, frame = 0
 2916              		@ frame_needed = 0, uses_anonymous_args = 0
 2917 0000 10B5     		push	{r4, lr}
 2918              	.LCFI25:
 2919              		.cfi_def_cfa_offset 8
 2920              		.cfi_offset 4, -8
 2921              		.cfi_offset 14, -4
 451:Src/6502.c    ****     value = getvalue();
 2922              		.loc 1 451 0
 2923 0002 0122     		movs	r2, #1
 2924 0004 124B     		ldr	r3, .L280
 2925 0006 1A70     		strb	r2, [r3]
 452:Src/6502.c    ****     y = (uint8_t)(value & 0x00FF);
 2926              		.loc 1 452 0
 2927 0008 FFF7FEFF 		bl	getvalue
 2928              	.LVL27:
 2929 000c 114B     		ldr	r3, .L280+4
 2930 000e 1880     		strh	r0, [r3]
 453:Src/6502.c    ****    
 2931              		.loc 1 453 0
 2932 0010 C0B2     		uxtb	r0, r0
 2933 0012 114B     		ldr	r3, .L280+8
 2934 0014 1870     		strb	r0, [r3]
 455:Src/6502.c    ****     signcalc(y);
 2935              		.loc 1 455 0
 2936 0016 0028     		cmp	r0, #0
 2937 0018 0DD0     		beq	.L275
 455:Src/6502.c    ****     signcalc(y);
 2938              		.loc 1 455 0 is_stmt 0 discriminator 1
 2939 001a 104A     		ldr	r2, .L280+12
 2940 001c 1378     		ldrb	r3, [r2]
 2941 001e 0221     		movs	r1, #2
 2942 0020 8B43     		bics	r3, r1
 2943 0022 1370     		strb	r3, [r2]
 2944              	.L276:
 456:Src/6502.c    **** }
 2945              		.loc 1 456 0 is_stmt 1
 2946 0024 40B2     		sxtb	r0, r0
 2947 0026 0028     		cmp	r0, #0
 2948 0028 0BDB     		blt	.L279
 456:Src/6502.c    **** }
 2949              		.loc 1 456 0 is_stmt 0 discriminator 2
 2950 002a 0C4A     		ldr	r2, .L280+12
 2951 002c 1178     		ldrb	r1, [r2]
 2952 002e 7F23     		movs	r3, #127
 2953 0030 0B40     		ands	r3, r1
 2954 0032 1370     		strb	r3, [r2]
 2955              	.L274:
 457:Src/6502.c    **** 
 2956              		.loc 1 457 0 is_stmt 1
ARM GAS  /tmp/ccjHcktl.s 			page 66


 2957              		@ sp needed
 2958 0034 10BD     		pop	{r4, pc}
 2959              	.L275:
 455:Src/6502.c    ****     signcalc(y);
 2960              		.loc 1 455 0 discriminator 2
 2961 0036 094A     		ldr	r2, .L280+12
 2962 0038 1378     		ldrb	r3, [r2]
 2963 003a 0221     		movs	r1, #2
 2964 003c 0B43     		orrs	r3, r1
 2965 003e 1370     		strb	r3, [r2]
 2966 0040 F0E7     		b	.L276
 2967              	.L279:
 456:Src/6502.c    **** }
 2968              		.loc 1 456 0 discriminator 1
 2969 0042 064A     		ldr	r2, .L280+12
 2970 0044 1178     		ldrb	r1, [r2]
 2971 0046 8023     		movs	r3, #128
 2972 0048 5B42     		rsbs	r3, r3, #0
 2973 004a 0B43     		orrs	r3, r1
 2974 004c 1370     		strb	r3, [r2]
 2975 004e F1E7     		b	.L274
 2976              	.L281:
 2977              		.align	2
 2978              	.L280:
 2979 0050 00000000 		.word	penaltyop
 2980 0054 00000000 		.word	value
 2981 0058 00000000 		.word	y
 2982 005c 00000000 		.word	status
 2983              		.cfi_endproc
 2984              	.LFE87:
 2986              		.section	.text.ror,"ax",%progbits
 2987              		.align	1
 2988              		.syntax unified
 2989              		.code	16
 2990              		.thumb_func
 2991              		.fpu softvfp
 2993              	ror:
 2994              	.LFB96:
 525:Src/6502.c    ****     value = getvalue();
 2995              		.loc 1 525 0
 2996              		.cfi_startproc
 2997              		@ args = 0, pretend = 0, frame = 0
 2998              		@ frame_needed = 0, uses_anonymous_args = 0
 2999 0000 10B5     		push	{r4, lr}
 3000              	.LCFI26:
 3001              		.cfi_def_cfa_offset 8
 3002              		.cfi_offset 4, -8
 3003              		.cfi_offset 14, -4
 526:Src/6502.c    ****     result = (value >> 1) | ((status & FLAG_CARRY) << 7);
 3004              		.loc 1 526 0
 3005 0002 FFF7FEFF 		bl	getvalue
 3006              	.LVL28:
 3007 0006 0200     		movs	r2, r0
 3008 0008 1A4B     		ldr	r3, .L290
 3009 000a 1880     		strh	r0, [r3]
 527:Src/6502.c    ****    
 3010              		.loc 1 527 0
ARM GAS  /tmp/ccjHcktl.s 			page 67


 3011 000c 1A4B     		ldr	r3, .L290+4
 3012 000e 1B78     		ldrb	r3, [r3]
 3013 0010 D901     		lsls	r1, r3, #7
 3014 0012 FF20     		movs	r0, #255
 3015 0014 0840     		ands	r0, r1
 3016 0016 5108     		lsrs	r1, r2, #1
 3017 0018 0843     		orrs	r0, r1
 3018 001a 1849     		ldr	r1, .L290+8
 3019 001c 0880     		strh	r0, [r1]
 529:Src/6502.c    ****         else clearcarry();
 3020              		.loc 1 529 0
 3021 001e D207     		lsls	r2, r2, #31
 3022 0020 15D5     		bpl	.L283
 529:Src/6502.c    ****         else clearcarry();
 3023              		.loc 1 529 0 is_stmt 0 discriminator 1
 3024 0022 0122     		movs	r2, #1
 3025 0024 1343     		orrs	r3, r2
 3026 0026 144A     		ldr	r2, .L290+4
 3027 0028 1370     		strb	r3, [r2]
 3028              	.L284:
 531:Src/6502.c    ****     signcalc(result);
 3029              		.loc 1 531 0 is_stmt 1
 3030 002a FF23     		movs	r3, #255
 3031 002c 0342     		tst	r3, r0
 3032 002e 13D0     		beq	.L285
 531:Src/6502.c    ****     signcalc(result);
 3033              		.loc 1 531 0 is_stmt 0 discriminator 1
 3034 0030 114A     		ldr	r2, .L290+4
 3035 0032 1378     		ldrb	r3, [r2]
 3036 0034 0221     		movs	r1, #2
 3037 0036 8B43     		bics	r3, r1
 3038 0038 1370     		strb	r3, [r2]
 3039              	.L286:
 532:Src/6502.c    ****    
 3040              		.loc 1 532 0 is_stmt 1
 3041 003a 0306     		lsls	r3, r0, #24
 3042 003c 12D4     		bmi	.L289
 532:Src/6502.c    ****    
 3043              		.loc 1 532 0 is_stmt 0 discriminator 2
 3044 003e 0E4A     		ldr	r2, .L290+4
 3045 0040 1178     		ldrb	r1, [r2]
 3046 0042 7F23     		movs	r3, #127
 3047 0044 0B40     		ands	r3, r1
 3048 0046 1370     		strb	r3, [r2]
 3049              	.L288:
 534:Src/6502.c    **** }
 3050              		.loc 1 534 0 is_stmt 1
 3051 0048 FFF7FEFF 		bl	putvalue
 3052              	.LVL29:
 535:Src/6502.c    **** 
 3053              		.loc 1 535 0
 3054              		@ sp needed
 3055 004c 10BD     		pop	{r4, pc}
 3056              	.L283:
 530:Src/6502.c    ****     zerocalc(result);
 3057              		.loc 1 530 0
 3058 004e 0122     		movs	r2, #1
ARM GAS  /tmp/ccjHcktl.s 			page 68


 3059 0050 9343     		bics	r3, r2
 3060 0052 094A     		ldr	r2, .L290+4
 3061 0054 1370     		strb	r3, [r2]
 3062 0056 E8E7     		b	.L284
 3063              	.L285:
 531:Src/6502.c    ****     signcalc(result);
 3064              		.loc 1 531 0 discriminator 2
 3065 0058 074A     		ldr	r2, .L290+4
 3066 005a 1378     		ldrb	r3, [r2]
 3067 005c 0221     		movs	r1, #2
 3068 005e 0B43     		orrs	r3, r1
 3069 0060 1370     		strb	r3, [r2]
 3070 0062 EAE7     		b	.L286
 3071              	.L289:
 532:Src/6502.c    ****    
 3072              		.loc 1 532 0 discriminator 1
 3073 0064 044A     		ldr	r2, .L290+4
 3074 0066 1178     		ldrb	r1, [r2]
 3075 0068 8023     		movs	r3, #128
 3076 006a 5B42     		rsbs	r3, r3, #0
 3077 006c 0B43     		orrs	r3, r1
 3078 006e 1370     		strb	r3, [r2]
 3079 0070 EAE7     		b	.L288
 3080              	.L291:
 3081 0072 C046     		.align	2
 3082              	.L290:
 3083 0074 00000000 		.word	value
 3084 0078 00000000 		.word	status
 3085 007c 00000000 		.word	result
 3086              		.cfi_endproc
 3087              	.LFE96:
 3089              		.section	.text.adc,"ax",%progbits
 3090              		.align	1
 3091              		.syntax unified
 3092              		.code	16
 3093              		.thumb_func
 3094              		.fpu softvfp
 3096              	adc:
 3097              	.LFB56:
 175:Src/6502.c    ****     penaltyop = 1;
 3098              		.loc 1 175 0
 3099              		.cfi_startproc
 3100              		@ args = 0, pretend = 0, frame = 0
 3101              		@ frame_needed = 0, uses_anonymous_args = 0
 3102 0000 70B5     		push	{r4, r5, r6, lr}
 3103              	.LCFI27:
 3104              		.cfi_def_cfa_offset 16
 3105              		.cfi_offset 4, -16
 3106              		.cfi_offset 5, -12
 3107              		.cfi_offset 6, -8
 3108              		.cfi_offset 14, -4
 176:Src/6502.c    ****     value = getvalue();
 3109              		.loc 1 176 0
 3110 0002 0122     		movs	r2, #1
 3111 0004 384B     		ldr	r3, .L304
 3112 0006 1A70     		strb	r2, [r3]
 177:Src/6502.c    ****     result = (uint16_t)a + value + (uint16_t)(status & FLAG_CARRY);
ARM GAS  /tmp/ccjHcktl.s 			page 69


 3113              		.loc 1 177 0
 3114 0008 FFF7FEFF 		bl	getvalue
 3115              	.LVL30:
 3116 000c 374B     		ldr	r3, .L304+4
 3117 000e 1880     		strh	r0, [r3]
 178:Src/6502.c    ****    
 3118              		.loc 1 178 0
 3119 0010 374B     		ldr	r3, .L304+8
 3120 0012 1978     		ldrb	r1, [r3]
 3121 0014 4318     		adds	r3, r0, r1
 3122 0016 9BB2     		uxth	r3, r3
 3123 0018 364A     		ldr	r2, .L304+12
 3124 001a 1278     		ldrb	r2, [r2]
 3125 001c 0124     		movs	r4, #1
 3126 001e 1440     		ands	r4, r2
 3127 0020 1B19     		adds	r3, r3, r4
 3128 0022 9BB2     		uxth	r3, r3
 3129 0024 344C     		ldr	r4, .L304+16
 3130 0026 2380     		strh	r3, [r4]
 180:Src/6502.c    ****     zerocalc(result);
 3131              		.loc 1 180 0
 3132 0028 FF24     		movs	r4, #255
 3133 002a 1D00     		movs	r5, r3
 3134 002c A543     		bics	r5, r4
 3135 002e 43D0     		beq	.L293
 180:Src/6502.c    ****     zerocalc(result);
 3136              		.loc 1 180 0 is_stmt 0 discriminator 1
 3137 0030 0124     		movs	r4, #1
 3138 0032 2243     		orrs	r2, r4
 3139 0034 2F4C     		ldr	r4, .L304+12
 3140 0036 2270     		strb	r2, [r4]
 3141              	.L294:
 181:Src/6502.c    ****     overflowcalc(result, a, value);
 3142              		.loc 1 181 0 is_stmt 1
 3143 0038 FF22     		movs	r2, #255
 3144 003a 1A42     		tst	r2, r3
 3145 003c 41D0     		beq	.L295
 181:Src/6502.c    ****     overflowcalc(result, a, value);
 3146              		.loc 1 181 0 is_stmt 0 discriminator 1
 3147 003e 2D4C     		ldr	r4, .L304+12
 3148 0040 2278     		ldrb	r2, [r4]
 3149 0042 0225     		movs	r5, #2
 3150 0044 AA43     		bics	r2, r5
 3151 0046 2270     		strb	r2, [r4]
 3152              	.L296:
 182:Src/6502.c    ****     signcalc(result);
 3153              		.loc 1 182 0 is_stmt 1
 3154 0048 5840     		eors	r0, r3
 3155 004a 1A00     		movs	r2, r3
 3156 004c 4A40     		eors	r2, r1
 3157 004e 1040     		ands	r0, r2
 3158 0050 0206     		lsls	r2, r0, #24
 3159 0052 3CD5     		bpl	.L297
 182:Src/6502.c    ****     signcalc(result);
 3160              		.loc 1 182 0 is_stmt 0 discriminator 1
 3161 0054 2748     		ldr	r0, .L304+12
 3162 0056 0278     		ldrb	r2, [r0]
ARM GAS  /tmp/ccjHcktl.s 			page 70


 3163 0058 4024     		movs	r4, #64
 3164 005a 2243     		orrs	r2, r4
 3165 005c 0270     		strb	r2, [r0]
 3166              	.L298:
 183:Src/6502.c    ****     
 3167              		.loc 1 183 0 is_stmt 1
 3168 005e 1A06     		lsls	r2, r3, #24
 3169 0060 3BD5     		bpl	.L299
 183:Src/6502.c    ****     
 3170              		.loc 1 183 0 is_stmt 0 discriminator 1
 3171 0062 2448     		ldr	r0, .L304+12
 3172 0064 0478     		ldrb	r4, [r0]
 3173 0066 8022     		movs	r2, #128
 3174 0068 5242     		rsbs	r2, r2, #0
 3175 006a 2243     		orrs	r2, r4
 3176 006c 0270     		strb	r2, [r0]
 3177              	.L300:
 186:Src/6502.c    ****         clearcarry();
 3178              		.loc 1 186 0 is_stmt 1
 3179 006e 214A     		ldr	r2, .L304+12
 3180 0070 1278     		ldrb	r2, [r2]
 3181 0072 1007     		lsls	r0, r2, #28
 3182 0074 1DD5     		bpl	.L301
 187:Src/6502.c    ****         
 3183              		.loc 1 187 0
 3184 0076 0120     		movs	r0, #1
 3185 0078 8243     		bics	r2, r0
 3186 007a 1E48     		ldr	r0, .L304+12
 3187 007c 0270     		strb	r2, [r0]
 189:Src/6502.c    ****             a += 0x06;
 3188              		.loc 1 189 0
 3189 007e 0F20     		movs	r0, #15
 3190 0080 0840     		ands	r0, r1
 3191 0082 0928     		cmp	r0, #9
 3192 0084 02DD     		ble	.L302
 190:Src/6502.c    ****         }
 3193              		.loc 1 190 0
 3194 0086 0631     		adds	r1, r1, #6
 3195 0088 1948     		ldr	r0, .L304+8
 3196 008a 0170     		strb	r1, [r0]
 3197              	.L302:
 192:Src/6502.c    ****             a += 0x60;
 3198              		.loc 1 192 0
 3199 008c 1849     		ldr	r1, .L304+8
 3200 008e 0978     		ldrb	r1, [r1]
 3201 0090 0F20     		movs	r0, #15
 3202 0092 8143     		bics	r1, r0
 3203 0094 9029     		cmp	r1, #144
 3204 0096 03DD     		ble	.L303
 194:Src/6502.c    ****         }
 3205              		.loc 1 194 0
 3206 0098 0121     		movs	r1, #1
 3207 009a 0A43     		orrs	r2, r1
 3208 009c 1549     		ldr	r1, .L304+12
 3209 009e 0A70     		strb	r2, [r1]
 3210              	.L303:
 197:Src/6502.c    ****     }
ARM GAS  /tmp/ccjHcktl.s 			page 71


 3211              		.loc 1 197 0
 3212 00a0 164A     		ldr	r2, .L304+20
 3213 00a2 0120     		movs	r0, #1
 3214 00a4 0021     		movs	r1, #0
 3215 00a6 1468     		ldr	r4, [r2]
 3216 00a8 5568     		ldr	r5, [r2, #4]
 3217 00aa 0019     		adds	r0, r0, r4
 3218 00ac 6941     		adcs	r1, r1, r5
 3219 00ae 1060     		str	r0, [r2]
 3220 00b0 5160     		str	r1, [r2, #4]
 3221              	.L301:
 201:Src/6502.c    **** }
 3222              		.loc 1 201 0
 3223 00b2 0F4A     		ldr	r2, .L304+8
 3224 00b4 1370     		strb	r3, [r2]
 202:Src/6502.c    **** 
 3225              		.loc 1 202 0
 3226              		@ sp needed
 3227 00b6 70BD     		pop	{r4, r5, r6, pc}
 3228              	.L293:
 180:Src/6502.c    ****     zerocalc(result);
 3229              		.loc 1 180 0 discriminator 2
 3230 00b8 0124     		movs	r4, #1
 3231 00ba A243     		bics	r2, r4
 3232 00bc 0D4C     		ldr	r4, .L304+12
 3233 00be 2270     		strb	r2, [r4]
 3234 00c0 BAE7     		b	.L294
 3235              	.L295:
 181:Src/6502.c    ****     overflowcalc(result, a, value);
 3236              		.loc 1 181 0 discriminator 2
 3237 00c2 0C4C     		ldr	r4, .L304+12
 3238 00c4 2278     		ldrb	r2, [r4]
 3239 00c6 0225     		movs	r5, #2
 3240 00c8 2A43     		orrs	r2, r5
 3241 00ca 2270     		strb	r2, [r4]
 3242 00cc BCE7     		b	.L296
 3243              	.L297:
 182:Src/6502.c    ****     signcalc(result);
 3244              		.loc 1 182 0 discriminator 2
 3245 00ce 0948     		ldr	r0, .L304+12
 3246 00d0 0278     		ldrb	r2, [r0]
 3247 00d2 4024     		movs	r4, #64
 3248 00d4 A243     		bics	r2, r4
 3249 00d6 0270     		strb	r2, [r0]
 3250 00d8 C1E7     		b	.L298
 3251              	.L299:
 183:Src/6502.c    ****     
 3252              		.loc 1 183 0 discriminator 2
 3253 00da 0648     		ldr	r0, .L304+12
 3254 00dc 0478     		ldrb	r4, [r0]
 3255 00de 7F22     		movs	r2, #127
 3256 00e0 2240     		ands	r2, r4
 3257 00e2 0270     		strb	r2, [r0]
 3258 00e4 C3E7     		b	.L300
 3259              	.L305:
 3260 00e6 C046     		.align	2
 3261              	.L304:
ARM GAS  /tmp/ccjHcktl.s 			page 72


 3262 00e8 00000000 		.word	penaltyop
 3263 00ec 00000000 		.word	value
 3264 00f0 00000000 		.word	a
 3265 00f4 00000000 		.word	status
 3266 00f8 00000000 		.word	result
 3267 00fc 00000000 		.word	.LANCHOR0
 3268              		.cfi_endproc
 3269              	.LFE56:
 3271              		.section	.text.rra,"ax",%progbits
 3272              		.align	1
 3273              		.syntax unified
 3274              		.code	16
 3275              		.thumb_func
 3276              		.fpu softvfp
 3278              	rra:
 3279              	.LFB119:
 666:Src/6502.c    **** 
 667:Src/6502.c    ****     static void slo() {
 668:Src/6502.c    ****         asl();
 669:Src/6502.c    ****         ora();
 670:Src/6502.c    ****         if (penaltyop && penaltyaddr) clockticks6502--;
 671:Src/6502.c    ****     }
 672:Src/6502.c    **** 
 673:Src/6502.c    ****     static void rla() {
 674:Src/6502.c    ****         rol();
 675:Src/6502.c    ****         and();
 676:Src/6502.c    ****         if (penaltyop && penaltyaddr) clockticks6502--;
 677:Src/6502.c    ****     }
 678:Src/6502.c    **** 
 679:Src/6502.c    ****     static void sre() {
 680:Src/6502.c    ****         lsr();
 681:Src/6502.c    ****         eor();
 682:Src/6502.c    ****         if (penaltyop && penaltyaddr) clockticks6502--;
 683:Src/6502.c    ****     }
 684:Src/6502.c    **** 
 685:Src/6502.c    ****     static void rra() {
 3280              		.loc 1 685 0
 3281              		.cfi_startproc
 3282              		@ args = 0, pretend = 0, frame = 0
 3283              		@ frame_needed = 0, uses_anonymous_args = 0
 3284 0000 70B5     		push	{r4, r5, r6, lr}
 3285              	.LCFI28:
 3286              		.cfi_def_cfa_offset 16
 3287              		.cfi_offset 4, -16
 3288              		.cfi_offset 5, -12
 3289              		.cfi_offset 6, -8
 3290              		.cfi_offset 14, -4
 686:Src/6502.c    ****         ror();
 3291              		.loc 1 686 0
 3292 0002 FFF7FEFF 		bl	ror
 3293              	.LVL31:
 687:Src/6502.c    ****         adc();
 3294              		.loc 1 687 0
 3295 0006 FFF7FEFF 		bl	adc
 3296              	.LVL32:
 688:Src/6502.c    ****         if (penaltyop && penaltyaddr) clockticks6502--;
 3297              		.loc 1 688 0
ARM GAS  /tmp/ccjHcktl.s 			page 73


 3298 000a 094B     		ldr	r3, .L308
 3299 000c 1B78     		ldrb	r3, [r3]
 3300 000e 002B     		cmp	r3, #0
 3301 0010 0DD0     		beq	.L306
 3302              		.loc 1 688 0 is_stmt 0 discriminator 1
 3303 0012 084B     		ldr	r3, .L308+4
 3304 0014 1B78     		ldrb	r3, [r3]
 3305 0016 002B     		cmp	r3, #0
 3306 0018 09D0     		beq	.L306
 3307              		.loc 1 688 0 discriminator 2
 3308 001a 0749     		ldr	r1, .L308+8
 3309 001c 0122     		movs	r2, #1
 3310 001e 5242     		rsbs	r2, r2, #0
 3311 0020 D317     		asrs	r3, r2, #31
 3312 0022 0C68     		ldr	r4, [r1]
 3313 0024 4D68     		ldr	r5, [r1, #4]
 3314 0026 1219     		adds	r2, r2, r4
 3315 0028 6B41     		adcs	r3, r3, r5
 3316 002a 0A60     		str	r2, [r1]
 3317 002c 4B60     		str	r3, [r1, #4]
 3318              	.L306:
 689:Src/6502.c    ****     }
 3319              		.loc 1 689 0 is_stmt 1
 3320              		@ sp needed
 3321 002e 70BD     		pop	{r4, r5, r6, pc}
 3322              	.L309:
 3323              		.align	2
 3324              	.L308:
 3325 0030 00000000 		.word	penaltyop
 3326 0034 00000000 		.word	penaltyaddr
 3327 0038 00000000 		.word	.LANCHOR0
 3328              		.cfi_endproc
 3329              	.LFE119:
 3331              		.section	.text.lsr,"ax",%progbits
 3332              		.align	1
 3333              		.syntax unified
 3334              		.code	16
 3335              		.thumb_func
 3336              		.fpu softvfp
 3338              	lsr:
 3339              	.LFB88:
 459:Src/6502.c    ****     value = getvalue();
 3340              		.loc 1 459 0
 3341              		.cfi_startproc
 3342              		@ args = 0, pretend = 0, frame = 0
 3343              		@ frame_needed = 0, uses_anonymous_args = 0
 3344 0000 10B5     		push	{r4, lr}
 3345              	.LCFI29:
 3346              		.cfi_def_cfa_offset 8
 3347              		.cfi_offset 4, -8
 3348              		.cfi_offset 14, -4
 460:Src/6502.c    ****     result = value >> 1;
 3349              		.loc 1 460 0
 3350 0002 FFF7FEFF 		bl	getvalue
 3351              	.LVL33:
 3352 0006 194B     		ldr	r3, .L318
 3353 0008 1880     		strh	r0, [r3]
ARM GAS  /tmp/ccjHcktl.s 			page 74


 461:Src/6502.c    ****    
 3354              		.loc 1 461 0
 3355 000a 4308     		lsrs	r3, r0, #1
 3356 000c 184A     		ldr	r2, .L318+4
 3357 000e 1380     		strh	r3, [r2]
 463:Src/6502.c    ****         else clearcarry();
 3358              		.loc 1 463 0
 3359 0010 C207     		lsls	r2, r0, #31
 3360 0012 17D5     		bpl	.L311
 463:Src/6502.c    ****         else clearcarry();
 3361              		.loc 1 463 0 is_stmt 0 discriminator 1
 3362 0014 1749     		ldr	r1, .L318+8
 3363 0016 0A78     		ldrb	r2, [r1]
 3364 0018 0120     		movs	r0, #1
 3365 001a 0243     		orrs	r2, r0
 3366 001c 0A70     		strb	r2, [r1]
 3367              	.L312:
 465:Src/6502.c    ****     signcalc(result);
 3368              		.loc 1 465 0 is_stmt 1
 3369 001e FF22     		movs	r2, #255
 3370 0020 1A42     		tst	r2, r3
 3371 0022 15D0     		beq	.L313
 465:Src/6502.c    ****     signcalc(result);
 3372              		.loc 1 465 0 is_stmt 0 discriminator 1
 3373 0024 1349     		ldr	r1, .L318+8
 3374 0026 0A78     		ldrb	r2, [r1]
 3375 0028 0220     		movs	r0, #2
 3376 002a 8243     		bics	r2, r0
 3377 002c 0A70     		strb	r2, [r1]
 3378              	.L314:
 466:Src/6502.c    ****    
 3379              		.loc 1 466 0 is_stmt 1
 3380 002e 1A06     		lsls	r2, r3, #24
 3381 0030 14D4     		bmi	.L317
 466:Src/6502.c    ****    
 3382              		.loc 1 466 0 is_stmt 0 discriminator 2
 3383 0032 1049     		ldr	r1, .L318+8
 3384 0034 0878     		ldrb	r0, [r1]
 3385 0036 7F22     		movs	r2, #127
 3386 0038 0240     		ands	r2, r0
 3387 003a 0A70     		strb	r2, [r1]
 3388              	.L316:
 468:Src/6502.c    **** }
 3389              		.loc 1 468 0 is_stmt 1
 3390 003c 1800     		movs	r0, r3
 3391 003e FFF7FEFF 		bl	putvalue
 3392              	.LVL34:
 469:Src/6502.c    **** 
 3393              		.loc 1 469 0
 3394              		@ sp needed
 3395 0042 10BD     		pop	{r4, pc}
 3396              	.L311:
 464:Src/6502.c    ****     zerocalc(result);
 3397              		.loc 1 464 0
 3398 0044 0B49     		ldr	r1, .L318+8
 3399 0046 0A78     		ldrb	r2, [r1]
 3400 0048 0120     		movs	r0, #1
ARM GAS  /tmp/ccjHcktl.s 			page 75


 3401 004a 8243     		bics	r2, r0
 3402 004c 0A70     		strb	r2, [r1]
 3403 004e E6E7     		b	.L312
 3404              	.L313:
 465:Src/6502.c    ****     signcalc(result);
 3405              		.loc 1 465 0 discriminator 2
 3406 0050 0849     		ldr	r1, .L318+8
 3407 0052 0A78     		ldrb	r2, [r1]
 3408 0054 0220     		movs	r0, #2
 3409 0056 0243     		orrs	r2, r0
 3410 0058 0A70     		strb	r2, [r1]
 3411 005a E8E7     		b	.L314
 3412              	.L317:
 466:Src/6502.c    ****    
 3413              		.loc 1 466 0 discriminator 1
 3414 005c 0549     		ldr	r1, .L318+8
 3415 005e 0878     		ldrb	r0, [r1]
 3416 0060 8022     		movs	r2, #128
 3417 0062 5242     		rsbs	r2, r2, #0
 3418 0064 0243     		orrs	r2, r0
 3419 0066 0A70     		strb	r2, [r1]
 3420 0068 E8E7     		b	.L316
 3421              	.L319:
 3422 006a C046     		.align	2
 3423              	.L318:
 3424 006c 00000000 		.word	value
 3425 0070 00000000 		.word	result
 3426 0074 00000000 		.word	status
 3427              		.cfi_endproc
 3428              	.LFE88:
 3430              		.section	.text.eor,"ax",%progbits
 3431              		.align	1
 3432              		.syntax unified
 3433              		.code	16
 3434              		.thumb_func
 3435              		.fpu softvfp
 3437              	eor:
 3438              	.LFB79:
 388:Src/6502.c    ****     penaltyop = 1;
 3439              		.loc 1 388 0
 3440              		.cfi_startproc
 3441              		@ args = 0, pretend = 0, frame = 0
 3442              		@ frame_needed = 0, uses_anonymous_args = 0
 3443 0000 10B5     		push	{r4, lr}
 3444              	.LCFI30:
 3445              		.cfi_def_cfa_offset 8
 3446              		.cfi_offset 4, -8
 3447              		.cfi_offset 14, -4
 389:Src/6502.c    ****     value = getvalue();
 3448              		.loc 1 389 0
 3449 0002 0122     		movs	r2, #1
 3450 0004 144B     		ldr	r3, .L326
 3451 0006 1A70     		strb	r2, [r3]
 390:Src/6502.c    ****     result = (uint16_t)a ^ value;
 3452              		.loc 1 390 0
 3453 0008 FFF7FEFF 		bl	getvalue
 3454              	.LVL35:
ARM GAS  /tmp/ccjHcktl.s 			page 76


 3455 000c 134B     		ldr	r3, .L326+4
 3456 000e 1880     		strh	r0, [r3]
 391:Src/6502.c    ****    
 3457              		.loc 1 391 0
 3458 0010 134B     		ldr	r3, .L326+8
 3459 0012 1B78     		ldrb	r3, [r3]
 3460 0014 5840     		eors	r0, r3
 3461 0016 134B     		ldr	r3, .L326+12
 3462 0018 1880     		strh	r0, [r3]
 393:Src/6502.c    ****     signcalc(result);
 3463              		.loc 1 393 0
 3464 001a FF23     		movs	r3, #255
 3465 001c 0342     		tst	r3, r0
 3466 001e 0ED0     		beq	.L321
 393:Src/6502.c    ****     signcalc(result);
 3467              		.loc 1 393 0 is_stmt 0 discriminator 1
 3468 0020 114A     		ldr	r2, .L326+16
 3469 0022 1378     		ldrb	r3, [r2]
 3470 0024 0221     		movs	r1, #2
 3471 0026 8B43     		bics	r3, r1
 3472 0028 1370     		strb	r3, [r2]
 3473              	.L322:
 394:Src/6502.c    ****    
 3474              		.loc 1 394 0 is_stmt 1
 3475 002a 0306     		lsls	r3, r0, #24
 3476 002c 0DD4     		bmi	.L325
 394:Src/6502.c    ****    
 3477              		.loc 1 394 0 is_stmt 0 discriminator 2
 3478 002e 0E4A     		ldr	r2, .L326+16
 3479 0030 1178     		ldrb	r1, [r2]
 3480 0032 7F23     		movs	r3, #127
 3481 0034 0B40     		ands	r3, r1
 3482 0036 1370     		strb	r3, [r2]
 3483              	.L324:
 396:Src/6502.c    **** }
 3484              		.loc 1 396 0 is_stmt 1
 3485 0038 094B     		ldr	r3, .L326+8
 3486 003a 1870     		strb	r0, [r3]
 397:Src/6502.c    **** 
 3487              		.loc 1 397 0
 3488              		@ sp needed
 3489 003c 10BD     		pop	{r4, pc}
 3490              	.L321:
 393:Src/6502.c    ****     signcalc(result);
 3491              		.loc 1 393 0 discriminator 2
 3492 003e 0A4A     		ldr	r2, .L326+16
 3493 0040 1378     		ldrb	r3, [r2]
 3494 0042 0221     		movs	r1, #2
 3495 0044 0B43     		orrs	r3, r1
 3496 0046 1370     		strb	r3, [r2]
 3497 0048 EFE7     		b	.L322
 3498              	.L325:
 394:Src/6502.c    ****    
 3499              		.loc 1 394 0 discriminator 1
 3500 004a 074A     		ldr	r2, .L326+16
 3501 004c 1178     		ldrb	r1, [r2]
 3502 004e 8023     		movs	r3, #128
ARM GAS  /tmp/ccjHcktl.s 			page 77


 3503 0050 5B42     		rsbs	r3, r3, #0
 3504 0052 0B43     		orrs	r3, r1
 3505 0054 1370     		strb	r3, [r2]
 3506 0056 EFE7     		b	.L324
 3507              	.L327:
 3508              		.align	2
 3509              	.L326:
 3510 0058 00000000 		.word	penaltyop
 3511 005c 00000000 		.word	value
 3512 0060 00000000 		.word	a
 3513 0064 00000000 		.word	result
 3514 0068 00000000 		.word	status
 3515              		.cfi_endproc
 3516              	.LFE79:
 3518              		.section	.text.sre,"ax",%progbits
 3519              		.align	1
 3520              		.syntax unified
 3521              		.code	16
 3522              		.thumb_func
 3523              		.fpu softvfp
 3525              	sre:
 3526              	.LFB118:
 679:Src/6502.c    ****         lsr();
 3527              		.loc 1 679 0
 3528              		.cfi_startproc
 3529              		@ args = 0, pretend = 0, frame = 0
 3530              		@ frame_needed = 0, uses_anonymous_args = 0
 3531 0000 70B5     		push	{r4, r5, r6, lr}
 3532              	.LCFI31:
 3533              		.cfi_def_cfa_offset 16
 3534              		.cfi_offset 4, -16
 3535              		.cfi_offset 5, -12
 3536              		.cfi_offset 6, -8
 3537              		.cfi_offset 14, -4
 680:Src/6502.c    ****         eor();
 3538              		.loc 1 680 0
 3539 0002 FFF7FEFF 		bl	lsr
 3540              	.LVL36:
 681:Src/6502.c    ****         if (penaltyop && penaltyaddr) clockticks6502--;
 3541              		.loc 1 681 0
 3542 0006 FFF7FEFF 		bl	eor
 3543              	.LVL37:
 682:Src/6502.c    ****     }
 3544              		.loc 1 682 0
 3545 000a 094B     		ldr	r3, .L330
 3546 000c 1B78     		ldrb	r3, [r3]
 3547 000e 002B     		cmp	r3, #0
 3548 0010 0DD0     		beq	.L328
 682:Src/6502.c    ****     }
 3549              		.loc 1 682 0 is_stmt 0 discriminator 1
 3550 0012 084B     		ldr	r3, .L330+4
 3551 0014 1B78     		ldrb	r3, [r3]
 3552 0016 002B     		cmp	r3, #0
 3553 0018 09D0     		beq	.L328
 682:Src/6502.c    ****     }
 3554              		.loc 1 682 0 discriminator 2
 3555 001a 0749     		ldr	r1, .L330+8
ARM GAS  /tmp/ccjHcktl.s 			page 78


 3556 001c 0122     		movs	r2, #1
 3557 001e 5242     		rsbs	r2, r2, #0
 3558 0020 D317     		asrs	r3, r2, #31
 3559 0022 0C68     		ldr	r4, [r1]
 3560 0024 4D68     		ldr	r5, [r1, #4]
 3561 0026 1219     		adds	r2, r2, r4
 3562 0028 6B41     		adcs	r3, r3, r5
 3563 002a 0A60     		str	r2, [r1]
 3564 002c 4B60     		str	r3, [r1, #4]
 3565              	.L328:
 683:Src/6502.c    **** 
 3566              		.loc 1 683 0 is_stmt 1
 3567              		@ sp needed
 3568 002e 70BD     		pop	{r4, r5, r6, pc}
 3569              	.L331:
 3570              		.align	2
 3571              	.L330:
 3572 0030 00000000 		.word	penaltyop
 3573 0034 00000000 		.word	penaltyaddr
 3574 0038 00000000 		.word	.LANCHOR0
 3575              		.cfi_endproc
 3576              	.LFE118:
 3578              		.section	.text.rol,"ax",%progbits
 3579              		.align	1
 3580              		.syntax unified
 3581              		.code	16
 3582              		.thumb_func
 3583              		.fpu softvfp
 3585              	rol:
 3586              	.LFB95:
 514:Src/6502.c    ****     value = getvalue();
 3587              		.loc 1 514 0
 3588              		.cfi_startproc
 3589              		@ args = 0, pretend = 0, frame = 0
 3590              		@ frame_needed = 0, uses_anonymous_args = 0
 3591 0000 10B5     		push	{r4, lr}
 3592              	.LCFI32:
 3593              		.cfi_def_cfa_offset 8
 3594              		.cfi_offset 4, -8
 3595              		.cfi_offset 14, -4
 515:Src/6502.c    ****     result = (value << 1) | (status & FLAG_CARRY);
 3596              		.loc 1 515 0
 3597 0002 FFF7FEFF 		bl	getvalue
 3598              	.LVL38:
 3599 0006 1B4B     		ldr	r3, .L340
 3600 0008 1880     		strh	r0, [r3]
 516:Src/6502.c    ****    
 3601              		.loc 1 516 0
 3602 000a 4200     		lsls	r2, r0, #1
 3603 000c 1A4B     		ldr	r3, .L340+4
 3604 000e 1B78     		ldrb	r3, [r3]
 3605 0010 0120     		movs	r0, #1
 3606 0012 1840     		ands	r0, r3
 3607 0014 1043     		orrs	r0, r2
 3608 0016 80B2     		uxth	r0, r0
 3609 0018 184A     		ldr	r2, .L340+8
 3610 001a 1080     		strh	r0, [r2]
ARM GAS  /tmp/ccjHcktl.s 			page 79


 518:Src/6502.c    ****     zerocalc(result);
 3611              		.loc 1 518 0
 3612 001c FF22     		movs	r2, #255
 3613 001e 0100     		movs	r1, r0
 3614 0020 9143     		bics	r1, r2
 3615 0022 15D0     		beq	.L333
 518:Src/6502.c    ****     zerocalc(result);
 3616              		.loc 1 518 0 is_stmt 0 discriminator 1
 3617 0024 0122     		movs	r2, #1
 3618 0026 1343     		orrs	r3, r2
 3619 0028 134A     		ldr	r2, .L340+4
 3620 002a 1370     		strb	r3, [r2]
 3621              	.L334:
 519:Src/6502.c    ****     signcalc(result);
 3622              		.loc 1 519 0 is_stmt 1
 3623 002c FF23     		movs	r3, #255
 3624 002e 0342     		tst	r3, r0
 3625 0030 13D0     		beq	.L335
 519:Src/6502.c    ****     signcalc(result);
 3626              		.loc 1 519 0 is_stmt 0 discriminator 1
 3627 0032 114A     		ldr	r2, .L340+4
 3628 0034 1378     		ldrb	r3, [r2]
 3629 0036 0221     		movs	r1, #2
 3630 0038 8B43     		bics	r3, r1
 3631 003a 1370     		strb	r3, [r2]
 3632              	.L336:
 520:Src/6502.c    ****    
 3633              		.loc 1 520 0 is_stmt 1
 3634 003c 0306     		lsls	r3, r0, #24
 3635 003e 12D4     		bmi	.L339
 520:Src/6502.c    ****    
 3636              		.loc 1 520 0 is_stmt 0 discriminator 2
 3637 0040 0D4A     		ldr	r2, .L340+4
 3638 0042 1178     		ldrb	r1, [r2]
 3639 0044 7F23     		movs	r3, #127
 3640 0046 0B40     		ands	r3, r1
 3641 0048 1370     		strb	r3, [r2]
 3642              	.L338:
 522:Src/6502.c    **** }
 3643              		.loc 1 522 0 is_stmt 1
 3644 004a FFF7FEFF 		bl	putvalue
 3645              	.LVL39:
 523:Src/6502.c    **** 
 3646              		.loc 1 523 0
 3647              		@ sp needed
 3648 004e 10BD     		pop	{r4, pc}
 3649              	.L333:
 518:Src/6502.c    ****     zerocalc(result);
 3650              		.loc 1 518 0 discriminator 2
 3651 0050 0122     		movs	r2, #1
 3652 0052 9343     		bics	r3, r2
 3653 0054 084A     		ldr	r2, .L340+4
 3654 0056 1370     		strb	r3, [r2]
 3655 0058 E8E7     		b	.L334
 3656              	.L335:
 519:Src/6502.c    ****     signcalc(result);
 3657              		.loc 1 519 0 discriminator 2
ARM GAS  /tmp/ccjHcktl.s 			page 80


 3658 005a 074A     		ldr	r2, .L340+4
 3659 005c 1378     		ldrb	r3, [r2]
 3660 005e 0221     		movs	r1, #2
 3661 0060 0B43     		orrs	r3, r1
 3662 0062 1370     		strb	r3, [r2]
 3663 0064 EAE7     		b	.L336
 3664              	.L339:
 520:Src/6502.c    ****    
 3665              		.loc 1 520 0 discriminator 1
 3666 0066 044A     		ldr	r2, .L340+4
 3667 0068 1178     		ldrb	r1, [r2]
 3668 006a 8023     		movs	r3, #128
 3669 006c 5B42     		rsbs	r3, r3, #0
 3670 006e 0B43     		orrs	r3, r1
 3671 0070 1370     		strb	r3, [r2]
 3672 0072 EAE7     		b	.L338
 3673              	.L341:
 3674              		.align	2
 3675              	.L340:
 3676 0074 00000000 		.word	value
 3677 0078 00000000 		.word	status
 3678 007c 00000000 		.word	result
 3679              		.cfi_endproc
 3680              	.LFE95:
 3682              		.section	.text.bit,"ax",%progbits
 3683              		.align	1
 3684              		.syntax unified
 3685              		.code	16
 3686              		.thumb_func
 3687              		.fpu softvfp
 3689              	bit:
 3690              	.LFB62:
 253:Src/6502.c    ****     value = getvalue();
 3691              		.loc 1 253 0
 3692              		.cfi_startproc
 3693              		@ args = 0, pretend = 0, frame = 0
 3694              		@ frame_needed = 0, uses_anonymous_args = 0
 3695 0000 10B5     		push	{r4, lr}
 3696              	.LCFI33:
 3697              		.cfi_def_cfa_offset 8
 3698              		.cfi_offset 4, -8
 3699              		.cfi_offset 14, -4
 254:Src/6502.c    ****     result = (uint16_t)a & value;
 3700              		.loc 1 254 0
 3701 0002 FFF7FEFF 		bl	getvalue
 3702              	.LVL40:
 3703 0006 0E4B     		ldr	r3, .L346
 3704 0008 1880     		strh	r0, [r3]
 255:Src/6502.c    ****    
 3705              		.loc 1 255 0
 3706 000a 0E4B     		ldr	r3, .L346+4
 3707 000c 1B78     		ldrb	r3, [r3]
 3708 000e 0340     		ands	r3, r0
 3709 0010 0D4A     		ldr	r2, .L346+8
 3710 0012 1380     		strh	r3, [r2]
 257:Src/6502.c    ****     status = (status & 0x3F) | (uint8_t)(value & 0xC0);
 3711              		.loc 1 257 0
ARM GAS  /tmp/ccjHcktl.s 			page 81


 3712 0014 0ED1     		bne	.L345
 257:Src/6502.c    ****     status = (status & 0x3F) | (uint8_t)(value & 0xC0);
 3713              		.loc 1 257 0 is_stmt 0 discriminator 2
 3714 0016 0D4A     		ldr	r2, .L346+12
 3715 0018 1378     		ldrb	r3, [r2]
 3716 001a 0221     		movs	r1, #2
 3717 001c 0B43     		orrs	r3, r1
 3718 001e 1370     		strb	r3, [r2]
 3719              	.L344:
 258:Src/6502.c    **** }
 3720              		.loc 1 258 0 is_stmt 1
 3721 0020 0A4A     		ldr	r2, .L346+12
 3722 0022 1178     		ldrb	r1, [r2]
 3723 0024 3F23     		movs	r3, #63
 3724 0026 0B40     		ands	r3, r1
 3725 0028 3F21     		movs	r1, #63
 3726 002a 8843     		bics	r0, r1
 3727 002c 40B2     		sxtb	r0, r0
 3728 002e 1843     		orrs	r0, r3
 3729 0030 1070     		strb	r0, [r2]
 259:Src/6502.c    **** 
 3730              		.loc 1 259 0
 3731              		@ sp needed
 3732 0032 10BD     		pop	{r4, pc}
 3733              	.L345:
 257:Src/6502.c    ****     status = (status & 0x3F) | (uint8_t)(value & 0xC0);
 3734              		.loc 1 257 0 discriminator 1
 3735 0034 054A     		ldr	r2, .L346+12
 3736 0036 1378     		ldrb	r3, [r2]
 3737 0038 0221     		movs	r1, #2
 3738 003a 8B43     		bics	r3, r1
 3739 003c 1370     		strb	r3, [r2]
 3740 003e EFE7     		b	.L344
 3741              	.L347:
 3742              		.align	2
 3743              	.L346:
 3744 0040 00000000 		.word	value
 3745 0044 00000000 		.word	a
 3746 0048 00000000 		.word	result
 3747 004c 00000000 		.word	status
 3748              		.cfi_endproc
 3749              	.LFE62:
 3751              		.section	.text.and,"ax",%progbits
 3752              		.align	1
 3753              		.syntax unified
 3754              		.code	16
 3755              		.thumb_func
 3756              		.fpu softvfp
 3758              	and:
 3759              	.LFB57:
 204:Src/6502.c    ****     penaltyop = 1;
 3760              		.loc 1 204 0
 3761              		.cfi_startproc
 3762              		@ args = 0, pretend = 0, frame = 0
 3763              		@ frame_needed = 0, uses_anonymous_args = 0
 3764 0000 10B5     		push	{r4, lr}
 3765              	.LCFI34:
ARM GAS  /tmp/ccjHcktl.s 			page 82


 3766              		.cfi_def_cfa_offset 8
 3767              		.cfi_offset 4, -8
 3768              		.cfi_offset 14, -4
 205:Src/6502.c    ****     value = getvalue();
 3769              		.loc 1 205 0
 3770 0002 0122     		movs	r2, #1
 3771 0004 144B     		ldr	r3, .L354
 3772 0006 1A70     		strb	r2, [r3]
 206:Src/6502.c    ****     result = (uint16_t)a & value;
 3773              		.loc 1 206 0
 3774 0008 FFF7FEFF 		bl	getvalue
 3775              	.LVL41:
 3776 000c 134B     		ldr	r3, .L354+4
 3777 000e 1880     		strh	r0, [r3]
 207:Src/6502.c    ****    
 3778              		.loc 1 207 0
 3779 0010 134B     		ldr	r3, .L354+8
 3780 0012 1B78     		ldrb	r3, [r3]
 3781 0014 1840     		ands	r0, r3
 3782 0016 134B     		ldr	r3, .L354+12
 3783 0018 1880     		strh	r0, [r3]
 209:Src/6502.c    ****     signcalc(result);
 3784              		.loc 1 209 0
 3785 001a 0FD0     		beq	.L349
 209:Src/6502.c    ****     signcalc(result);
 3786              		.loc 1 209 0 is_stmt 0 discriminator 1
 3787 001c 124A     		ldr	r2, .L354+16
 3788 001e 1378     		ldrb	r3, [r2]
 3789 0020 0221     		movs	r1, #2
 3790 0022 8B43     		bics	r3, r1
 3791 0024 1370     		strb	r3, [r2]
 3792              	.L350:
 210:Src/6502.c    ****    
 3793              		.loc 1 210 0 is_stmt 1
 3794 0026 8023     		movs	r3, #128
 3795 0028 0342     		tst	r3, r0
 3796 002a 0DD1     		bne	.L353
 210:Src/6502.c    ****    
 3797              		.loc 1 210 0 is_stmt 0 discriminator 2
 3798 002c 0E4A     		ldr	r2, .L354+16
 3799 002e 1178     		ldrb	r1, [r2]
 3800 0030 7F23     		movs	r3, #127
 3801 0032 0B40     		ands	r3, r1
 3802 0034 1370     		strb	r3, [r2]
 3803              	.L352:
 212:Src/6502.c    **** }
 3804              		.loc 1 212 0 is_stmt 1
 3805 0036 0A4B     		ldr	r3, .L354+8
 3806 0038 1870     		strb	r0, [r3]
 213:Src/6502.c    **** 
 3807              		.loc 1 213 0
 3808              		@ sp needed
 3809 003a 10BD     		pop	{r4, pc}
 3810              	.L349:
 209:Src/6502.c    ****     signcalc(result);
 3811              		.loc 1 209 0 discriminator 2
 3812 003c 0A4A     		ldr	r2, .L354+16
ARM GAS  /tmp/ccjHcktl.s 			page 83


 3813 003e 1378     		ldrb	r3, [r2]
 3814 0040 0221     		movs	r1, #2
 3815 0042 0B43     		orrs	r3, r1
 3816 0044 1370     		strb	r3, [r2]
 3817 0046 EEE7     		b	.L350
 3818              	.L353:
 210:Src/6502.c    ****    
 3819              		.loc 1 210 0 discriminator 1
 3820 0048 074A     		ldr	r2, .L354+16
 3821 004a 1178     		ldrb	r1, [r2]
 3822 004c 013B     		subs	r3, r3, #1
 3823 004e FF3B     		subs	r3, r3, #255
 3824 0050 0B43     		orrs	r3, r1
 3825 0052 1370     		strb	r3, [r2]
 3826 0054 EFE7     		b	.L352
 3827              	.L355:
 3828 0056 C046     		.align	2
 3829              	.L354:
 3830 0058 00000000 		.word	penaltyop
 3831 005c 00000000 		.word	value
 3832 0060 00000000 		.word	a
 3833 0064 00000000 		.word	result
 3834 0068 00000000 		.word	status
 3835              		.cfi_endproc
 3836              	.LFE57:
 3838              		.section	.text.rla,"ax",%progbits
 3839              		.align	1
 3840              		.syntax unified
 3841              		.code	16
 3842              		.thumb_func
 3843              		.fpu softvfp
 3845              	rla:
 3846              	.LFB117:
 673:Src/6502.c    ****         rol();
 3847              		.loc 1 673 0
 3848              		.cfi_startproc
 3849              		@ args = 0, pretend = 0, frame = 0
 3850              		@ frame_needed = 0, uses_anonymous_args = 0
 3851 0000 70B5     		push	{r4, r5, r6, lr}
 3852              	.LCFI35:
 3853              		.cfi_def_cfa_offset 16
 3854              		.cfi_offset 4, -16
 3855              		.cfi_offset 5, -12
 3856              		.cfi_offset 6, -8
 3857              		.cfi_offset 14, -4
 674:Src/6502.c    ****         and();
 3858              		.loc 1 674 0
 3859 0002 FFF7FEFF 		bl	rol
 3860              	.LVL42:
 675:Src/6502.c    ****         if (penaltyop && penaltyaddr) clockticks6502--;
 3861              		.loc 1 675 0
 3862 0006 FFF7FEFF 		bl	and
 3863              	.LVL43:
 676:Src/6502.c    ****     }
 3864              		.loc 1 676 0
 3865 000a 094B     		ldr	r3, .L358
 3866 000c 1B78     		ldrb	r3, [r3]
ARM GAS  /tmp/ccjHcktl.s 			page 84


 3867 000e 002B     		cmp	r3, #0
 3868 0010 0DD0     		beq	.L356
 676:Src/6502.c    ****     }
 3869              		.loc 1 676 0 is_stmt 0 discriminator 1
 3870 0012 084B     		ldr	r3, .L358+4
 3871 0014 1B78     		ldrb	r3, [r3]
 3872 0016 002B     		cmp	r3, #0
 3873 0018 09D0     		beq	.L356
 676:Src/6502.c    ****     }
 3874              		.loc 1 676 0 discriminator 2
 3875 001a 0749     		ldr	r1, .L358+8
 3876 001c 0122     		movs	r2, #1
 3877 001e 5242     		rsbs	r2, r2, #0
 3878 0020 D317     		asrs	r3, r2, #31
 3879 0022 0C68     		ldr	r4, [r1]
 3880 0024 4D68     		ldr	r5, [r1, #4]
 3881 0026 1219     		adds	r2, r2, r4
 3882 0028 6B41     		adcs	r3, r3, r5
 3883 002a 0A60     		str	r2, [r1]
 3884 002c 4B60     		str	r3, [r1, #4]
 3885              	.L356:
 677:Src/6502.c    **** 
 3886              		.loc 1 677 0 is_stmt 1
 3887              		@ sp needed
 3888 002e 70BD     		pop	{r4, r5, r6, pc}
 3889              	.L359:
 3890              		.align	2
 3891              	.L358:
 3892 0030 00000000 		.word	penaltyop
 3893 0034 00000000 		.word	penaltyaddr
 3894 0038 00000000 		.word	.LANCHOR0
 3895              		.cfi_endproc
 3896              	.LFE117:
 3898              		.section	.text.asl,"ax",%progbits
 3899              		.align	1
 3900              		.syntax unified
 3901              		.code	16
 3902              		.thumb_func
 3903              		.fpu softvfp
 3905              	asl:
 3906              	.LFB58:
 215:Src/6502.c    ****     value = getvalue();
 3907              		.loc 1 215 0
 3908              		.cfi_startproc
 3909              		@ args = 0, pretend = 0, frame = 0
 3910              		@ frame_needed = 0, uses_anonymous_args = 0
 3911 0000 10B5     		push	{r4, lr}
 3912              	.LCFI36:
 3913              		.cfi_def_cfa_offset 8
 3914              		.cfi_offset 4, -8
 3915              		.cfi_offset 14, -4
 216:Src/6502.c    ****     result = value << 1;
 3916              		.loc 1 216 0
 3917 0002 FFF7FEFF 		bl	getvalue
 3918              	.LVL44:
 3919 0006 1A4B     		ldr	r3, .L368
 3920 0008 1880     		strh	r0, [r3]
ARM GAS  /tmp/ccjHcktl.s 			page 85


 217:Src/6502.c    **** 
 3921              		.loc 1 217 0
 3922 000a 4000     		lsls	r0, r0, #1
 3923 000c 80B2     		uxth	r0, r0
 3924 000e 194B     		ldr	r3, .L368+4
 3925 0010 1880     		strh	r0, [r3]
 219:Src/6502.c    ****     zerocalc(result);
 3926              		.loc 1 219 0
 3927 0012 FF23     		movs	r3, #255
 3928 0014 0200     		movs	r2, r0
 3929 0016 9A43     		bics	r2, r3
 3930 0018 16D0     		beq	.L361
 219:Src/6502.c    ****     zerocalc(result);
 3931              		.loc 1 219 0 is_stmt 0 discriminator 1
 3932 001a 174A     		ldr	r2, .L368+8
 3933 001c 1378     		ldrb	r3, [r2]
 3934 001e 0121     		movs	r1, #1
 3935 0020 0B43     		orrs	r3, r1
 3936 0022 1370     		strb	r3, [r2]
 3937              	.L362:
 220:Src/6502.c    ****     signcalc(result);
 3938              		.loc 1 220 0 is_stmt 1
 3939 0024 FF23     		movs	r3, #255
 3940 0026 0342     		tst	r3, r0
 3941 0028 14D0     		beq	.L363
 220:Src/6502.c    ****     signcalc(result);
 3942              		.loc 1 220 0 is_stmt 0 discriminator 1
 3943 002a 134A     		ldr	r2, .L368+8
 3944 002c 1378     		ldrb	r3, [r2]
 3945 002e 0221     		movs	r1, #2
 3946 0030 8B43     		bics	r3, r1
 3947 0032 1370     		strb	r3, [r2]
 3948              	.L364:
 221:Src/6502.c    ****    
 3949              		.loc 1 221 0 is_stmt 1
 3950 0034 0306     		lsls	r3, r0, #24
 3951 0036 13D4     		bmi	.L367
 221:Src/6502.c    ****    
 3952              		.loc 1 221 0 is_stmt 0 discriminator 2
 3953 0038 0F4A     		ldr	r2, .L368+8
 3954 003a 1178     		ldrb	r1, [r2]
 3955 003c 7F23     		movs	r3, #127
 3956 003e 0B40     		ands	r3, r1
 3957 0040 1370     		strb	r3, [r2]
 3958              	.L366:
 223:Src/6502.c    **** }
 3959              		.loc 1 223 0 is_stmt 1
 3960 0042 FFF7FEFF 		bl	putvalue
 3961              	.LVL45:
 224:Src/6502.c    **** 
 3962              		.loc 1 224 0
 3963              		@ sp needed
 3964 0046 10BD     		pop	{r4, pc}
 3965              	.L361:
 219:Src/6502.c    ****     zerocalc(result);
 3966              		.loc 1 219 0 discriminator 2
 3967 0048 0B4A     		ldr	r2, .L368+8
ARM GAS  /tmp/ccjHcktl.s 			page 86


 3968 004a 1378     		ldrb	r3, [r2]
 3969 004c 0121     		movs	r1, #1
 3970 004e 8B43     		bics	r3, r1
 3971 0050 1370     		strb	r3, [r2]
 3972 0052 E7E7     		b	.L362
 3973              	.L363:
 220:Src/6502.c    ****     signcalc(result);
 3974              		.loc 1 220 0 discriminator 2
 3975 0054 084A     		ldr	r2, .L368+8
 3976 0056 1378     		ldrb	r3, [r2]
 3977 0058 0221     		movs	r1, #2
 3978 005a 0B43     		orrs	r3, r1
 3979 005c 1370     		strb	r3, [r2]
 3980 005e E9E7     		b	.L364
 3981              	.L367:
 221:Src/6502.c    ****    
 3982              		.loc 1 221 0 discriminator 1
 3983 0060 054A     		ldr	r2, .L368+8
 3984 0062 1178     		ldrb	r1, [r2]
 3985 0064 8023     		movs	r3, #128
 3986 0066 5B42     		rsbs	r3, r3, #0
 3987 0068 0B43     		orrs	r3, r1
 3988 006a 1370     		strb	r3, [r2]
 3989 006c E9E7     		b	.L366
 3990              	.L369:
 3991 006e C046     		.align	2
 3992              	.L368:
 3993 0070 00000000 		.word	value
 3994 0074 00000000 		.word	result
 3995 0078 00000000 		.word	status
 3996              		.cfi_endproc
 3997              	.LFE58:
 3999              		.section	.text.ora,"ax",%progbits
 4000              		.align	1
 4001              		.syntax unified
 4002              		.code	16
 4003              		.thumb_func
 4004              		.fpu softvfp
 4006              	ora:
 4007              	.LFB90:
 484:Src/6502.c    ****     penaltyop = 1;
 4008              		.loc 1 484 0
 4009              		.cfi_startproc
 4010              		@ args = 0, pretend = 0, frame = 0
 4011              		@ frame_needed = 0, uses_anonymous_args = 0
 4012 0000 10B5     		push	{r4, lr}
 4013              	.LCFI37:
 4014              		.cfi_def_cfa_offset 8
 4015              		.cfi_offset 4, -8
 4016              		.cfi_offset 14, -4
 485:Src/6502.c    ****     value = getvalue();
 4017              		.loc 1 485 0
 4018 0002 0122     		movs	r2, #1
 4019 0004 144B     		ldr	r3, .L376
 4020 0006 1A70     		strb	r2, [r3]
 486:Src/6502.c    ****     result = (uint16_t)a | value;
 4021              		.loc 1 486 0
ARM GAS  /tmp/ccjHcktl.s 			page 87


 4022 0008 FFF7FEFF 		bl	getvalue
 4023              	.LVL46:
 4024 000c 134B     		ldr	r3, .L376+4
 4025 000e 1880     		strh	r0, [r3]
 487:Src/6502.c    ****    
 4026              		.loc 1 487 0
 4027 0010 134B     		ldr	r3, .L376+8
 4028 0012 1B78     		ldrb	r3, [r3]
 4029 0014 1843     		orrs	r0, r3
 4030 0016 134B     		ldr	r3, .L376+12
 4031 0018 1880     		strh	r0, [r3]
 489:Src/6502.c    ****     signcalc(result);
 4032              		.loc 1 489 0
 4033 001a FF23     		movs	r3, #255
 4034 001c 0342     		tst	r3, r0
 4035 001e 0ED0     		beq	.L371
 489:Src/6502.c    ****     signcalc(result);
 4036              		.loc 1 489 0 is_stmt 0 discriminator 1
 4037 0020 114A     		ldr	r2, .L376+16
 4038 0022 1378     		ldrb	r3, [r2]
 4039 0024 0221     		movs	r1, #2
 4040 0026 8B43     		bics	r3, r1
 4041 0028 1370     		strb	r3, [r2]
 4042              	.L372:
 490:Src/6502.c    ****    
 4043              		.loc 1 490 0 is_stmt 1
 4044 002a 0306     		lsls	r3, r0, #24
 4045 002c 0DD4     		bmi	.L375
 490:Src/6502.c    ****    
 4046              		.loc 1 490 0 is_stmt 0 discriminator 2
 4047 002e 0E4A     		ldr	r2, .L376+16
 4048 0030 1178     		ldrb	r1, [r2]
 4049 0032 7F23     		movs	r3, #127
 4050 0034 0B40     		ands	r3, r1
 4051 0036 1370     		strb	r3, [r2]
 4052              	.L374:
 492:Src/6502.c    **** }
 4053              		.loc 1 492 0 is_stmt 1
 4054 0038 094B     		ldr	r3, .L376+8
 4055 003a 1870     		strb	r0, [r3]
 493:Src/6502.c    **** 
 4056              		.loc 1 493 0
 4057              		@ sp needed
 4058 003c 10BD     		pop	{r4, pc}
 4059              	.L371:
 489:Src/6502.c    ****     signcalc(result);
 4060              		.loc 1 489 0 discriminator 2
 4061 003e 0A4A     		ldr	r2, .L376+16
 4062 0040 1378     		ldrb	r3, [r2]
 4063 0042 0221     		movs	r1, #2
 4064 0044 0B43     		orrs	r3, r1
 4065 0046 1370     		strb	r3, [r2]
 4066 0048 EFE7     		b	.L372
 4067              	.L375:
 490:Src/6502.c    ****    
 4068              		.loc 1 490 0 discriminator 1
 4069 004a 074A     		ldr	r2, .L376+16
ARM GAS  /tmp/ccjHcktl.s 			page 88


 4070 004c 1178     		ldrb	r1, [r2]
 4071 004e 8023     		movs	r3, #128
 4072 0050 5B42     		rsbs	r3, r3, #0
 4073 0052 0B43     		orrs	r3, r1
 4074 0054 1370     		strb	r3, [r2]
 4075 0056 EFE7     		b	.L374
 4076              	.L377:
 4077              		.align	2
 4078              	.L376:
 4079 0058 00000000 		.word	penaltyop
 4080 005c 00000000 		.word	value
 4081 0060 00000000 		.word	a
 4082 0064 00000000 		.word	result
 4083 0068 00000000 		.word	status
 4084              		.cfi_endproc
 4085              	.LFE90:
 4087              		.section	.text.slo,"ax",%progbits
 4088              		.align	1
 4089              		.syntax unified
 4090              		.code	16
 4091              		.thumb_func
 4092              		.fpu softvfp
 4094              	slo:
 4095              	.LFB116:
 667:Src/6502.c    ****         asl();
 4096              		.loc 1 667 0
 4097              		.cfi_startproc
 4098              		@ args = 0, pretend = 0, frame = 0
 4099              		@ frame_needed = 0, uses_anonymous_args = 0
 4100 0000 70B5     		push	{r4, r5, r6, lr}
 4101              	.LCFI38:
 4102              		.cfi_def_cfa_offset 16
 4103              		.cfi_offset 4, -16
 4104              		.cfi_offset 5, -12
 4105              		.cfi_offset 6, -8
 4106              		.cfi_offset 14, -4
 668:Src/6502.c    ****         ora();
 4107              		.loc 1 668 0
 4108 0002 FFF7FEFF 		bl	asl
 4109              	.LVL47:
 669:Src/6502.c    ****         if (penaltyop && penaltyaddr) clockticks6502--;
 4110              		.loc 1 669 0
 4111 0006 FFF7FEFF 		bl	ora
 4112              	.LVL48:
 670:Src/6502.c    ****     }
 4113              		.loc 1 670 0
 4114 000a 094B     		ldr	r3, .L380
 4115 000c 1B78     		ldrb	r3, [r3]
 4116 000e 002B     		cmp	r3, #0
 4117 0010 0DD0     		beq	.L378
 670:Src/6502.c    ****     }
 4118              		.loc 1 670 0 is_stmt 0 discriminator 1
 4119 0012 084B     		ldr	r3, .L380+4
 4120 0014 1B78     		ldrb	r3, [r3]
 4121 0016 002B     		cmp	r3, #0
 4122 0018 09D0     		beq	.L378
 670:Src/6502.c    ****     }
ARM GAS  /tmp/ccjHcktl.s 			page 89


 4123              		.loc 1 670 0 discriminator 2
 4124 001a 0749     		ldr	r1, .L380+8
 4125 001c 0122     		movs	r2, #1
 4126 001e 5242     		rsbs	r2, r2, #0
 4127 0020 D317     		asrs	r3, r2, #31
 4128 0022 0C68     		ldr	r4, [r1]
 4129 0024 4D68     		ldr	r5, [r1, #4]
 4130 0026 1219     		adds	r2, r2, r4
 4131 0028 6B41     		adcs	r3, r3, r5
 4132 002a 0A60     		str	r2, [r1]
 4133 002c 4B60     		str	r3, [r1, #4]
 4134              	.L378:
 671:Src/6502.c    **** 
 4135              		.loc 1 671 0 is_stmt 1
 4136              		@ sp needed
 4137 002e 70BD     		pop	{r4, r5, r6, pc}
 4138              	.L381:
 4139              		.align	2
 4140              	.L380:
 4141 0030 00000000 		.word	penaltyop
 4142 0034 00000000 		.word	penaltyaddr
 4143 0038 00000000 		.word	.LANCHOR0
 4144              		.cfi_endproc
 4145              	.LFE116:
 4147              		.section	.text.zpy,"ax",%progbits
 4148              		.align	1
 4149              		.syntax unified
 4150              		.code	16
 4151              		.thumb_func
 4152              		.fpu softvfp
 4154              	zpy:
 4155              	.LFB45:
  92:Src/6502.c    ****     ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)y) & 0xFF; //zero-page wraparound
 4156              		.loc 1 92 0
 4157              		.cfi_startproc
 4158              		@ args = 0, pretend = 0, frame = 0
 4159              		@ frame_needed = 0, uses_anonymous_args = 0
 4160 0000 10B5     		push	{r4, lr}
 4161              	.LCFI39:
 4162              		.cfi_def_cfa_offset 8
 4163              		.cfi_offset 4, -8
 4164              		.cfi_offset 14, -4
  93:Src/6502.c    **** }
 4165              		.loc 1 93 0
 4166 0002 064B     		ldr	r3, .L383
 4167 0004 1888     		ldrh	r0, [r3]
 4168 0006 421C     		adds	r2, r0, #1
 4169 0008 1A80     		strh	r2, [r3]
 4170 000a FFF7FEFF 		bl	read6502
 4171              	.LVL49:
 4172 000e 044B     		ldr	r3, .L383+4
 4173 0010 1B78     		ldrb	r3, [r3]
 4174 0012 C018     		adds	r0, r0, r3
 4175 0014 C0B2     		uxtb	r0, r0
 4176 0016 034B     		ldr	r3, .L383+8
 4177 0018 1880     		strh	r0, [r3]
  94:Src/6502.c    **** 
ARM GAS  /tmp/ccjHcktl.s 			page 90


 4178              		.loc 1 94 0
 4179              		@ sp needed
 4180 001a 10BD     		pop	{r4, pc}
 4181              	.L384:
 4182              		.align	2
 4183              	.L383:
 4184 001c 00000000 		.word	pc
 4185 0020 00000000 		.word	y
 4186 0024 00000000 		.word	ea
 4187              		.cfi_endproc
 4188              	.LFE45:
 4190              		.section	.text.ind,"ax",%progbits
 4191              		.align	1
 4192              		.syntax unified
 4193              		.code	16
 4194              		.thumb_func
 4195              		.fpu softvfp
 4197              	ind:
 4198              	.LFB50:
 132:Src/6502.c    ****     uint16_t eahelp, eahelp2;
 4199              		.loc 1 132 0
 4200              		.cfi_startproc
 4201              		@ args = 0, pretend = 0, frame = 0
 4202              		@ frame_needed = 0, uses_anonymous_args = 0
 4203 0000 70B5     		push	{r4, r5, r6, lr}
 4204              	.LCFI40:
 4205              		.cfi_def_cfa_offset 16
 4206              		.cfi_offset 4, -16
 4207              		.cfi_offset 5, -12
 4208              		.cfi_offset 6, -8
 4209              		.cfi_offset 14, -4
 134:Src/6502.c    ****     eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); //replicate 6502 page-boundary wraparoun
 4210              		.loc 1 134 0
 4211 0002 124D     		ldr	r5, .L386
 4212 0004 2888     		ldrh	r0, [r5]
 4213 0006 FFF7FEFF 		bl	read6502
 4214              	.LVL50:
 4215 000a 84B2     		uxth	r4, r0
 4216 000c 2888     		ldrh	r0, [r5]
 4217 000e 0130     		adds	r0, r0, #1
 4218 0010 80B2     		uxth	r0, r0
 4219 0012 FFF7FEFF 		bl	read6502
 4220              	.LVL51:
 4221 0016 80B2     		uxth	r0, r0
 4222 0018 0002     		lsls	r0, r0, #8
 4223 001a 80B2     		uxth	r0, r0
 4224 001c 2043     		orrs	r0, r4
 4225              	.LVL52:
 135:Src/6502.c    ****     ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 4226              		.loc 1 135 0
 4227 001e FF23     		movs	r3, #255
 4228 0020 0400     		movs	r4, r0
 4229 0022 9C43     		bics	r4, r3
 4230 0024 24B2     		sxth	r4, r4
 4231 0026 421C     		adds	r2, r0, #1
 4232 0028 12B2     		sxth	r2, r2
 4233 002a 1340     		ands	r3, r2
ARM GAS  /tmp/ccjHcktl.s 			page 91


 4234 002c 1C43     		orrs	r4, r3
 4235 002e A4B2     		uxth	r4, r4
 4236              	.LVL53:
 136:Src/6502.c    ****     pc += 2;
 4237              		.loc 1 136 0
 4238 0030 FFF7FEFF 		bl	read6502
 4239              	.LVL54:
 4240 0034 06B2     		sxth	r6, r0
 4241 0036 2000     		movs	r0, r4
 4242 0038 FFF7FEFF 		bl	read6502
 4243              	.LVL55:
 4244 003c 0002     		lsls	r0, r0, #8
 4245 003e 0643     		orrs	r6, r0
 4246 0040 034B     		ldr	r3, .L386+4
 4247 0042 1E80     		strh	r6, [r3]
 137:Src/6502.c    **** }
 4248              		.loc 1 137 0
 4249 0044 2B88     		ldrh	r3, [r5]
 4250 0046 0233     		adds	r3, r3, #2
 4251 0048 2B80     		strh	r3, [r5]
 138:Src/6502.c    **** 
 4252              		.loc 1 138 0
 4253              		@ sp needed
 4254              	.LVL56:
 4255 004a 70BD     		pop	{r4, r5, r6, pc}
 4256              	.L387:
 4257              		.align	2
 4258              	.L386:
 4259 004c 00000000 		.word	pc
 4260 0050 00000000 		.word	ea
 4261              		.cfi_endproc
 4262              	.LFE50:
 4264              		.section	.text.absx,"ax",%progbits
 4265              		.align	1
 4266              		.syntax unified
 4267              		.code	16
 4268              		.thumb_func
 4269              		.fpu softvfp
 4271              	absx:
 4272              	.LFB48:
 106:Src/6502.c    ****     uint16_t startpage;
 4273              		.loc 1 106 0
 4274              		.cfi_startproc
 4275              		@ args = 0, pretend = 0, frame = 0
 4276              		@ frame_needed = 0, uses_anonymous_args = 0
 4277 0000 70B5     		push	{r4, r5, r6, lr}
 4278              	.LCFI41:
 4279              		.cfi_def_cfa_offset 16
 4280              		.cfi_offset 4, -16
 4281              		.cfi_offset 5, -12
 4282              		.cfi_offset 6, -8
 4283              		.cfi_offset 14, -4
 108:Src/6502.c    ****     startpage = ea & 0xFF00;
 4284              		.loc 1 108 0
 4285 0002 104D     		ldr	r5, .L390
 4286 0004 2888     		ldrh	r0, [r5]
 4287 0006 FFF7FEFF 		bl	read6502
ARM GAS  /tmp/ccjHcktl.s 			page 92


 4288              	.LVL57:
 4289 000a 04B2     		sxth	r4, r0
 4290 000c 2888     		ldrh	r0, [r5]
 4291 000e 0130     		adds	r0, r0, #1
 4292 0010 80B2     		uxth	r0, r0
 4293 0012 FFF7FEFF 		bl	read6502
 4294              	.LVL58:
 4295 0016 0302     		lsls	r3, r0, #8
 4296 0018 2343     		orrs	r3, r4
 4297 001a 9BB2     		uxth	r3, r3
 109:Src/6502.c    ****     ea += (uint16_t)x;
 4298              		.loc 1 109 0
 4299 001c FF22     		movs	r2, #255
 4300 001e 1900     		movs	r1, r3
 4301 0020 9143     		bics	r1, r2
 4302              	.LVL59:
 110:Src/6502.c    **** 
 4303              		.loc 1 110 0
 4304 0022 0948     		ldr	r0, .L390+4
 4305 0024 0078     		ldrb	r0, [r0]
 4306 0026 1B18     		adds	r3, r3, r0
 4307 0028 9BB2     		uxth	r3, r3
 4308 002a 0848     		ldr	r0, .L390+8
 4309 002c 0380     		strh	r3, [r0]
 112:Src/6502.c    ****         penaltyaddr = 1;
 4310              		.loc 1 112 0
 4311 002e 9343     		bics	r3, r2
 4312 0030 9942     		cmp	r1, r3
 4313 0032 02D0     		beq	.L389
 113:Src/6502.c    ****     }
 4314              		.loc 1 113 0
 4315 0034 FE3A     		subs	r2, r2, #254
 4316 0036 064B     		ldr	r3, .L390+12
 4317 0038 1A70     		strb	r2, [r3]
 4318              	.L389:
 116:Src/6502.c    **** }
 4319              		.loc 1 116 0
 4320 003a 024A     		ldr	r2, .L390
 4321 003c 1388     		ldrh	r3, [r2]
 4322 003e 0233     		adds	r3, r3, #2
 4323 0040 1380     		strh	r3, [r2]
 117:Src/6502.c    **** 
 4324              		.loc 1 117 0
 4325              		@ sp needed
 4326 0042 70BD     		pop	{r4, r5, r6, pc}
 4327              	.L391:
 4328              		.align	2
 4329              	.L390:
 4330 0044 00000000 		.word	pc
 4331 0048 00000000 		.word	x
 4332 004c 00000000 		.word	ea
 4333 0050 00000000 		.word	penaltyaddr
 4334              		.cfi_endproc
 4335              	.LFE48:
 4337              		.section	.text.absy,"ax",%progbits
 4338              		.align	1
 4339              		.syntax unified
ARM GAS  /tmp/ccjHcktl.s 			page 93


 4340              		.code	16
 4341              		.thumb_func
 4342              		.fpu softvfp
 4344              	absy:
 4345              	.LFB49:
 119:Src/6502.c    ****     uint16_t startpage;
 4346              		.loc 1 119 0
 4347              		.cfi_startproc
 4348              		@ args = 0, pretend = 0, frame = 0
 4349              		@ frame_needed = 0, uses_anonymous_args = 0
 4350 0000 70B5     		push	{r4, r5, r6, lr}
 4351              	.LCFI42:
 4352              		.cfi_def_cfa_offset 16
 4353              		.cfi_offset 4, -16
 4354              		.cfi_offset 5, -12
 4355              		.cfi_offset 6, -8
 4356              		.cfi_offset 14, -4
 121:Src/6502.c    ****     startpage = ea & 0xFF00;
 4357              		.loc 1 121 0
 4358 0002 104D     		ldr	r5, .L394
 4359 0004 2888     		ldrh	r0, [r5]
 4360 0006 FFF7FEFF 		bl	read6502
 4361              	.LVL60:
 4362 000a 04B2     		sxth	r4, r0
 4363 000c 2888     		ldrh	r0, [r5]
 4364 000e 0130     		adds	r0, r0, #1
 4365 0010 80B2     		uxth	r0, r0
 4366 0012 FFF7FEFF 		bl	read6502
 4367              	.LVL61:
 4368 0016 0302     		lsls	r3, r0, #8
 4369 0018 2343     		orrs	r3, r4
 4370 001a 9BB2     		uxth	r3, r3
 122:Src/6502.c    ****     ea += (uint16_t)y;
 4371              		.loc 1 122 0
 4372 001c FF22     		movs	r2, #255
 4373 001e 1900     		movs	r1, r3
 4374 0020 9143     		bics	r1, r2
 4375              	.LVL62:
 123:Src/6502.c    **** 
 4376              		.loc 1 123 0
 4377 0022 0948     		ldr	r0, .L394+4
 4378 0024 0078     		ldrb	r0, [r0]
 4379 0026 1B18     		adds	r3, r3, r0
 4380 0028 9BB2     		uxth	r3, r3
 4381 002a 0848     		ldr	r0, .L394+8
 4382 002c 0380     		strh	r3, [r0]
 125:Src/6502.c    ****         penaltyaddr = 1;
 4383              		.loc 1 125 0
 4384 002e 9343     		bics	r3, r2
 4385 0030 9942     		cmp	r1, r3
 4386 0032 02D0     		beq	.L393
 126:Src/6502.c    ****     }
 4387              		.loc 1 126 0
 4388 0034 FE3A     		subs	r2, r2, #254
 4389 0036 064B     		ldr	r3, .L394+12
 4390 0038 1A70     		strb	r2, [r3]
 4391              	.L393:
ARM GAS  /tmp/ccjHcktl.s 			page 94


 129:Src/6502.c    **** }
 4392              		.loc 1 129 0
 4393 003a 024A     		ldr	r2, .L394
 4394 003c 1388     		ldrh	r3, [r2]
 4395 003e 0233     		adds	r3, r3, #2
 4396 0040 1380     		strh	r3, [r2]
 130:Src/6502.c    **** 
 4397              		.loc 1 130 0
 4398              		@ sp needed
 4399 0042 70BD     		pop	{r4, r5, r6, pc}
 4400              	.L395:
 4401              		.align	2
 4402              	.L394:
 4403 0044 00000000 		.word	pc
 4404 0048 00000000 		.word	y
 4405 004c 00000000 		.word	ea
 4406 0050 00000000 		.word	penaltyaddr
 4407              		.cfi_endproc
 4408              	.LFE49:
 4410              		.section	.text.zpx,"ax",%progbits
 4411              		.align	1
 4412              		.syntax unified
 4413              		.code	16
 4414              		.thumb_func
 4415              		.fpu softvfp
 4417              	zpx:
 4418              	.LFB44:
  88:Src/6502.c    ****     ea = ((uint16_t)read6502((uint16_t)pc++) + (uint16_t)x) & 0xFF; //zero-page wraparound
 4419              		.loc 1 88 0
 4420              		.cfi_startproc
 4421              		@ args = 0, pretend = 0, frame = 0
 4422              		@ frame_needed = 0, uses_anonymous_args = 0
 4423 0000 10B5     		push	{r4, lr}
 4424              	.LCFI43:
 4425              		.cfi_def_cfa_offset 8
 4426              		.cfi_offset 4, -8
 4427              		.cfi_offset 14, -4
  89:Src/6502.c    **** }
 4428              		.loc 1 89 0
 4429 0002 064B     		ldr	r3, .L397
 4430 0004 1888     		ldrh	r0, [r3]
 4431 0006 421C     		adds	r2, r0, #1
 4432 0008 1A80     		strh	r2, [r3]
 4433 000a FFF7FEFF 		bl	read6502
 4434              	.LVL63:
 4435 000e 044B     		ldr	r3, .L397+4
 4436 0010 1B78     		ldrb	r3, [r3]
 4437 0012 C018     		adds	r0, r0, r3
 4438 0014 C0B2     		uxtb	r0, r0
 4439 0016 034B     		ldr	r3, .L397+8
 4440 0018 1880     		strh	r0, [r3]
  90:Src/6502.c    **** 
 4441              		.loc 1 90 0
 4442              		@ sp needed
 4443 001a 10BD     		pop	{r4, pc}
 4444              	.L398:
 4445              		.align	2
ARM GAS  /tmp/ccjHcktl.s 			page 95


 4446              	.L397:
 4447 001c 00000000 		.word	pc
 4448 0020 00000000 		.word	x
 4449 0024 00000000 		.word	ea
 4450              		.cfi_endproc
 4451              	.LFE44:
 4453              		.section	.text.indy,"ax",%progbits
 4454              		.align	1
 4455              		.syntax unified
 4456              		.code	16
 4457              		.thumb_func
 4458              		.fpu softvfp
 4460              	indy:
 4461              	.LFB52:
 146:Src/6502.c    ****     uint16_t eahelp, eahelp2, startpage;
 4462              		.loc 1 146 0
 4463              		.cfi_startproc
 4464              		@ args = 0, pretend = 0, frame = 0
 4465              		@ frame_needed = 0, uses_anonymous_args = 0
 4466 0000 70B5     		push	{r4, r5, r6, lr}
 4467              	.LCFI44:
 4468              		.cfi_def_cfa_offset 16
 4469              		.cfi_offset 4, -16
 4470              		.cfi_offset 5, -12
 4471              		.cfi_offset 6, -8
 4472              		.cfi_offset 14, -4
 148:Src/6502.c    ****     eahelp2 = (eahelp & 0xFF00) | ((eahelp + 1) & 0x00FF); //zero-page wraparound
 4473              		.loc 1 148 0
 4474 0002 144B     		ldr	r3, .L401
 4475 0004 1888     		ldrh	r0, [r3]
 4476 0006 421C     		adds	r2, r0, #1
 4477 0008 1A80     		strh	r2, [r3]
 4478 000a FFF7FEFF 		bl	read6502
 4479              	.LVL64:
 4480 000e 0300     		movs	r3, r0
 4481 0010 80B2     		uxth	r0, r0
 4482              	.LVL65:
 149:Src/6502.c    ****     ea = (uint16_t)read6502(eahelp) | ((uint16_t)read6502(eahelp2) << 8);
 4483              		.loc 1 149 0
 4484 0012 FF25     		movs	r5, #255
 4485 0014 AB43     		bics	r3, r5
 4486 0016 1EB2     		sxth	r6, r3
 4487 0018 421C     		adds	r2, r0, #1
 4488 001a 12B2     		sxth	r2, r2
 4489 001c FF23     		movs	r3, #255
 4490 001e 1340     		ands	r3, r2
 4491 0020 1E43     		orrs	r6, r3
 4492 0022 B6B2     		uxth	r6, r6
 4493              	.LVL66:
 150:Src/6502.c    ****     startpage = ea & 0xFF00;
 4494              		.loc 1 150 0
 4495 0024 FFF7FEFF 		bl	read6502
 4496              	.LVL67:
 4497 0028 04B2     		sxth	r4, r0
 4498 002a 3000     		movs	r0, r6
 4499 002c FFF7FEFF 		bl	read6502
 4500              	.LVL68:
ARM GAS  /tmp/ccjHcktl.s 			page 96


 4501 0030 0302     		lsls	r3, r0, #8
 4502 0032 2343     		orrs	r3, r4
 4503 0034 9BB2     		uxth	r3, r3
 151:Src/6502.c    ****     ea += (uint16_t)y;
 4504              		.loc 1 151 0
 4505 0036 1A00     		movs	r2, r3
 4506 0038 AA43     		bics	r2, r5
 4507              	.LVL69:
 152:Src/6502.c    **** 
 4508              		.loc 1 152 0
 4509 003a 0749     		ldr	r1, .L401+4
 4510 003c 0878     		ldrb	r0, [r1]
 4511 003e 1B18     		adds	r3, r3, r0
 4512 0040 9BB2     		uxth	r3, r3
 4513 0042 0649     		ldr	r1, .L401+8
 4514 0044 0B80     		strh	r3, [r1]
 154:Src/6502.c    ****         penaltyaddr = 1;
 4515              		.loc 1 154 0
 4516 0046 AB43     		bics	r3, r5
 4517 0048 9342     		cmp	r3, r2
 4518 004a 02D0     		beq	.L399
 155:Src/6502.c    ****     }
 4519              		.loc 1 155 0
 4520 004c 0122     		movs	r2, #1
 4521              	.LVL70:
 4522 004e 044B     		ldr	r3, .L401+12
 4523 0050 1A70     		strb	r2, [r3]
 4524              	.L399:
 157:Src/6502.c    **** 
 4525              		.loc 1 157 0
 4526              		@ sp needed
 4527              	.LVL71:
 4528 0052 70BD     		pop	{r4, r5, r6, pc}
 4529              	.L402:
 4530              		.align	2
 4531              	.L401:
 4532 0054 00000000 		.word	pc
 4533 0058 00000000 		.word	y
 4534 005c 00000000 		.word	ea
 4535 0060 00000000 		.word	penaltyaddr
 4536              		.cfi_endproc
 4537              	.LFE52:
 4539              		.section	.text.rel,"ax",%progbits
 4540              		.align	1
 4541              		.syntax unified
 4542              		.code	16
 4543              		.thumb_func
 4544              		.fpu softvfp
 4546              	rel:
 4547              	.LFB46:
  96:Src/6502.c    ****     reladdr = (uint16_t)read6502(pc++);
 4548              		.loc 1 96 0
 4549              		.cfi_startproc
 4550              		@ args = 0, pretend = 0, frame = 0
 4551              		@ frame_needed = 0, uses_anonymous_args = 0
 4552 0000 10B5     		push	{r4, lr}
 4553              	.LCFI45:
ARM GAS  /tmp/ccjHcktl.s 			page 97


 4554              		.cfi_def_cfa_offset 8
 4555              		.cfi_offset 4, -8
 4556              		.cfi_offset 14, -4
  97:Src/6502.c    ****     if (reladdr & 0x80) reladdr |= 0xFF00;
 4557              		.loc 1 97 0
 4558 0002 084B     		ldr	r3, .L405
 4559 0004 1888     		ldrh	r0, [r3]
 4560 0006 421C     		adds	r2, r0, #1
 4561 0008 1A80     		strh	r2, [r3]
 4562 000a FFF7FEFF 		bl	read6502
 4563              	.LVL72:
 4564 000e 80B2     		uxth	r0, r0
 4565 0010 054B     		ldr	r3, .L405+4
 4566 0012 1880     		strh	r0, [r3]
  98:Src/6502.c    **** }
 4567              		.loc 1 98 0
 4568 0014 0306     		lsls	r3, r0, #24
 4569 0016 03D5     		bpl	.L403
  98:Src/6502.c    **** }
 4570              		.loc 1 98 0 is_stmt 0 discriminator 1
 4571 0018 044B     		ldr	r3, .L405+8
 4572 001a 1843     		orrs	r0, r3
 4573 001c 024B     		ldr	r3, .L405+4
 4574 001e 1880     		strh	r0, [r3]
 4575              	.L403:
  99:Src/6502.c    **** 
 4576              		.loc 1 99 0 is_stmt 1
 4577              		@ sp needed
 4578 0020 10BD     		pop	{r4, pc}
 4579              	.L406:
 4580 0022 C046     		.align	2
 4581              	.L405:
 4582 0024 00000000 		.word	pc
 4583 0028 00000000 		.word	reladdr
 4584 002c 00FFFFFF 		.word	-256
 4585              		.cfi_endproc
 4586              	.LFE46:
 4588              		.section	.text.abso,"ax",%progbits
 4589              		.align	1
 4590              		.syntax unified
 4591              		.code	16
 4592              		.thumb_func
 4593              		.fpu softvfp
 4595              	abso:
 4596              	.LFB47:
 101:Src/6502.c    ****     ea = (uint16_t)read6502(pc) | ((uint16_t)read6502(pc+1) << 8);
 4597              		.loc 1 101 0
 4598              		.cfi_startproc
 4599              		@ args = 0, pretend = 0, frame = 0
 4600              		@ frame_needed = 0, uses_anonymous_args = 0
 4601 0000 70B5     		push	{r4, r5, r6, lr}
 4602              	.LCFI46:
 4603              		.cfi_def_cfa_offset 16
 4604              		.cfi_offset 4, -16
 4605              		.cfi_offset 5, -12
 4606              		.cfi_offset 6, -8
 4607              		.cfi_offset 14, -4
ARM GAS  /tmp/ccjHcktl.s 			page 98


 102:Src/6502.c    ****     pc += 2;
 4608              		.loc 1 102 0
 4609 0002 094D     		ldr	r5, .L408
 4610 0004 2888     		ldrh	r0, [r5]
 4611 0006 FFF7FEFF 		bl	read6502
 4612              	.LVL73:
 4613 000a 04B2     		sxth	r4, r0
 4614 000c 2888     		ldrh	r0, [r5]
 4615 000e 0130     		adds	r0, r0, #1
 4616 0010 80B2     		uxth	r0, r0
 4617 0012 FFF7FEFF 		bl	read6502
 4618              	.LVL74:
 4619 0016 0002     		lsls	r0, r0, #8
 4620 0018 0443     		orrs	r4, r0
 4621 001a 044B     		ldr	r3, .L408+4
 4622 001c 1C80     		strh	r4, [r3]
 103:Src/6502.c    **** }
 4623              		.loc 1 103 0
 4624 001e 2B88     		ldrh	r3, [r5]
 4625 0020 0233     		adds	r3, r3, #2
 4626 0022 2B80     		strh	r3, [r5]
 104:Src/6502.c    **** 
 4627              		.loc 1 104 0
 4628              		@ sp needed
 4629 0024 70BD     		pop	{r4, r5, r6, pc}
 4630              	.L409:
 4631 0026 C046     		.align	2
 4632              	.L408:
 4633 0028 00000000 		.word	pc
 4634 002c 00000000 		.word	ea
 4635              		.cfi_endproc
 4636              	.LFE47:
 4638              		.section	.text.zp,"ax",%progbits
 4639              		.align	1
 4640              		.syntax unified
 4641              		.code	16
 4642              		.thumb_func
 4643              		.fpu softvfp
 4645              	zp:
 4646              	.LFB43:
  84:Src/6502.c    ****     ea = (uint16_t)read6502((uint16_t)pc++);
 4647              		.loc 1 84 0
 4648              		.cfi_startproc
 4649              		@ args = 0, pretend = 0, frame = 0
 4650              		@ frame_needed = 0, uses_anonymous_args = 0
 4651 0000 10B5     		push	{r4, lr}
 4652              	.LCFI47:
 4653              		.cfi_def_cfa_offset 8
 4654              		.cfi_offset 4, -8
 4655              		.cfi_offset 14, -4
  85:Src/6502.c    **** }
 4656              		.loc 1 85 0
 4657 0002 044B     		ldr	r3, .L411
 4658 0004 1888     		ldrh	r0, [r3]
 4659 0006 421C     		adds	r2, r0, #1
 4660 0008 1A80     		strh	r2, [r3]
 4661 000a FFF7FEFF 		bl	read6502
ARM GAS  /tmp/ccjHcktl.s 			page 99


 4662              	.LVL75:
 4663 000e 024B     		ldr	r3, .L411+4
 4664 0010 1880     		strh	r0, [r3]
  86:Src/6502.c    **** 
 4665              		.loc 1 86 0
 4666              		@ sp needed
 4667 0012 10BD     		pop	{r4, pc}
 4668              	.L412:
 4669              		.align	2
 4670              	.L411:
 4671 0014 00000000 		.word	pc
 4672 0018 00000000 		.word	ea
 4673              		.cfi_endproc
 4674              	.LFE43:
 4676              		.section	.text.indx,"ax",%progbits
 4677              		.align	1
 4678              		.syntax unified
 4679              		.code	16
 4680              		.thumb_func
 4681              		.fpu softvfp
 4683              	indx:
 4684              	.LFB51:
 140:Src/6502.c    ****     uint16_t eahelp;
 4685              		.loc 1 140 0
 4686              		.cfi_startproc
 4687              		@ args = 0, pretend = 0, frame = 0
 4688              		@ frame_needed = 0, uses_anonymous_args = 0
 4689 0000 70B5     		push	{r4, r5, r6, lr}
 4690              	.LCFI48:
 4691              		.cfi_def_cfa_offset 16
 4692              		.cfi_offset 4, -16
 4693              		.cfi_offset 5, -12
 4694              		.cfi_offset 6, -8
 4695              		.cfi_offset 14, -4
 142:Src/6502.c    ****     ea = (uint16_t)read6502(eahelp & 0x00FF) | ((uint16_t)read6502((eahelp+1) & 0x00FF) << 8);
 4696              		.loc 1 142 0
 4697 0002 0C4B     		ldr	r3, .L414
 4698 0004 1888     		ldrh	r0, [r3]
 4699 0006 421C     		adds	r2, r0, #1
 4700 0008 1A80     		strh	r2, [r3]
 4701 000a FFF7FEFF 		bl	read6502
 4702              	.LVL76:
 4703 000e 0A4B     		ldr	r3, .L414+4
 4704 0010 1C78     		ldrb	r4, [r3]
 4705 0012 0419     		adds	r4, r0, r4
 4706 0014 E4B2     		uxtb	r4, r4
 4707              	.LVL77:
 143:Src/6502.c    **** }
 4708              		.loc 1 143 0
 4709 0016 2000     		movs	r0, r4
 4710 0018 FFF7FEFF 		bl	read6502
 4711              	.LVL78:
 4712 001c 05B2     		sxth	r5, r0
 4713 001e 0134     		adds	r4, r4, #1
 4714              	.LVL79:
 4715 0020 FF20     		movs	r0, #255
 4716 0022 2040     		ands	r0, r4
ARM GAS  /tmp/ccjHcktl.s 			page 100


 4717 0024 FFF7FEFF 		bl	read6502
 4718              	.LVL80:
 4719 0028 0002     		lsls	r0, r0, #8
 4720 002a 0543     		orrs	r5, r0
 4721 002c 034B     		ldr	r3, .L414+8
 4722 002e 1D80     		strh	r5, [r3]
 144:Src/6502.c    **** 
 4723              		.loc 1 144 0
 4724              		@ sp needed
 4725              	.LVL81:
 4726 0030 70BD     		pop	{r4, r5, r6, pc}
 4727              	.L415:
 4728 0032 C046     		.align	2
 4729              	.L414:
 4730 0034 00000000 		.word	pc
 4731 0038 00000000 		.word	x
 4732 003c 00000000 		.word	ea
 4733              		.cfi_endproc
 4734              	.LFE51:
 4736              		.section	.text.push16,"ax",%progbits
 4737              		.align	1
 4738              		.global	push16
 4739              		.syntax unified
 4740              		.code	16
 4741              		.thumb_func
 4742              		.fpu softvfp
 4744              	push16:
 4745              	.LFB35:
  38:Src/6502.c    ****     write6502(BASE_STACK + sp, (pushval >> 8) & 0xFF);
 4746              		.loc 1 38 0
 4747              		.cfi_startproc
 4748              		@ args = 0, pretend = 0, frame = 0
 4749              		@ frame_needed = 0, uses_anonymous_args = 0
 4750              	.LVL82:
 4751 0000 70B5     		push	{r4, r5, r6, lr}
 4752              	.LCFI49:
 4753              		.cfi_def_cfa_offset 16
 4754              		.cfi_offset 4, -16
 4755              		.cfi_offset 5, -12
 4756              		.cfi_offset 6, -8
 4757              		.cfi_offset 14, -4
 4758 0002 0400     		movs	r4, r0
  39:Src/6502.c    ****     write6502(BASE_STACK + ((sp - 1) & 0xFF), pushval & 0xFF);
 4759              		.loc 1 39 0
 4760 0004 010A     		lsrs	r1, r0, #8
 4761 0006 094D     		ldr	r5, .L417
 4762 0008 2878     		ldrb	r0, [r5]
 4763              	.LVL83:
 4764 000a 0130     		adds	r0, r0, #1
 4765 000c FF30     		adds	r0, r0, #255
 4766 000e FFF7FEFF 		bl	write6502
 4767              	.LVL84:
  40:Src/6502.c    ****     sp -= 2;
 4768              		.loc 1 40 0
 4769 0012 2878     		ldrb	r0, [r5]
 4770 0014 0138     		subs	r0, r0, #1
 4771 0016 FF23     		movs	r3, #255
ARM GAS  /tmp/ccjHcktl.s 			page 101


 4772 0018 1840     		ands	r0, r3
 4773 001a E1B2     		uxtb	r1, r4
 4774 001c 0130     		adds	r0, r0, #1
 4775 001e FF30     		adds	r0, r0, #255
 4776 0020 FFF7FEFF 		bl	write6502
 4777              	.LVL85:
  41:Src/6502.c    **** }
 4778              		.loc 1 41 0
 4779 0024 2B78     		ldrb	r3, [r5]
 4780 0026 023B     		subs	r3, r3, #2
 4781 0028 2B70     		strb	r3, [r5]
  42:Src/6502.c    **** 
 4782              		.loc 1 42 0
 4783              		@ sp needed
 4784 002a 70BD     		pop	{r4, r5, r6, pc}
 4785              	.L418:
 4786              		.align	2
 4787              	.L417:
 4788 002c 00000000 		.word	sp
 4789              		.cfi_endproc
 4790              	.LFE35:
 4792              		.section	.text.jsr,"ax",%progbits
 4793              		.align	1
 4794              		.syntax unified
 4795              		.code	16
 4796              		.thumb_func
 4797              		.fpu softvfp
 4799              	jsr:
 4800              	.LFB84:
 427:Src/6502.c    ****     push16(pc - 1);
 4801              		.loc 1 427 0
 4802              		.cfi_startproc
 4803              		@ args = 0, pretend = 0, frame = 0
 4804              		@ frame_needed = 0, uses_anonymous_args = 0
 4805 0000 10B5     		push	{r4, lr}
 4806              	.LCFI50:
 4807              		.cfi_def_cfa_offset 8
 4808              		.cfi_offset 4, -8
 4809              		.cfi_offset 14, -4
 428:Src/6502.c    ****     pc = ea;
 4810              		.loc 1 428 0
 4811 0002 054C     		ldr	r4, .L420
 4812 0004 2088     		ldrh	r0, [r4]
 4813 0006 0138     		subs	r0, r0, #1
 4814 0008 80B2     		uxth	r0, r0
 4815 000a FFF7FEFF 		bl	push16
 4816              	.LVL86:
 429:Src/6502.c    **** }
 4817              		.loc 1 429 0
 4818 000e 034B     		ldr	r3, .L420+4
 4819 0010 1B88     		ldrh	r3, [r3]
 4820 0012 2380     		strh	r3, [r4]
 430:Src/6502.c    **** 
 4821              		.loc 1 430 0
 4822              		@ sp needed
 4823 0014 10BD     		pop	{r4, pc}
 4824              	.L421:
ARM GAS  /tmp/ccjHcktl.s 			page 102


 4825 0016 C046     		.align	2
 4826              	.L420:
 4827 0018 00000000 		.word	pc
 4828 001c 00000000 		.word	ea
 4829              		.cfi_endproc
 4830              	.LFE84:
 4832              		.section	.text.push8,"ax",%progbits
 4833              		.align	1
 4834              		.global	push8
 4835              		.syntax unified
 4836              		.code	16
 4837              		.thumb_func
 4838              		.fpu softvfp
 4840              	push8:
 4841              	.LFB36:
  44:Src/6502.c    ****     write6502(BASE_STACK + sp--, pushval);
 4842              		.loc 1 44 0
 4843              		.cfi_startproc
 4844              		@ args = 0, pretend = 0, frame = 0
 4845              		@ frame_needed = 0, uses_anonymous_args = 0
 4846              	.LVL87:
 4847 0000 10B5     		push	{r4, lr}
 4848              	.LCFI51:
 4849              		.cfi_def_cfa_offset 8
 4850              		.cfi_offset 4, -8
 4851              		.cfi_offset 14, -4
 4852 0002 0100     		movs	r1, r0
  45:Src/6502.c    **** }
 4853              		.loc 1 45 0
 4854 0004 044A     		ldr	r2, .L423
 4855 0006 1378     		ldrb	r3, [r2]
 4856 0008 581E     		subs	r0, r3, #1
 4857              	.LVL88:
 4858 000a 1070     		strb	r0, [r2]
 4859 000c 581C     		adds	r0, r3, #1
 4860 000e FF30     		adds	r0, r0, #255
 4861 0010 FFF7FEFF 		bl	write6502
 4862              	.LVL89:
  46:Src/6502.c    **** 
 4863              		.loc 1 46 0
 4864              		@ sp needed
 4865 0014 10BD     		pop	{r4, pc}
 4866              	.L424:
 4867 0016 C046     		.align	2
 4868              	.L423:
 4869 0018 00000000 		.word	sp
 4870              		.cfi_endproc
 4871              	.LFE36:
 4873              		.section	.text.pha,"ax",%progbits
 4874              		.align	1
 4875              		.syntax unified
 4876              		.code	16
 4877              		.thumb_func
 4878              		.fpu softvfp
 4880              	pha:
 4881              	.LFB91:
 495:Src/6502.c    ****     push8(a);
ARM GAS  /tmp/ccjHcktl.s 			page 103


 4882              		.loc 1 495 0
 4883              		.cfi_startproc
 4884              		@ args = 0, pretend = 0, frame = 0
 4885              		@ frame_needed = 0, uses_anonymous_args = 0
 4886 0000 10B5     		push	{r4, lr}
 4887              	.LCFI52:
 4888              		.cfi_def_cfa_offset 8
 4889              		.cfi_offset 4, -8
 4890              		.cfi_offset 14, -4
 496:Src/6502.c    **** }
 4891              		.loc 1 496 0
 4892 0002 024B     		ldr	r3, .L426
 4893 0004 1878     		ldrb	r0, [r3]
 4894 0006 FFF7FEFF 		bl	push8
 4895              	.LVL90:
 497:Src/6502.c    **** 
 4896              		.loc 1 497 0
 4897              		@ sp needed
 4898 000a 10BD     		pop	{r4, pc}
 4899              	.L427:
 4900              		.align	2
 4901              	.L426:
 4902 000c 00000000 		.word	a
 4903              		.cfi_endproc
 4904              	.LFE91:
 4906              		.section	.text.php,"ax",%progbits
 4907              		.align	1
 4908              		.syntax unified
 4909              		.code	16
 4910              		.thumb_func
 4911              		.fpu softvfp
 4913              	php:
 4914              	.LFB92:
 499:Src/6502.c    ****     push8(status | FLAG_BREAK);
 4915              		.loc 1 499 0
 4916              		.cfi_startproc
 4917              		@ args = 0, pretend = 0, frame = 0
 4918              		@ frame_needed = 0, uses_anonymous_args = 0
 4919 0000 10B5     		push	{r4, lr}
 4920              	.LCFI53:
 4921              		.cfi_def_cfa_offset 8
 4922              		.cfi_offset 4, -8
 4923              		.cfi_offset 14, -4
 500:Src/6502.c    **** }
 4924              		.loc 1 500 0
 4925 0002 044B     		ldr	r3, .L429
 4926 0004 1878     		ldrb	r0, [r3]
 4927 0006 1023     		movs	r3, #16
 4928 0008 1843     		orrs	r0, r3
 4929 000a C0B2     		uxtb	r0, r0
 4930 000c FFF7FEFF 		bl	push8
 4931              	.LVL91:
 501:Src/6502.c    **** 
 4932              		.loc 1 501 0
 4933              		@ sp needed
 4934 0010 10BD     		pop	{r4, pc}
 4935              	.L430:
ARM GAS  /tmp/ccjHcktl.s 			page 104


 4936 0012 C046     		.align	2
 4937              	.L429:
 4938 0014 00000000 		.word	status
 4939              		.cfi_endproc
 4940              	.LFE92:
 4942              		.section	.text.brk,"ax",%progbits
 4943              		.align	1
 4944              		.syntax unified
 4945              		.code	16
 4946              		.thumb_func
 4947              		.fpu softvfp
 4949              	brk:
 4950              	.LFB66:
 288:Src/6502.c    ****     pc++;
 4951              		.loc 1 288 0
 4952              		.cfi_startproc
 4953              		@ args = 0, pretend = 0, frame = 0
 4954              		@ frame_needed = 0, uses_anonymous_args = 0
 4955 0000 70B5     		push	{r4, r5, r6, lr}
 4956              	.LCFI54:
 4957              		.cfi_def_cfa_offset 16
 4958              		.cfi_offset 4, -16
 4959              		.cfi_offset 5, -12
 4960              		.cfi_offset 6, -8
 4961              		.cfi_offset 14, -4
 289:Src/6502.c    ****     push16(pc); //push next instruction address onto stack
 4962              		.loc 1 289 0
 4963 0002 0E4D     		ldr	r5, .L432
 4964 0004 2888     		ldrh	r0, [r5]
 4965 0006 0130     		adds	r0, r0, #1
 4966 0008 80B2     		uxth	r0, r0
 4967 000a 2880     		strh	r0, [r5]
 290:Src/6502.c    ****     push8(status | FLAG_BREAK); //push CPU status OR'd with break flag to stack
 4968              		.loc 1 290 0
 4969 000c FFF7FEFF 		bl	push16
 4970              	.LVL92:
 291:Src/6502.c    ****     setinterrupt(); //set interrupt flag
 4971              		.loc 1 291 0
 4972 0010 0B4C     		ldr	r4, .L432+4
 4973 0012 2078     		ldrb	r0, [r4]
 4974 0014 1023     		movs	r3, #16
 4975 0016 1843     		orrs	r0, r3
 4976 0018 C0B2     		uxtb	r0, r0
 4977 001a FFF7FEFF 		bl	push8
 4978              	.LVL93:
 292:Src/6502.c    ****     pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 4979              		.loc 1 292 0
 4980 001e 2378     		ldrb	r3, [r4]
 4981 0020 0422     		movs	r2, #4
 4982 0022 1343     		orrs	r3, r2
 4983 0024 2370     		strb	r3, [r4]
 293:Src/6502.c    **** }
 4984              		.loc 1 293 0
 4985 0026 0748     		ldr	r0, .L432+8
 4986 0028 FFF7FEFF 		bl	read6502
 4987              	.LVL94:
 4988 002c 04B2     		sxth	r4, r0
ARM GAS  /tmp/ccjHcktl.s 			page 105


 4989 002e 0648     		ldr	r0, .L432+12
 4990 0030 FFF7FEFF 		bl	read6502
 4991              	.LVL95:
 4992 0034 0002     		lsls	r0, r0, #8
 4993 0036 0443     		orrs	r4, r0
 4994 0038 2C80     		strh	r4, [r5]
 294:Src/6502.c    **** 
 4995              		.loc 1 294 0
 4996              		@ sp needed
 4997 003a 70BD     		pop	{r4, r5, r6, pc}
 4998              	.L433:
 4999              		.align	2
 5000              	.L432:
 5001 003c 00000000 		.word	pc
 5002 0040 00000000 		.word	status
 5003 0044 FEFF0000 		.word	65534
 5004 0048 FFFF0000 		.word	65535
 5005              		.cfi_endproc
 5006              	.LFE66:
 5008              		.section	.text.pull16,"ax",%progbits
 5009              		.align	1
 5010              		.global	pull16
 5011              		.syntax unified
 5012              		.code	16
 5013              		.thumb_func
 5014              		.fpu softvfp
 5016              	pull16:
 5017              	.LFB37:
  48:Src/6502.c    ****     uint16_t temp16;
 5018              		.loc 1 48 0
 5019              		.cfi_startproc
 5020              		@ args = 0, pretend = 0, frame = 0
 5021              		@ frame_needed = 0, uses_anonymous_args = 0
 5022 0000 70B5     		push	{r4, r5, r6, lr}
 5023              	.LCFI55:
 5024              		.cfi_def_cfa_offset 16
 5025              		.cfi_offset 4, -16
 5026              		.cfi_offset 5, -12
 5027              		.cfi_offset 6, -8
 5028              		.cfi_offset 14, -4
  50:Src/6502.c    ****     sp += 2;
 5029              		.loc 1 50 0
 5030 0002 0C4E     		ldr	r6, .L435
 5031 0004 3078     		ldrb	r0, [r6]
 5032 0006 0130     		adds	r0, r0, #1
 5033 0008 FF25     		movs	r5, #255
 5034 000a 2840     		ands	r0, r5
 5035 000c 0130     		adds	r0, r0, #1
 5036 000e FF30     		adds	r0, r0, #255
 5037 0010 FFF7FEFF 		bl	read6502
 5038              	.LVL96:
 5039 0014 04B2     		sxth	r4, r0
 5040 0016 3078     		ldrb	r0, [r6]
 5041 0018 0230     		adds	r0, r0, #2
 5042 001a 2840     		ands	r0, r5
 5043 001c 0130     		adds	r0, r0, #1
 5044 001e FF30     		adds	r0, r0, #255
ARM GAS  /tmp/ccjHcktl.s 			page 106


 5045 0020 FFF7FEFF 		bl	read6502
 5046              	.LVL97:
 5047 0024 0002     		lsls	r0, r0, #8
 5048 0026 2043     		orrs	r0, r4
 5049 0028 80B2     		uxth	r0, r0
 5050              	.LVL98:
  51:Src/6502.c    ****     return(temp16);
 5051              		.loc 1 51 0
 5052 002a 3378     		ldrb	r3, [r6]
 5053 002c 0233     		adds	r3, r3, #2
 5054 002e 3370     		strb	r3, [r6]
  53:Src/6502.c    **** 
 5055              		.loc 1 53 0
 5056              		@ sp needed
 5057 0030 70BD     		pop	{r4, r5, r6, pc}
 5058              	.L436:
 5059 0032 C046     		.align	2
 5060              	.L435:
 5061 0034 00000000 		.word	sp
 5062              		.cfi_endproc
 5063              	.LFE37:
 5065              		.section	.text.rts,"ax",%progbits
 5066              		.align	1
 5067              		.syntax unified
 5068              		.code	16
 5069              		.thumb_func
 5070              		.fpu softvfp
 5072              	rts:
 5073              	.LFB98:
 543:Src/6502.c    ****     value = pull16();
 5074              		.loc 1 543 0
 5075              		.cfi_startproc
 5076              		@ args = 0, pretend = 0, frame = 0
 5077              		@ frame_needed = 0, uses_anonymous_args = 0
 5078 0000 10B5     		push	{r4, lr}
 5079              	.LCFI56:
 5080              		.cfi_def_cfa_offset 8
 5081              		.cfi_offset 4, -8
 5082              		.cfi_offset 14, -4
 544:Src/6502.c    ****     pc = value + 1;
 5083              		.loc 1 544 0
 5084 0002 FFF7FEFF 		bl	pull16
 5085              	.LVL99:
 5086 0006 034B     		ldr	r3, .L438
 5087 0008 1880     		strh	r0, [r3]
 545:Src/6502.c    **** }
 5088              		.loc 1 545 0
 5089 000a 0130     		adds	r0, r0, #1
 5090 000c 024B     		ldr	r3, .L438+4
 5091 000e 1880     		strh	r0, [r3]
 546:Src/6502.c    **** 
 5092              		.loc 1 546 0
 5093              		@ sp needed
 5094 0010 10BD     		pop	{r4, pc}
 5095              	.L439:
 5096 0012 C046     		.align	2
 5097              	.L438:
ARM GAS  /tmp/ccjHcktl.s 			page 107


 5098 0014 00000000 		.word	value
 5099 0018 00000000 		.word	pc
 5100              		.cfi_endproc
 5101              	.LFE98:
 5103              		.section	.text.pull8,"ax",%progbits
 5104              		.align	1
 5105              		.global	pull8
 5106              		.syntax unified
 5107              		.code	16
 5108              		.thumb_func
 5109              		.fpu softvfp
 5111              	pull8:
 5112              	.LFB38:
  55:Src/6502.c    ****     return (read6502(BASE_STACK + ++sp));
 5113              		.loc 1 55 0
 5114              		.cfi_startproc
 5115              		@ args = 0, pretend = 0, frame = 0
 5116              		@ frame_needed = 0, uses_anonymous_args = 0
 5117 0000 10B5     		push	{r4, lr}
 5118              	.LCFI57:
 5119              		.cfi_def_cfa_offset 8
 5120              		.cfi_offset 4, -8
 5121              		.cfi_offset 14, -4
  56:Src/6502.c    **** }
 5122              		.loc 1 56 0
 5123 0002 054B     		ldr	r3, .L441
 5124 0004 1878     		ldrb	r0, [r3]
 5125 0006 0130     		adds	r0, r0, #1
 5126 0008 C0B2     		uxtb	r0, r0
 5127 000a 1870     		strb	r0, [r3]
 5128 000c 0130     		adds	r0, r0, #1
 5129 000e FF30     		adds	r0, r0, #255
 5130 0010 FFF7FEFF 		bl	read6502
 5131              	.LVL100:
  57:Src/6502.c    **** 
 5132              		.loc 1 57 0
 5133              		@ sp needed
 5134 0014 10BD     		pop	{r4, pc}
 5135              	.L442:
 5136 0016 C046     		.align	2
 5137              	.L441:
 5138 0018 00000000 		.word	sp
 5139              		.cfi_endproc
 5140              	.LFE38:
 5142              		.section	.text.pla,"ax",%progbits
 5143              		.align	1
 5144              		.syntax unified
 5145              		.code	16
 5146              		.thumb_func
 5147              		.fpu softvfp
 5149              	pla:
 5150              	.LFB93:
 503:Src/6502.c    ****     a = pull8();
 5151              		.loc 1 503 0
 5152              		.cfi_startproc
 5153              		@ args = 0, pretend = 0, frame = 0
 5154              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccjHcktl.s 			page 108


 5155 0000 10B5     		push	{r4, lr}
 5156              	.LCFI58:
 5157              		.cfi_def_cfa_offset 8
 5158              		.cfi_offset 4, -8
 5159              		.cfi_offset 14, -4
 504:Src/6502.c    ****    
 5160              		.loc 1 504 0
 5161 0002 FFF7FEFF 		bl	pull8
 5162              	.LVL101:
 5163 0006 0F4B     		ldr	r3, .L449
 5164 0008 1870     		strb	r0, [r3]
 506:Src/6502.c    ****     signcalc(a);
 5165              		.loc 1 506 0
 5166 000a 0028     		cmp	r0, #0
 5167 000c 0CD0     		beq	.L444
 506:Src/6502.c    ****     signcalc(a);
 5168              		.loc 1 506 0 is_stmt 0 discriminator 1
 5169 000e 0E4A     		ldr	r2, .L449+4
 5170 0010 1378     		ldrb	r3, [r2]
 5171 0012 0221     		movs	r1, #2
 5172 0014 8B43     		bics	r3, r1
 5173 0016 1370     		strb	r3, [r2]
 5174              	.L445:
 507:Src/6502.c    **** }
 5175              		.loc 1 507 0 is_stmt 1
 5176 0018 0306     		lsls	r3, r0, #24
 5177 001a 0BD4     		bmi	.L448
 507:Src/6502.c    **** }
 5178              		.loc 1 507 0 is_stmt 0 discriminator 2
 5179 001c 0A4A     		ldr	r2, .L449+4
 5180 001e 1178     		ldrb	r1, [r2]
 5181 0020 7F23     		movs	r3, #127
 5182 0022 0B40     		ands	r3, r1
 5183 0024 1370     		strb	r3, [r2]
 5184              	.L443:
 508:Src/6502.c    **** 
 5185              		.loc 1 508 0 is_stmt 1
 5186              		@ sp needed
 5187 0026 10BD     		pop	{r4, pc}
 5188              	.L444:
 506:Src/6502.c    ****     signcalc(a);
 5189              		.loc 1 506 0 discriminator 2
 5190 0028 074A     		ldr	r2, .L449+4
 5191 002a 1378     		ldrb	r3, [r2]
 5192 002c 0221     		movs	r1, #2
 5193 002e 0B43     		orrs	r3, r1
 5194 0030 1370     		strb	r3, [r2]
 5195 0032 F1E7     		b	.L445
 5196              	.L448:
 507:Src/6502.c    **** }
 5197              		.loc 1 507 0 discriminator 1
 5198 0034 044A     		ldr	r2, .L449+4
 5199 0036 1178     		ldrb	r1, [r2]
 5200 0038 8023     		movs	r3, #128
 5201 003a 5B42     		rsbs	r3, r3, #0
 5202 003c 0B43     		orrs	r3, r1
 5203 003e 1370     		strb	r3, [r2]
ARM GAS  /tmp/ccjHcktl.s 			page 109


 5204 0040 F1E7     		b	.L443
 5205              	.L450:
 5206 0042 C046     		.align	2
 5207              	.L449:
 5208 0044 00000000 		.word	a
 5209 0048 00000000 		.word	status
 5210              		.cfi_endproc
 5211              	.LFE93:
 5213              		.section	.text.rti,"ax",%progbits
 5214              		.align	1
 5215              		.syntax unified
 5216              		.code	16
 5217              		.thumb_func
 5218              		.fpu softvfp
 5220              	rti:
 5221              	.LFB97:
 537:Src/6502.c    ****     status = pull8();
 5222              		.loc 1 537 0
 5223              		.cfi_startproc
 5224              		@ args = 0, pretend = 0, frame = 0
 5225              		@ frame_needed = 0, uses_anonymous_args = 0
 5226 0000 10B5     		push	{r4, lr}
 5227              	.LCFI59:
 5228              		.cfi_def_cfa_offset 8
 5229              		.cfi_offset 4, -8
 5230              		.cfi_offset 14, -4
 538:Src/6502.c    ****     value = pull16();
 5231              		.loc 1 538 0
 5232 0002 FFF7FEFF 		bl	pull8
 5233              	.LVL102:
 5234 0006 044B     		ldr	r3, .L452
 5235 0008 1870     		strb	r0, [r3]
 539:Src/6502.c    ****     pc = value;
 5236              		.loc 1 539 0
 5237 000a FFF7FEFF 		bl	pull16
 5238              	.LVL103:
 5239 000e 034B     		ldr	r3, .L452+4
 5240 0010 1880     		strh	r0, [r3]
 540:Src/6502.c    **** }
 5241              		.loc 1 540 0
 5242 0012 034B     		ldr	r3, .L452+8
 5243 0014 1880     		strh	r0, [r3]
 541:Src/6502.c    **** 
 5244              		.loc 1 541 0
 5245              		@ sp needed
 5246 0016 10BD     		pop	{r4, pc}
 5247              	.L453:
 5248              		.align	2
 5249              	.L452:
 5250 0018 00000000 		.word	status
 5251 001c 00000000 		.word	value
 5252 0020 00000000 		.word	pc
 5253              		.cfi_endproc
 5254              	.LFE97:
 5256              		.section	.text.plp,"ax",%progbits
 5257              		.align	1
 5258              		.syntax unified
ARM GAS  /tmp/ccjHcktl.s 			page 110


 5259              		.code	16
 5260              		.thumb_func
 5261              		.fpu softvfp
 5263              	plp:
 5264              	.LFB94:
 510:Src/6502.c    ****     status = pull8() | FLAG_CONSTANT;
 5265              		.loc 1 510 0
 5266              		.cfi_startproc
 5267              		@ args = 0, pretend = 0, frame = 0
 5268              		@ frame_needed = 0, uses_anonymous_args = 0
 5269 0000 10B5     		push	{r4, lr}
 5270              	.LCFI60:
 5271              		.cfi_def_cfa_offset 8
 5272              		.cfi_offset 4, -8
 5273              		.cfi_offset 14, -4
 511:Src/6502.c    **** }
 5274              		.loc 1 511 0
 5275 0002 FFF7FEFF 		bl	pull8
 5276              	.LVL104:
 5277 0006 2023     		movs	r3, #32
 5278 0008 1843     		orrs	r0, r3
 5279 000a 014B     		ldr	r3, .L455
 5280 000c 1870     		strb	r0, [r3]
 512:Src/6502.c    **** 
 5281              		.loc 1 512 0
 5282              		@ sp needed
 5283 000e 10BD     		pop	{r4, pc}
 5284              	.L456:
 5285              		.align	2
 5286              	.L455:
 5287 0010 00000000 		.word	status
 5288              		.cfi_endproc
 5289              	.LFE94:
 5291              		.section	.text.reset6502,"ax",%progbits
 5292              		.align	1
 5293              		.global	reset6502
 5294              		.syntax unified
 5295              		.code	16
 5296              		.thumb_func
 5297              		.fpu softvfp
 5299              	reset6502:
 5300              	.LFB39:
  59:Src/6502.c    ****     pc = (uint16_t)read6502(0xFFFC) | ((uint16_t)read6502(0xFFFD) << 8);
 5301              		.loc 1 59 0
 5302              		.cfi_startproc
 5303              		@ args = 0, pretend = 0, frame = 0
 5304              		@ frame_needed = 0, uses_anonymous_args = 0
 5305 0000 10B5     		push	{r4, lr}
 5306              	.LCFI61:
 5307              		.cfi_def_cfa_offset 8
 5308              		.cfi_offset 4, -8
 5309              		.cfi_offset 14, -4
  60:Src/6502.c    ****     a = 0;
 5310              		.loc 1 60 0
 5311 0002 0D48     		ldr	r0, .L458
 5312 0004 FFF7FEFF 		bl	read6502
 5313              	.LVL105:
ARM GAS  /tmp/ccjHcktl.s 			page 111


 5314 0008 04B2     		sxth	r4, r0
 5315 000a 0C48     		ldr	r0, .L458+4
 5316 000c FFF7FEFF 		bl	read6502
 5317              	.LVL106:
 5318 0010 0002     		lsls	r0, r0, #8
 5319 0012 0443     		orrs	r4, r0
 5320 0014 0A4B     		ldr	r3, .L458+8
 5321 0016 1C80     		strh	r4, [r3]
  61:Src/6502.c    ****     x = 0;
 5322              		.loc 1 61 0
 5323 0018 0023     		movs	r3, #0
 5324 001a 0A4A     		ldr	r2, .L458+12
 5325 001c 1370     		strb	r3, [r2]
  62:Src/6502.c    ****     y = 0;
 5326              		.loc 1 62 0
 5327 001e 0A4A     		ldr	r2, .L458+16
 5328 0020 1370     		strb	r3, [r2]
  63:Src/6502.c    ****     sp = 0xFF;
 5329              		.loc 1 63 0
 5330 0022 0A4A     		ldr	r2, .L458+20
 5331 0024 1370     		strb	r3, [r2]
  64:Src/6502.c    ****     status |= FLAG_CONSTANT;
 5332              		.loc 1 64 0
 5333 0026 FF22     		movs	r2, #255
 5334 0028 094B     		ldr	r3, .L458+24
 5335 002a 1A70     		strb	r2, [r3]
  65:Src/6502.c    **** }
 5336              		.loc 1 65 0
 5337 002c 094A     		ldr	r2, .L458+28
 5338 002e 1378     		ldrb	r3, [r2]
 5339 0030 2021     		movs	r1, #32
 5340 0032 0B43     		orrs	r3, r1
 5341 0034 1370     		strb	r3, [r2]
  66:Src/6502.c    **** 
 5342              		.loc 1 66 0
 5343              		@ sp needed
 5344 0036 10BD     		pop	{r4, pc}
 5345              	.L459:
 5346              		.align	2
 5347              	.L458:
 5348 0038 FCFF0000 		.word	65532
 5349 003c FDFF0000 		.word	65533
 5350 0040 00000000 		.word	pc
 5351 0044 00000000 		.word	a
 5352 0048 00000000 		.word	x
 5353 004c 00000000 		.word	y
 5354 0050 00000000 		.word	sp
 5355 0054 00000000 		.word	status
 5356              		.cfi_endproc
 5357              	.LFE39:
 5359              		.section	.text.nmi6502,"ax",%progbits
 5360              		.align	1
 5361              		.global	nmi6502
 5362              		.syntax unified
 5363              		.code	16
 5364              		.thumb_func
 5365              		.fpu softvfp
ARM GAS  /tmp/ccjHcktl.s 			page 112


 5367              	nmi6502:
 5368              	.LFB120:
 690:Src/6502.c    **** #else
 691:Src/6502.c    ****     #define lax nop
 692:Src/6502.c    ****     #define sax nop
 693:Src/6502.c    ****     #define dcp nop
 694:Src/6502.c    ****     #define isb nop
 695:Src/6502.c    ****     #define slo nop
 696:Src/6502.c    ****     #define rla nop
 697:Src/6502.c    ****     #define sre nop
 698:Src/6502.c    ****     #define rra nop
 699:Src/6502.c    **** #endif
 700:Src/6502.c    **** 
 701:Src/6502.c    **** 
 702:Src/6502.c    **** static void (*addrtable[256])() = {
 703:Src/6502.c    **** /*        |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  A  |  B  |  C  |  D  |  E 
 704:Src/6502.c    **** /* 0 */     imp, indx,  imp, indx,   zp,   zp,   zp,   zp,  imp,  imm,  acc,  imm, abso, abso, abso
 705:Src/6502.c    **** /* 1 */     rel, indy,  imp, indy,  zpx,  zpx,  zpx,  zpx,  imp, absy,  imp, absy, absx, absx, absx
 706:Src/6502.c    **** /* 2 */    abso, indx,  imp, indx,   zp,   zp,   zp,   zp,  imp,  imm,  acc,  imm, abso, abso, abso
 707:Src/6502.c    **** /* 3 */     rel, indy,  imp, indy,  zpx,  zpx,  zpx,  zpx,  imp, absy,  imp, absy, absx, absx, absx
 708:Src/6502.c    **** /* 4 */     imp, indx,  imp, indx,   zp,   zp,   zp,   zp,  imp,  imm,  acc,  imm, abso, abso, abso
 709:Src/6502.c    **** /* 5 */     rel, indy,  imp, indy,  zpx,  zpx,  zpx,  zpx,  imp, absy,  imp, absy, absx, absx, absx
 710:Src/6502.c    **** /* 6 */     imp, indx,  imp, indx,   zp,   zp,   zp,   zp,  imp,  imm,  acc,  imm,  ind, abso, abso
 711:Src/6502.c    **** /* 7 */     rel, indy,  imp, indy,  zpx,  zpx,  zpx,  zpx,  imp, absy,  imp, absy, absx, absx, absx
 712:Src/6502.c    **** /* 8 */     imm, indx,  imm, indx,   zp,   zp,   zp,   zp,  imp,  imm,  imp,  imm, abso, abso, abso
 713:Src/6502.c    **** /* 9 */     rel, indy,  imp, indy,  zpx,  zpx,  zpy,  zpy,  imp, absy,  imp, absy, absx, absx, absy
 714:Src/6502.c    **** /* A */     imm, indx,  imm, indx,   zp,   zp,   zp,   zp,  imp,  imm,  imp,  imm, abso, abso, abso
 715:Src/6502.c    **** /* B */     rel, indy,  imp, indy,  zpx,  zpx,  zpy,  zpy,  imp, absy,  imp, absy, absx, absx, absy
 716:Src/6502.c    **** /* C */     imm, indx,  imm, indx,   zp,   zp,   zp,   zp,  imp,  imm,  imp,  imm, abso, abso, abso
 717:Src/6502.c    **** /* D */     rel, indy,  imp, indy,  zpx,  zpx,  zpx,  zpx,  imp, absy,  imp, absy, absx, absx, absx
 718:Src/6502.c    **** /* E */     imm, indx,  imm, indx,   zp,   zp,   zp,   zp,  imp,  imm,  imp,  imm, abso, abso, abso
 719:Src/6502.c    **** /* F */     rel, indy,  imp, indy,  zpx,  zpx,  zpx,  zpx,  imp, absy,  imp, absy, absx, absx, absx
 720:Src/6502.c    **** };
 721:Src/6502.c    **** 
 722:Src/6502.c    **** static void (*optable[256])() = {
 723:Src/6502.c    **** /*        |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  A  |  B  |  C  |  D  |  E 
 724:Src/6502.c    **** /* 0 */      brk,  ora,  nop,  slo,  nop,  ora,  asl,  slo,  php,  ora,  asl,  nop,  nop,  ora,  as
 725:Src/6502.c    **** /* 1 */      bpl,  ora,  nop,  slo,  nop,  ora,  asl,  slo,  clc,  ora,  nop,  slo,  nop,  ora,  as
 726:Src/6502.c    **** /* 2 */      jsr,  and,  nop,  rla,  bit,  and,  rol,  rla,  plp,  and,  rol,  nop,  bit,  and,  ro
 727:Src/6502.c    **** /* 3 */      bmi,  and,  nop,  rla,  nop,  and,  rol,  rla,  sec,  and,  nop,  rla,  nop,  and,  ro
 728:Src/6502.c    **** /* 4 */      rti,  eor,  nop,  sre,  nop,  eor,  lsr,  sre,  pha,  eor,  lsr,  nop,  jmp,  eor,  ls
 729:Src/6502.c    **** /* 5 */      bvc,  eor,  nop,  sre,  nop,  eor,  lsr,  sre,  cli,  eor,  nop,  sre,  nop,  eor,  ls
 730:Src/6502.c    **** /* 6 */      rts,  adc,  nop,  rra,  nop,  adc,  ror,  rra,  pla,  adc,  ror,  nop,  jmp,  adc,  ro
 731:Src/6502.c    **** /* 7 */      bvs,  adc,  nop,  rra,  nop,  adc,  ror,  rra,  sei,  adc,  nop,  rra,  nop,  adc,  ro
 732:Src/6502.c    **** /* 8 */      nop,  sta,  nop,  sax,  sty,  sta,  stx,  sax,  dey,  nop,  txa,  nop,  sty,  sta,  st
 733:Src/6502.c    **** /* 9 */      bcc,  sta,  nop,  nop,  sty,  sta,  stx,  sax,  tya,  sta,  txs,  nop,  nop,  sta,  no
 734:Src/6502.c    **** /* A */      ldy,  lda,  ldx,  lax,  ldy,  lda,  ldx,  lax,  tay,  lda,  tax,  nop,  ldy,  lda,  ld
 735:Src/6502.c    **** /* B */      bcs,  lda,  nop,  lax,  ldy,  lda,  ldx,  lax,  clv,  lda,  tsx,  lax,  ldy,  lda,  ld
 736:Src/6502.c    **** /* C */      cpy,  cmp,  nop,  dcp,  cpy,  cmp,  dec,  dcp,  iny,  cmp,  dex,  nop,  cpy,  cmp,  de
 737:Src/6502.c    **** /* D */      bne,  cmp,  nop,  dcp,  nop,  cmp,  dec,  dcp,  cld,  cmp,  nop,  dcp,  nop,  cmp,  de
 738:Src/6502.c    **** /* E */      cpx,  sbc,  nop,  isb,  cpx,  sbc,  inc,  isb,  inx,  sbc,  nop,  sbc,  cpx,  sbc,  in
 739:Src/6502.c    **** /* F */      beq,  sbc,  nop,  isb,  nop,  sbc,  inc,  isb,  sed,  sbc,  nop,  isb,  nop,  sbc,  in
 740:Src/6502.c    **** };
 741:Src/6502.c    **** 
 742:Src/6502.c    **** static const uint32_t ticktable[256] = {
 743:Src/6502.c    **** /*        |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  A  |  B  |  C  |  D  |  E 
 744:Src/6502.c    **** /* 0 */      7,    6,    2,    8,    3,    3,    5,    5,    3,    2,    2,    2,    4,    4,    6,
ARM GAS  /tmp/ccjHcktl.s 			page 113


 745:Src/6502.c    **** /* 1 */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,
 746:Src/6502.c    **** /* 2 */      6,    6,    2,    8,    3,    3,    5,    5,    4,    2,    2,    2,    4,    4,    6,
 747:Src/6502.c    **** /* 3 */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,
 748:Src/6502.c    **** /* 4 */      6,    6,    2,    8,    3,    3,    5,    5,    3,    2,    2,    2,    3,    4,    6,
 749:Src/6502.c    **** /* 5 */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,
 750:Src/6502.c    **** /* 6 */      6,    6,    2,    8,    3,    3,    5,    5,    4,    2,    2,    2,    5,    4,    6,
 751:Src/6502.c    **** /* 7 */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,
 752:Src/6502.c    **** /* 8 */      2,    6,    2,    6,    3,    3,    3,    3,    2,    2,    2,    2,    4,    4,    4,
 753:Src/6502.c    **** /* 9 */      2,    6,    2,    6,    4,    4,    4,    4,    2,    5,    2,    5,    5,    5,    5,
 754:Src/6502.c    **** /* A */      2,    6,    2,    6,    3,    3,    3,    3,    2,    2,    2,    2,    4,    4,    4,
 755:Src/6502.c    **** /* B */      2,    5,    2,    5,    4,    4,    4,    4,    2,    4,    2,    4,    4,    4,    4,
 756:Src/6502.c    **** /* C */      2,    6,    2,    8,    3,    3,    5,    5,    2,    2,    2,    2,    4,    4,    6,
 757:Src/6502.c    **** /* D */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,
 758:Src/6502.c    **** /* E */      2,    6,    2,    8,    3,    3,    5,    5,    2,    2,    2,    2,    4,    4,    6,
 759:Src/6502.c    **** /* F */      2,    5,    2,    8,    4,    4,    6,    6,    2,    4,    2,    7,    4,    4,    7,
 760:Src/6502.c    **** };
 761:Src/6502.c    **** 
 762:Src/6502.c    **** 
 763:Src/6502.c    **** void nmi6502() {
 5369              		.loc 1 763 0
 5370              		.cfi_startproc
 5371              		@ args = 0, pretend = 0, frame = 0
 5372              		@ frame_needed = 0, uses_anonymous_args = 0
 5373 0000 70B5     		push	{r4, r5, r6, lr}
 5374              	.LCFI62:
 5375              		.cfi_def_cfa_offset 16
 5376              		.cfi_offset 4, -16
 5377              		.cfi_offset 5, -12
 5378              		.cfi_offset 6, -8
 5379              		.cfi_offset 14, -4
 764:Src/6502.c    ****     push16(pc);
 5380              		.loc 1 764 0
 5381 0002 0B4D     		ldr	r5, .L461
 5382 0004 2888     		ldrh	r0, [r5]
 5383 0006 FFF7FEFF 		bl	push16
 5384              	.LVL107:
 765:Src/6502.c    ****     push8(status);
 5385              		.loc 1 765 0
 5386 000a 0A4C     		ldr	r4, .L461+4
 5387 000c 2078     		ldrb	r0, [r4]
 5388 000e FFF7FEFF 		bl	push8
 5389              	.LVL108:
 766:Src/6502.c    ****     status |= FLAG_INTERRUPT;
 5390              		.loc 1 766 0
 5391 0012 2378     		ldrb	r3, [r4]
 5392 0014 0422     		movs	r2, #4
 5393 0016 1343     		orrs	r3, r2
 5394 0018 2370     		strb	r3, [r4]
 767:Src/6502.c    ****     pc = (uint16_t)read6502(0xFFFA) | ((uint16_t)read6502(0xFFFB) << 8);
 5395              		.loc 1 767 0
 5396 001a 0748     		ldr	r0, .L461+8
 5397 001c FFF7FEFF 		bl	read6502
 5398              	.LVL109:
 5399 0020 04B2     		sxth	r4, r0
 5400 0022 0648     		ldr	r0, .L461+12
 5401 0024 FFF7FEFF 		bl	read6502
 5402              	.LVL110:
ARM GAS  /tmp/ccjHcktl.s 			page 114


 5403 0028 0002     		lsls	r0, r0, #8
 5404 002a 0443     		orrs	r4, r0
 5405 002c 2C80     		strh	r4, [r5]
 768:Src/6502.c    **** }
 5406              		.loc 1 768 0
 5407              		@ sp needed
 5408 002e 70BD     		pop	{r4, r5, r6, pc}
 5409              	.L462:
 5410              		.align	2
 5411              	.L461:
 5412 0030 00000000 		.word	pc
 5413 0034 00000000 		.word	status
 5414 0038 FAFF0000 		.word	65530
 5415 003c FBFF0000 		.word	65531
 5416              		.cfi_endproc
 5417              	.LFE120:
 5419              		.section	.text.irq6502,"ax",%progbits
 5420              		.align	1
 5421              		.global	irq6502
 5422              		.syntax unified
 5423              		.code	16
 5424              		.thumb_func
 5425              		.fpu softvfp
 5427              	irq6502:
 5428              	.LFB121:
 769:Src/6502.c    **** 
 770:Src/6502.c    **** void irq6502() {
 5429              		.loc 1 770 0
 5430              		.cfi_startproc
 5431              		@ args = 0, pretend = 0, frame = 0
 5432              		@ frame_needed = 0, uses_anonymous_args = 0
 5433 0000 70B5     		push	{r4, r5, r6, lr}
 5434              	.LCFI63:
 5435              		.cfi_def_cfa_offset 16
 5436              		.cfi_offset 4, -16
 5437              		.cfi_offset 5, -12
 5438              		.cfi_offset 6, -8
 5439              		.cfi_offset 14, -4
 771:Src/6502.c    **** 	if ((status & FLAG_INTERRUPT) == FLAG_INTERRUPT) return; //abort if interrupts are inhibited
 5440              		.loc 1 771 0
 5441 0002 0E4B     		ldr	r3, .L466
 5442 0004 1B78     		ldrb	r3, [r3]
 5443 0006 5B07     		lsls	r3, r3, #29
 5444 0008 00D5     		bpl	.L465
 5445              	.L463:
 772:Src/6502.c    ****     push16(pc);
 773:Src/6502.c    ****     push8(status);
 774:Src/6502.c    ****     status |= FLAG_INTERRUPT;
 775:Src/6502.c    ****     pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 776:Src/6502.c    **** }
 5446              		.loc 1 776 0
 5447              		@ sp needed
 5448 000a 70BD     		pop	{r4, r5, r6, pc}
 5449              	.L465:
 772:Src/6502.c    ****     push16(pc);
 5450              		.loc 1 772 0
 5451 000c 0C4D     		ldr	r5, .L466+4
ARM GAS  /tmp/ccjHcktl.s 			page 115


 5452 000e 2888     		ldrh	r0, [r5]
 5453 0010 FFF7FEFF 		bl	push16
 5454              	.LVL111:
 773:Src/6502.c    ****     status |= FLAG_INTERRUPT;
 5455              		.loc 1 773 0
 5456 0014 094C     		ldr	r4, .L466
 5457 0016 2078     		ldrb	r0, [r4]
 5458 0018 FFF7FEFF 		bl	push8
 5459              	.LVL112:
 774:Src/6502.c    ****     pc = (uint16_t)read6502(0xFFFE) | ((uint16_t)read6502(0xFFFF) << 8);
 5460              		.loc 1 774 0
 5461 001c 2378     		ldrb	r3, [r4]
 5462 001e 0422     		movs	r2, #4
 5463 0020 1343     		orrs	r3, r2
 5464 0022 2370     		strb	r3, [r4]
 775:Src/6502.c    **** }
 5465              		.loc 1 775 0
 5466 0024 0748     		ldr	r0, .L466+8
 5467 0026 FFF7FEFF 		bl	read6502
 5468              	.LVL113:
 5469 002a 04B2     		sxth	r4, r0
 5470 002c 0648     		ldr	r0, .L466+12
 5471 002e FFF7FEFF 		bl	read6502
 5472              	.LVL114:
 5473 0032 0002     		lsls	r0, r0, #8
 5474 0034 0443     		orrs	r4, r0
 5475 0036 2C80     		strh	r4, [r5]
 5476 0038 E7E7     		b	.L463
 5477              	.L467:
 5478 003a C046     		.align	2
 5479              	.L466:
 5480 003c 00000000 		.word	status
 5481 0040 00000000 		.word	pc
 5482 0044 FEFF0000 		.word	65534
 5483 0048 FFFF0000 		.word	65535
 5484              		.cfi_endproc
 5485              	.LFE121:
 5487              		.section	.text.exec6502,"ax",%progbits
 5488              		.align	1
 5489              		.global	exec6502
 5490              		.syntax unified
 5491              		.code	16
 5492              		.thumb_func
 5493              		.fpu softvfp
 5495              	exec6502:
 5496              	.LFB122:
 777:Src/6502.c    **** 
 778:Src/6502.c    **** uint8_t callexternal = 0;
 779:Src/6502.c    **** void (*loopexternal)();
 780:Src/6502.c    **** uint8_t showdump = 0;
 781:Src/6502.c    **** 
 782:Src/6502.c    **** uint64_t exec6502(uint64_t tickcount) {
 5497              		.loc 1 782 0
 5498              		.cfi_startproc
 5499              		@ args = 0, pretend = 0, frame = 8
 5500              		@ frame_needed = 0, uses_anonymous_args = 0
 5501              	.LVL115:
ARM GAS  /tmp/ccjHcktl.s 			page 116


 5502 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5503              	.LCFI64:
 5504              		.cfi_def_cfa_offset 20
 5505              		.cfi_offset 4, -20
 5506              		.cfi_offset 5, -16
 5507              		.cfi_offset 6, -12
 5508              		.cfi_offset 7, -8
 5509              		.cfi_offset 14, -4
 5510 0002 83B0     		sub	sp, sp, #12
 5511              	.LCFI65:
 5512              		.cfi_def_cfa_offset 32
 783:Src/6502.c    **** 	uint64_t startticks;
 784:Src/6502.c    ****     clockgoal6502 += tickcount;
 5513              		.loc 1 784 0
 5514 0004 324B     		ldr	r3, .L477
 5515 0006 1E68     		ldr	r6, [r3]
 5516 0008 5F68     		ldr	r7, [r3, #4]
 5517 000a 8019     		adds	r0, r0, r6
 5518 000c 7941     		adcs	r1, r1, r7
 5519              	.LVL116:
 5520 000e 1860     		str	r0, [r3]
 5521 0010 5960     		str	r1, [r3, #4]
 785:Src/6502.c    ****    
 786:Src/6502.c    **** 	startticks = clockticks6502;
 5522              		.loc 1 786 0
 5523 0012 304B     		ldr	r3, .L477+4
 5524 0014 1A68     		ldr	r2, [r3]
 5525 0016 5B68     		ldr	r3, [r3, #4]
 5526 0018 0092     		str	r2, [sp]
 5527 001a 0193     		str	r3, [sp, #4]
 5528              	.LVL117:
 787:Src/6502.c    ****     while (clockticks6502 < clockgoal6502) {
 5529              		.loc 1 787 0
 5530 001c 0CE0     		b	.L471
 5531              	.LVL118:
 5532              	.L470:
 788:Src/6502.c    ****         opcode = read6502(pc++);
 789:Src/6502.c    ****         status |= FLAG_CONSTANT;
 790:Src/6502.c    **** 
 791:Src/6502.c    ****         penaltyop = 0;
 792:Src/6502.c    ****         penaltyaddr = 0;
 793:Src/6502.c    **** 
 794:Src/6502.c    ****         (*addrtable[opcode])();
 795:Src/6502.c    ****         (*optable[opcode])();
 796:Src/6502.c    ****         clockticks6502 += ticktable[opcode];
 797:Src/6502.c    **** 		if (penaltyop && penaltyaddr) clockticks6502++;
 798:Src/6502.c    **** 
 799:Src/6502.c    ****         instructions++;
 5533              		.loc 1 799 0
 5534 001e 2E49     		ldr	r1, .L477+8
 5535 0020 0122     		movs	r2, #1
 5536 0022 0023     		movs	r3, #0
 5537 0024 0E68     		ldr	r6, [r1]
 5538 0026 4F68     		ldr	r7, [r1, #4]
 5539 0028 9219     		adds	r2, r2, r6
 5540 002a 7B41     		adcs	r3, r3, r7
 5541 002c 0A60     		str	r2, [r1]
ARM GAS  /tmp/ccjHcktl.s 			page 117


 5542 002e 4B60     		str	r3, [r1, #4]
 800:Src/6502.c    **** 
 801:Src/6502.c    ****         if (callexternal) (*loopexternal)();
 5543              		.loc 1 801 0
 5544 0030 2A4B     		ldr	r3, .L477+12
 5545 0032 1B78     		ldrb	r3, [r3]
 5546 0034 002B     		cmp	r3, #0
 5547 0036 3DD1     		bne	.L475
 5548              	.L471:
 787:Src/6502.c    ****         opcode = read6502(pc++);
 5549              		.loc 1 787 0
 5550 0038 264B     		ldr	r3, .L477+4
 5551 003a 1868     		ldr	r0, [r3]
 5552 003c 5968     		ldr	r1, [r3, #4]
 5553 003e 244B     		ldr	r3, .L477
 5554 0040 1A68     		ldr	r2, [r3]
 5555 0042 5B68     		ldr	r3, [r3, #4]
 5556 0044 8B42     		cmp	r3, r1
 5557 0046 39D9     		bls	.L476
 5558              	.L472:
 788:Src/6502.c    ****         opcode = read6502(pc++);
 5559              		.loc 1 788 0
 5560 0048 254B     		ldr	r3, .L477+16
 5561 004a 1888     		ldrh	r0, [r3]
 5562 004c 421C     		adds	r2, r0, #1
 5563 004e 1A80     		strh	r2, [r3]
 5564 0050 FFF7FEFF 		bl	read6502
 5565              	.LVL119:
 5566 0054 234F     		ldr	r7, .L477+20
 5567 0056 3870     		strb	r0, [r7]
 789:Src/6502.c    **** 
 5568              		.loc 1 789 0
 5569 0058 234A     		ldr	r2, .L477+24
 5570 005a 1378     		ldrb	r3, [r2]
 5571 005c 2021     		movs	r1, #32
 5572 005e 0B43     		orrs	r3, r1
 5573 0060 1370     		strb	r3, [r2]
 791:Src/6502.c    ****         penaltyaddr = 0;
 5574              		.loc 1 791 0
 5575 0062 224E     		ldr	r6, .L477+28
 5576 0064 0023     		movs	r3, #0
 5577 0066 3370     		strb	r3, [r6]
 792:Src/6502.c    **** 
 5578              		.loc 1 792 0
 5579 0068 214A     		ldr	r2, .L477+32
 5580 006a 1370     		strb	r3, [r2]
 794:Src/6502.c    ****         (*optable[opcode])();
 5581              		.loc 1 794 0
 5582 006c 8000     		lsls	r0, r0, #2
 5583 006e 214B     		ldr	r3, .L477+36
 5584 0070 C358     		ldr	r3, [r0, r3]
 5585 0072 9847     		blx	r3
 5586              	.LVL120:
 795:Src/6502.c    ****         clockticks6502 += ticktable[opcode];
 5587              		.loc 1 795 0
 5588 0074 3B78     		ldrb	r3, [r7]
 5589 0076 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccjHcktl.s 			page 118


 5590 0078 1F4A     		ldr	r2, .L477+40
 5591 007a 9B58     		ldr	r3, [r3, r2]
 5592 007c 9847     		blx	r3
 5593              	.LVL121:
 796:Src/6502.c    **** 		if (penaltyop && penaltyaddr) clockticks6502++;
 5594              		.loc 1 796 0
 5595 007e 3B78     		ldrb	r3, [r7]
 5596 0080 9B00     		lsls	r3, r3, #2
 5597 0082 1E4A     		ldr	r2, .L477+44
 5598 0084 D458     		ldr	r4, [r2, r3]
 5599 0086 0025     		movs	r5, #0
 5600 0088 1249     		ldr	r1, .L477+4
 5601 008a 0A68     		ldr	r2, [r1]
 5602 008c 4B68     		ldr	r3, [r1, #4]
 5603 008e 1219     		adds	r2, r2, r4
 5604 0090 6B41     		adcs	r3, r3, r5
 5605 0092 0A60     		str	r2, [r1]
 5606 0094 4B60     		str	r3, [r1, #4]
 797:Src/6502.c    **** 
 5607              		.loc 1 797 0
 5608 0096 3178     		ldrb	r1, [r6]
 5609 0098 0029     		cmp	r1, #0
 5610 009a C0D0     		beq	.L470
 797:Src/6502.c    **** 
 5611              		.loc 1 797 0 is_stmt 0 discriminator 1
 5612 009c 1449     		ldr	r1, .L477+32
 5613 009e 0978     		ldrb	r1, [r1]
 5614 00a0 0029     		cmp	r1, #0
 5615 00a2 BCD0     		beq	.L470
 797:Src/6502.c    **** 
 5616              		.loc 1 797 0 discriminator 2
 5617 00a4 0120     		movs	r0, #1
 5618 00a6 0021     		movs	r1, #0
 5619 00a8 1218     		adds	r2, r2, r0
 5620 00aa 4B41     		adcs	r3, r3, r1
 5621 00ac 0949     		ldr	r1, .L477+4
 5622 00ae 0A60     		str	r2, [r1]
 5623 00b0 4B60     		str	r3, [r1, #4]
 5624 00b2 B4E7     		b	.L470
 5625              	.L475:
 5626              		.loc 1 801 0 is_stmt 1 discriminator 1
 5627 00b4 124B     		ldr	r3, .L477+48
 5628 00b6 1B68     		ldr	r3, [r3]
 5629 00b8 9847     		blx	r3
 5630              	.LVL122:
 5631 00ba BDE7     		b	.L471
 5632              	.L476:
 787:Src/6502.c    ****         opcode = read6502(pc++);
 5633              		.loc 1 787 0
 5634 00bc 8B42     		cmp	r3, r1
 5635 00be 01D1     		bne	.L474
 5636 00c0 8242     		cmp	r2, r0
 5637 00c2 C1D8     		bhi	.L472
 5638              	.L474:
 802:Src/6502.c    ****     }
 803:Src/6502.c    **** 	
 804:Src/6502.c    **** 	return(clockticks6502 - startticks);
ARM GAS  /tmp/ccjHcktl.s 			page 119


 5639              		.loc 1 804 0
 5640 00c4 009B     		ldr	r3, [sp]
 5641 00c6 019C     		ldr	r4, [sp, #4]
 5642 00c8 C01A     		subs	r0, r0, r3
 5643 00ca A141     		sbcs	r1, r1, r4
 805:Src/6502.c    **** }
 5644              		.loc 1 805 0
 5645 00cc 03B0     		add	sp, sp, #12
 5646              	.LVL123:
 5647              		@ sp needed
 5648 00ce F0BD     		pop	{r4, r5, r6, r7, pc}
 5649              	.L478:
 5650              		.align	2
 5651              	.L477:
 5652 00d0 00000000 		.word	.LANCHOR2
 5653 00d4 00000000 		.word	.LANCHOR0
 5654 00d8 00000000 		.word	.LANCHOR5
 5655 00dc 00000000 		.word	.LANCHOR6
 5656 00e0 00000000 		.word	pc
 5657 00e4 00000000 		.word	opcode
 5658 00e8 00000000 		.word	status
 5659 00ec 00000000 		.word	penaltyop
 5660 00f0 00000000 		.word	penaltyaddr
 5661 00f4 00000000 		.word	.LANCHOR1
 5662 00f8 00000000 		.word	.LANCHOR3
 5663 00fc 00000000 		.word	.LANCHOR4
 5664 0100 00000000 		.word	loopexternal
 5665              		.cfi_endproc
 5666              	.LFE122:
 5668              		.section	.text.step6502,"ax",%progbits
 5669              		.align	1
 5670              		.global	step6502
 5671              		.syntax unified
 5672              		.code	16
 5673              		.thumb_func
 5674              		.fpu softvfp
 5676              	step6502:
 5677              	.LFB123:
 806:Src/6502.c    **** 
 807:Src/6502.c    **** void step6502() {
 5678              		.loc 1 807 0
 5679              		.cfi_startproc
 5680              		@ args = 0, pretend = 0, frame = 0
 5681              		@ frame_needed = 0, uses_anonymous_args = 0
 5682 0000 70B5     		push	{r4, r5, r6, lr}
 5683              	.LCFI66:
 5684              		.cfi_def_cfa_offset 16
 5685              		.cfi_offset 4, -16
 5686              		.cfi_offset 5, -12
 5687              		.cfi_offset 6, -8
 5688              		.cfi_offset 14, -4
 808:Src/6502.c    ****     opcode = read6502(pc++);
 5689              		.loc 1 808 0
 5690 0002 1E4B     		ldr	r3, .L482
 5691 0004 1888     		ldrh	r0, [r3]
 5692 0006 421C     		adds	r2, r0, #1
 5693 0008 1A80     		strh	r2, [r3]
ARM GAS  /tmp/ccjHcktl.s 			page 120


 5694 000a FFF7FEFF 		bl	read6502
 5695              	.LVL124:
 5696 000e 1C4C     		ldr	r4, .L482+4
 5697 0010 2070     		strb	r0, [r4]
 809:Src/6502.c    ****     status |= FLAG_CONSTANT;
 5698              		.loc 1 809 0
 5699 0012 1C4A     		ldr	r2, .L482+8
 5700 0014 1378     		ldrb	r3, [r2]
 5701 0016 2021     		movs	r1, #32
 5702 0018 0B43     		orrs	r3, r1
 5703 001a 1370     		strb	r3, [r2]
 810:Src/6502.c    **** 
 811:Src/6502.c    ****     penaltyop = 0;
 5704              		.loc 1 811 0
 5705 001c 0023     		movs	r3, #0
 5706 001e 1A4A     		ldr	r2, .L482+12
 5707 0020 1370     		strb	r3, [r2]
 812:Src/6502.c    ****     penaltyaddr = 0;
 5708              		.loc 1 812 0
 5709 0022 1A4A     		ldr	r2, .L482+16
 5710 0024 1370     		strb	r3, [r2]
 813:Src/6502.c    **** 
 814:Src/6502.c    ****     (*addrtable[opcode])();
 5711              		.loc 1 814 0
 5712 0026 8000     		lsls	r0, r0, #2
 5713 0028 194B     		ldr	r3, .L482+20
 5714 002a C358     		ldr	r3, [r0, r3]
 5715 002c 9847     		blx	r3
 5716              	.LVL125:
 815:Src/6502.c    ****     (*optable[opcode])();
 5717              		.loc 1 815 0
 5718 002e 2378     		ldrb	r3, [r4]
 5719 0030 9B00     		lsls	r3, r3, #2
 5720 0032 184A     		ldr	r2, .L482+24
 5721 0034 9B58     		ldr	r3, [r3, r2]
 5722 0036 9847     		blx	r3
 5723              	.LVL126:
 816:Src/6502.c    ****     clockticks6502 += ticktable[opcode];
 5724              		.loc 1 816 0
 5725 0038 2178     		ldrb	r1, [r4]
 5726 003a 8900     		lsls	r1, r1, #2
 5727 003c 1648     		ldr	r0, .L482+28
 5728 003e 4258     		ldr	r2, [r0, r1]
 5729 0040 0023     		movs	r3, #0
 5730 0042 1649     		ldr	r1, .L482+32
 5731 0044 0C68     		ldr	r4, [r1]
 5732 0046 4D68     		ldr	r5, [r1, #4]
 5733 0048 1219     		adds	r2, r2, r4
 5734 004a 6B41     		adcs	r3, r3, r5
 5735 004c 0A60     		str	r2, [r1]
 5736 004e 4B60     		str	r3, [r1, #4]
 817:Src/6502.c    ****     //if (penaltyop && penaltyaddr) clockticks6502++;
 818:Src/6502.c    ****     clockgoal6502 = clockticks6502;
 5737              		.loc 1 818 0
 5738 0050 1349     		ldr	r1, .L482+36
 5739 0052 0A60     		str	r2, [r1]
 5740 0054 4B60     		str	r3, [r1, #4]
ARM GAS  /tmp/ccjHcktl.s 			page 121


 819:Src/6502.c    **** 
 820:Src/6502.c    ****     instructions++;
 5741              		.loc 1 820 0
 5742 0056 1349     		ldr	r1, .L482+40
 5743 0058 0122     		movs	r2, #1
 5744 005a 0023     		movs	r3, #0
 5745 005c 0C68     		ldr	r4, [r1]
 5746 005e 4D68     		ldr	r5, [r1, #4]
 5747 0060 1219     		adds	r2, r2, r4
 5748 0062 6B41     		adcs	r3, r3, r5
 5749 0064 0A60     		str	r2, [r1]
 5750 0066 4B60     		str	r3, [r1, #4]
 821:Src/6502.c    **** 
 822:Src/6502.c    ****     if (callexternal) (*loopexternal)();
 5751              		.loc 1 822 0
 5752 0068 0F4B     		ldr	r3, .L482+44
 5753 006a 1B78     		ldrb	r3, [r3]
 5754 006c 002B     		cmp	r3, #0
 5755 006e 00D1     		bne	.L481
 5756              	.L479:
 823:Src/6502.c    **** }
 5757              		.loc 1 823 0
 5758              		@ sp needed
 5759 0070 70BD     		pop	{r4, r5, r6, pc}
 5760              	.L481:
 822:Src/6502.c    **** }
 5761              		.loc 1 822 0 discriminator 1
 5762 0072 0E4B     		ldr	r3, .L482+48
 5763 0074 1B68     		ldr	r3, [r3]
 5764 0076 9847     		blx	r3
 5765              	.LVL127:
 5766              		.loc 1 823 0 discriminator 1
 5767 0078 FAE7     		b	.L479
 5768              	.L483:
 5769 007a C046     		.align	2
 5770              	.L482:
 5771 007c 00000000 		.word	pc
 5772 0080 00000000 		.word	opcode
 5773 0084 00000000 		.word	status
 5774 0088 00000000 		.word	penaltyop
 5775 008c 00000000 		.word	penaltyaddr
 5776 0090 00000000 		.word	.LANCHOR1
 5777 0094 00000000 		.word	.LANCHOR3
 5778 0098 00000000 		.word	.LANCHOR4
 5779 009c 00000000 		.word	.LANCHOR0
 5780 00a0 00000000 		.word	.LANCHOR2
 5781 00a4 00000000 		.word	.LANCHOR5
 5782 00a8 00000000 		.word	.LANCHOR6
 5783 00ac 00000000 		.word	loopexternal
 5784              		.cfi_endproc
 5785              	.LFE123:
 5787              		.section	.text.hookexternal,"ax",%progbits
 5788              		.align	1
 5789              		.global	hookexternal
 5790              		.syntax unified
 5791              		.code	16
 5792              		.thumb_func
ARM GAS  /tmp/ccjHcktl.s 			page 122


 5793              		.fpu softvfp
 5795              	hookexternal:
 5796              	.LFB124:
 824:Src/6502.c    **** 
 825:Src/6502.c    **** void hookexternal(void *funcptr) {
 5797              		.loc 1 825 0
 5798              		.cfi_startproc
 5799              		@ args = 0, pretend = 0, frame = 0
 5800              		@ frame_needed = 0, uses_anonymous_args = 0
 5801              		@ link register save eliminated.
 5802              	.LVL128:
 826:Src/6502.c    ****     if (funcptr != (void *)NULL) {
 5803              		.loc 1 826 0
 5804 0000 0028     		cmp	r0, #0
 5805 0002 05D0     		beq	.L485
 827:Src/6502.c    ****         loopexternal = funcptr;
 5806              		.loc 1 827 0
 5807 0004 044B     		ldr	r3, .L487
 5808 0006 1860     		str	r0, [r3]
 828:Src/6502.c    ****         callexternal = 1;
 5809              		.loc 1 828 0
 5810 0008 0122     		movs	r2, #1
 5811 000a 044B     		ldr	r3, .L487+4
 5812 000c 1A70     		strb	r2, [r3]
 5813              	.L484:
 829:Src/6502.c    ****     } else callexternal = 0;
 830:Src/6502.c    **** }
 5814              		.loc 1 830 0
 5815              		@ sp needed
 5816 000e 7047     		bx	lr
 5817              	.L485:
 829:Src/6502.c    ****     } else callexternal = 0;
 5818              		.loc 1 829 0
 5819 0010 0022     		movs	r2, #0
 5820 0012 024B     		ldr	r3, .L487+4
 5821 0014 1A70     		strb	r2, [r3]
 5822              		.loc 1 830 0
 5823 0016 FAE7     		b	.L484
 5824              	.L488:
 5825              		.align	2
 5826              	.L487:
 5827 0018 00000000 		.word	loopexternal
 5828 001c 00000000 		.word	.LANCHOR6
 5829              		.cfi_endproc
 5830              	.LFE124:
 5832              		.section	.text.getPC,"ax",%progbits
 5833              		.align	1
 5834              		.global	getPC
 5835              		.syntax unified
 5836              		.code	16
 5837              		.thumb_func
 5838              		.fpu softvfp
 5840              	getPC:
 5841              	.LFB125:
 831:Src/6502.c    **** 
 832:Src/6502.c    **** uint16_t getPC() {
 5842              		.loc 1 832 0
ARM GAS  /tmp/ccjHcktl.s 			page 123


 5843              		.cfi_startproc
 5844              		@ args = 0, pretend = 0, frame = 0
 5845              		@ frame_needed = 0, uses_anonymous_args = 0
 5846              		@ link register save eliminated.
 833:Src/6502.c    **** 	return(pc);
 5847              		.loc 1 833 0
 5848 0000 014B     		ldr	r3, .L490
 5849 0002 1888     		ldrh	r0, [r3]
 834:Src/6502.c    **** }
 5850              		.loc 1 834 0
 5851              		@ sp needed
 5852 0004 7047     		bx	lr
 5853              	.L491:
 5854 0006 C046     		.align	2
 5855              	.L490:
 5856 0008 00000000 		.word	pc
 5857              		.cfi_endproc
 5858              	.LFE125:
 5860              		.section	.text.getclockticks,"ax",%progbits
 5861              		.align	1
 5862              		.global	getclockticks
 5863              		.syntax unified
 5864              		.code	16
 5865              		.thumb_func
 5866              		.fpu softvfp
 5868              	getclockticks:
 5869              	.LFB126:
 835:Src/6502.c    **** 
 836:Src/6502.c    **** uint64_t getclockticks() {
 5870              		.loc 1 836 0
 5871              		.cfi_startproc
 5872              		@ args = 0, pretend = 0, frame = 0
 5873              		@ frame_needed = 0, uses_anonymous_args = 0
 5874              		@ link register save eliminated.
 837:Src/6502.c    **** 	return(clockticks6502);
 5875              		.loc 1 837 0
 5876 0000 014B     		ldr	r3, .L493
 5877 0002 1868     		ldr	r0, [r3]
 5878 0004 5968     		ldr	r1, [r3, #4]
 838:Src/6502.c    **** }...
 5879              		.loc 1 838 0
 5880              		@ sp needed
 5881 0006 7047     		bx	lr
 5882              	.L494:
 5883              		.align	2
 5884              	.L493:
 5885 0008 00000000 		.word	.LANCHOR0
 5886              		.cfi_endproc
 5887              	.LFE126:
 5889              		.global	showdump
 5890              		.comm	loopexternal,4,4
 5891              		.global	callexternal
 5892              		.comm	penaltyaddr,1,1
 5893              		.comm	penaltyop,1,1
 5894              		.comm	oldstatus,1,1
 5895              		.comm	opcode,1,1
 5896              		.comm	result,2,2
ARM GAS  /tmp/ccjHcktl.s 			page 124


 5897              		.comm	value,2,2
 5898              		.comm	reladdr,2,2
 5899              		.comm	ea,2,2
 5900              		.comm	oldpc,2,2
 5901              		.global	clockgoal6502
 5902              		.global	clockticks6502
 5903              		.global	instructions
 5904              		.comm	status,1,1
 5905              		.comm	y,1,1
 5906              		.comm	x,1,1
 5907              		.comm	a,1,1
 5908              		.comm	sp,1,1
 5909              		.comm	pc,2,2
 5910              		.section	.bss.callexternal,"aw",%nobits
 5911              		.set	.LANCHOR6,. + 0
 5914              	callexternal:
 5915 0000 00       		.space	1
 5916              		.section	.bss.clockgoal6502,"aw",%nobits
 5917              		.align	3
 5918              		.set	.LANCHOR2,. + 0
 5921              	clockgoal6502:
 5922 0000 00000000 		.space	8
 5922      00000000 
 5923              		.section	.bss.clockticks6502,"aw",%nobits
 5924              		.align	3
 5925              		.set	.LANCHOR0,. + 0
 5928              	clockticks6502:
 5929 0000 00000000 		.space	8
 5929      00000000 
 5930              		.section	.bss.instructions,"aw",%nobits
 5931              		.align	3
 5932              		.set	.LANCHOR5,. + 0
 5935              	instructions:
 5936 0000 00000000 		.space	8
 5936      00000000 
 5937              		.section	.bss.showdump,"aw",%nobits
 5940              	showdump:
 5941 0000 00       		.space	1
 5942              		.section	.rodata.addrtable,"a",%progbits
 5943              		.align	2
 5944              		.set	.LANCHOR1,. + 0
 5947              	addrtable:
 5948 0000 00000000 		.word	imp
 5949 0004 00000000 		.word	indx
 5950 0008 00000000 		.word	imp
 5951 000c 00000000 		.word	indx
 5952 0010 00000000 		.word	zp
 5953 0014 00000000 		.word	zp
 5954 0018 00000000 		.word	zp
 5955 001c 00000000 		.word	zp
 5956 0020 00000000 		.word	imp
 5957 0024 00000000 		.word	imm
 5958 0028 00000000 		.word	acc
 5959 002c 00000000 		.word	imm
 5960 0030 00000000 		.word	abso
 5961 0034 00000000 		.word	abso
 5962 0038 00000000 		.word	abso
ARM GAS  /tmp/ccjHcktl.s 			page 125


 5963 003c 00000000 		.word	abso
 5964 0040 00000000 		.word	rel
 5965 0044 00000000 		.word	indy
 5966 0048 00000000 		.word	imp
 5967 004c 00000000 		.word	indy
 5968 0050 00000000 		.word	zpx
 5969 0054 00000000 		.word	zpx
 5970 0058 00000000 		.word	zpx
 5971 005c 00000000 		.word	zpx
 5972 0060 00000000 		.word	imp
 5973 0064 00000000 		.word	absy
 5974 0068 00000000 		.word	imp
 5975 006c 00000000 		.word	absy
 5976 0070 00000000 		.word	absx
 5977 0074 00000000 		.word	absx
 5978 0078 00000000 		.word	absx
 5979 007c 00000000 		.word	absx
 5980 0080 00000000 		.word	abso
 5981 0084 00000000 		.word	indx
 5982 0088 00000000 		.word	imp
 5983 008c 00000000 		.word	indx
 5984 0090 00000000 		.word	zp
 5985 0094 00000000 		.word	zp
 5986 0098 00000000 		.word	zp
 5987 009c 00000000 		.word	zp
 5988 00a0 00000000 		.word	imp
 5989 00a4 00000000 		.word	imm
 5990 00a8 00000000 		.word	acc
 5991 00ac 00000000 		.word	imm
 5992 00b0 00000000 		.word	abso
 5993 00b4 00000000 		.word	abso
 5994 00b8 00000000 		.word	abso
 5995 00bc 00000000 		.word	abso
 5996 00c0 00000000 		.word	rel
 5997 00c4 00000000 		.word	indy
 5998 00c8 00000000 		.word	imp
 5999 00cc 00000000 		.word	indy
 6000 00d0 00000000 		.word	zpx
 6001 00d4 00000000 		.word	zpx
 6002 00d8 00000000 		.word	zpx
 6003 00dc 00000000 		.word	zpx
 6004 00e0 00000000 		.word	imp
 6005 00e4 00000000 		.word	absy
 6006 00e8 00000000 		.word	imp
 6007 00ec 00000000 		.word	absy
 6008 00f0 00000000 		.word	absx
 6009 00f4 00000000 		.word	absx
 6010 00f8 00000000 		.word	absx
 6011 00fc 00000000 		.word	absx
 6012 0100 00000000 		.word	imp
 6013 0104 00000000 		.word	indx
 6014 0108 00000000 		.word	imp
 6015 010c 00000000 		.word	indx
 6016 0110 00000000 		.word	zp
 6017 0114 00000000 		.word	zp
 6018 0118 00000000 		.word	zp
 6019 011c 00000000 		.word	zp
ARM GAS  /tmp/ccjHcktl.s 			page 126


 6020 0120 00000000 		.word	imp
 6021 0124 00000000 		.word	imm
 6022 0128 00000000 		.word	acc
 6023 012c 00000000 		.word	imm
 6024 0130 00000000 		.word	abso
 6025 0134 00000000 		.word	abso
 6026 0138 00000000 		.word	abso
 6027 013c 00000000 		.word	abso
 6028 0140 00000000 		.word	rel
 6029 0144 00000000 		.word	indy
 6030 0148 00000000 		.word	imp
 6031 014c 00000000 		.word	indy
 6032 0150 00000000 		.word	zpx
 6033 0154 00000000 		.word	zpx
 6034 0158 00000000 		.word	zpx
 6035 015c 00000000 		.word	zpx
 6036 0160 00000000 		.word	imp
 6037 0164 00000000 		.word	absy
 6038 0168 00000000 		.word	imp
 6039 016c 00000000 		.word	absy
 6040 0170 00000000 		.word	absx
 6041 0174 00000000 		.word	absx
 6042 0178 00000000 		.word	absx
 6043 017c 00000000 		.word	absx
 6044 0180 00000000 		.word	imp
 6045 0184 00000000 		.word	indx
 6046 0188 00000000 		.word	imp
 6047 018c 00000000 		.word	indx
 6048 0190 00000000 		.word	zp
 6049 0194 00000000 		.word	zp
 6050 0198 00000000 		.word	zp
 6051 019c 00000000 		.word	zp
 6052 01a0 00000000 		.word	imp
 6053 01a4 00000000 		.word	imm
 6054 01a8 00000000 		.word	acc
 6055 01ac 00000000 		.word	imm
 6056 01b0 00000000 		.word	ind
 6057 01b4 00000000 		.word	abso
 6058 01b8 00000000 		.word	abso
 6059 01bc 00000000 		.word	abso
 6060 01c0 00000000 		.word	rel
 6061 01c4 00000000 		.word	indy
 6062 01c8 00000000 		.word	imp
 6063 01cc 00000000 		.word	indy
 6064 01d0 00000000 		.word	zpx
 6065 01d4 00000000 		.word	zpx
 6066 01d8 00000000 		.word	zpx
 6067 01dc 00000000 		.word	zpx
 6068 01e0 00000000 		.word	imp
 6069 01e4 00000000 		.word	absy
 6070 01e8 00000000 		.word	imp
 6071 01ec 00000000 		.word	absy
 6072 01f0 00000000 		.word	absx
 6073 01f4 00000000 		.word	absx
 6074 01f8 00000000 		.word	absx
 6075 01fc 00000000 		.word	absx
 6076 0200 00000000 		.word	imm
ARM GAS  /tmp/ccjHcktl.s 			page 127


 6077 0204 00000000 		.word	indx
 6078 0208 00000000 		.word	imm
 6079 020c 00000000 		.word	indx
 6080 0210 00000000 		.word	zp
 6081 0214 00000000 		.word	zp
 6082 0218 00000000 		.word	zp
 6083 021c 00000000 		.word	zp
 6084 0220 00000000 		.word	imp
 6085 0224 00000000 		.word	imm
 6086 0228 00000000 		.word	imp
 6087 022c 00000000 		.word	imm
 6088 0230 00000000 		.word	abso
 6089 0234 00000000 		.word	abso
 6090 0238 00000000 		.word	abso
 6091 023c 00000000 		.word	abso
 6092 0240 00000000 		.word	rel
 6093 0244 00000000 		.word	indy
 6094 0248 00000000 		.word	imp
 6095 024c 00000000 		.word	indy
 6096 0250 00000000 		.word	zpx
 6097 0254 00000000 		.word	zpx
 6098 0258 00000000 		.word	zpy
 6099 025c 00000000 		.word	zpy
 6100 0260 00000000 		.word	imp
 6101 0264 00000000 		.word	absy
 6102 0268 00000000 		.word	imp
 6103 026c 00000000 		.word	absy
 6104 0270 00000000 		.word	absx
 6105 0274 00000000 		.word	absx
 6106 0278 00000000 		.word	absy
 6107 027c 00000000 		.word	absy
 6108 0280 00000000 		.word	imm
 6109 0284 00000000 		.word	indx
 6110 0288 00000000 		.word	imm
 6111 028c 00000000 		.word	indx
 6112 0290 00000000 		.word	zp
 6113 0294 00000000 		.word	zp
 6114 0298 00000000 		.word	zp
 6115 029c 00000000 		.word	zp
 6116 02a0 00000000 		.word	imp
 6117 02a4 00000000 		.word	imm
 6118 02a8 00000000 		.word	imp
 6119 02ac 00000000 		.word	imm
 6120 02b0 00000000 		.word	abso
 6121 02b4 00000000 		.word	abso
 6122 02b8 00000000 		.word	abso
 6123 02bc 00000000 		.word	abso
 6124 02c0 00000000 		.word	rel
 6125 02c4 00000000 		.word	indy
 6126 02c8 00000000 		.word	imp
 6127 02cc 00000000 		.word	indy
 6128 02d0 00000000 		.word	zpx
 6129 02d4 00000000 		.word	zpx
 6130 02d8 00000000 		.word	zpy
 6131 02dc 00000000 		.word	zpy
 6132 02e0 00000000 		.word	imp
 6133 02e4 00000000 		.word	absy
ARM GAS  /tmp/ccjHcktl.s 			page 128


 6134 02e8 00000000 		.word	imp
 6135 02ec 00000000 		.word	absy
 6136 02f0 00000000 		.word	absx
 6137 02f4 00000000 		.word	absx
 6138 02f8 00000000 		.word	absy
 6139 02fc 00000000 		.word	absy
 6140 0300 00000000 		.word	imm
 6141 0304 00000000 		.word	indx
 6142 0308 00000000 		.word	imm
 6143 030c 00000000 		.word	indx
 6144 0310 00000000 		.word	zp
 6145 0314 00000000 		.word	zp
 6146 0318 00000000 		.word	zp
 6147 031c 00000000 		.word	zp
 6148 0320 00000000 		.word	imp
 6149 0324 00000000 		.word	imm
 6150 0328 00000000 		.word	imp
 6151 032c 00000000 		.word	imm
 6152 0330 00000000 		.word	abso
 6153 0334 00000000 		.word	abso
 6154 0338 00000000 		.word	abso
 6155 033c 00000000 		.word	abso
 6156 0340 00000000 		.word	rel
 6157 0344 00000000 		.word	indy
 6158 0348 00000000 		.word	imp
 6159 034c 00000000 		.word	indy
 6160 0350 00000000 		.word	zpx
 6161 0354 00000000 		.word	zpx
 6162 0358 00000000 		.word	zpx
 6163 035c 00000000 		.word	zpx
 6164 0360 00000000 		.word	imp
 6165 0364 00000000 		.word	absy
 6166 0368 00000000 		.word	imp
 6167 036c 00000000 		.word	absy
 6168 0370 00000000 		.word	absx
 6169 0374 00000000 		.word	absx
 6170 0378 00000000 		.word	absx
 6171 037c 00000000 		.word	absx
 6172 0380 00000000 		.word	imm
 6173 0384 00000000 		.word	indx
 6174 0388 00000000 		.word	imm
 6175 038c 00000000 		.word	indx
 6176 0390 00000000 		.word	zp
 6177 0394 00000000 		.word	zp
 6178 0398 00000000 		.word	zp
 6179 039c 00000000 		.word	zp
 6180 03a0 00000000 		.word	imp
 6181 03a4 00000000 		.word	imm
 6182 03a8 00000000 		.word	imp
 6183 03ac 00000000 		.word	imm
 6184 03b0 00000000 		.word	abso
 6185 03b4 00000000 		.word	abso
 6186 03b8 00000000 		.word	abso
 6187 03bc 00000000 		.word	abso
 6188 03c0 00000000 		.word	rel
 6189 03c4 00000000 		.word	indy
 6190 03c8 00000000 		.word	imp
ARM GAS  /tmp/ccjHcktl.s 			page 129


 6191 03cc 00000000 		.word	indy
 6192 03d0 00000000 		.word	zpx
 6193 03d4 00000000 		.word	zpx
 6194 03d8 00000000 		.word	zpx
 6195 03dc 00000000 		.word	zpx
 6196 03e0 00000000 		.word	imp
 6197 03e4 00000000 		.word	absy
 6198 03e8 00000000 		.word	imp
 6199 03ec 00000000 		.word	absy
 6200 03f0 00000000 		.word	absx
 6201 03f4 00000000 		.word	absx
 6202 03f8 00000000 		.word	absx
 6203 03fc 00000000 		.word	absx
 6204              		.section	.rodata.optable,"a",%progbits
 6205              		.align	2
 6206              		.set	.LANCHOR3,. + 0
 6209              	optable:
 6210 0000 00000000 		.word	brk
 6211 0004 00000000 		.word	ora
 6212 0008 00000000 		.word	nop
 6213 000c 00000000 		.word	slo
 6214 0010 00000000 		.word	nop
 6215 0014 00000000 		.word	ora
 6216 0018 00000000 		.word	asl
 6217 001c 00000000 		.word	slo
 6218 0020 00000000 		.word	php
 6219 0024 00000000 		.word	ora
 6220 0028 00000000 		.word	asl
 6221 002c 00000000 		.word	nop
 6222 0030 00000000 		.word	nop
 6223 0034 00000000 		.word	ora
 6224 0038 00000000 		.word	asl
 6225 003c 00000000 		.word	slo
 6226 0040 00000000 		.word	bpl
 6227 0044 00000000 		.word	ora
 6228 0048 00000000 		.word	nop
 6229 004c 00000000 		.word	slo
 6230 0050 00000000 		.word	nop
 6231 0054 00000000 		.word	ora
 6232 0058 00000000 		.word	asl
 6233 005c 00000000 		.word	slo
 6234 0060 00000000 		.word	clc
 6235 0064 00000000 		.word	ora
 6236 0068 00000000 		.word	nop
 6237 006c 00000000 		.word	slo
 6238 0070 00000000 		.word	nop
 6239 0074 00000000 		.word	ora
 6240 0078 00000000 		.word	asl
 6241 007c 00000000 		.word	slo
 6242 0080 00000000 		.word	jsr
 6243 0084 00000000 		.word	and
 6244 0088 00000000 		.word	nop
 6245 008c 00000000 		.word	rla
 6246 0090 00000000 		.word	bit
 6247 0094 00000000 		.word	and
 6248 0098 00000000 		.word	rol
 6249 009c 00000000 		.word	rla
ARM GAS  /tmp/ccjHcktl.s 			page 130


 6250 00a0 00000000 		.word	plp
 6251 00a4 00000000 		.word	and
 6252 00a8 00000000 		.word	rol
 6253 00ac 00000000 		.word	nop
 6254 00b0 00000000 		.word	bit
 6255 00b4 00000000 		.word	and
 6256 00b8 00000000 		.word	rol
 6257 00bc 00000000 		.word	rla
 6258 00c0 00000000 		.word	bmi
 6259 00c4 00000000 		.word	and
 6260 00c8 00000000 		.word	nop
 6261 00cc 00000000 		.word	rla
 6262 00d0 00000000 		.word	nop
 6263 00d4 00000000 		.word	and
 6264 00d8 00000000 		.word	rol
 6265 00dc 00000000 		.word	rla
 6266 00e0 00000000 		.word	sec
 6267 00e4 00000000 		.word	and
 6268 00e8 00000000 		.word	nop
 6269 00ec 00000000 		.word	rla
 6270 00f0 00000000 		.word	nop
 6271 00f4 00000000 		.word	and
 6272 00f8 00000000 		.word	rol
 6273 00fc 00000000 		.word	rla
 6274 0100 00000000 		.word	rti
 6275 0104 00000000 		.word	eor
 6276 0108 00000000 		.word	nop
 6277 010c 00000000 		.word	sre
 6278 0110 00000000 		.word	nop
 6279 0114 00000000 		.word	eor
 6280 0118 00000000 		.word	lsr
 6281 011c 00000000 		.word	sre
 6282 0120 00000000 		.word	pha
 6283 0124 00000000 		.word	eor
 6284 0128 00000000 		.word	lsr
 6285 012c 00000000 		.word	nop
 6286 0130 00000000 		.word	jmp
 6287 0134 00000000 		.word	eor
 6288 0138 00000000 		.word	lsr
 6289 013c 00000000 		.word	sre
 6290 0140 00000000 		.word	bvc
 6291 0144 00000000 		.word	eor
 6292 0148 00000000 		.word	nop
 6293 014c 00000000 		.word	sre
 6294 0150 00000000 		.word	nop
 6295 0154 00000000 		.word	eor
 6296 0158 00000000 		.word	lsr
 6297 015c 00000000 		.word	sre
 6298 0160 00000000 		.word	cli
 6299 0164 00000000 		.word	eor
 6300 0168 00000000 		.word	nop
 6301 016c 00000000 		.word	sre
 6302 0170 00000000 		.word	nop
 6303 0174 00000000 		.word	eor
 6304 0178 00000000 		.word	lsr
 6305 017c 00000000 		.word	sre
 6306 0180 00000000 		.word	rts
ARM GAS  /tmp/ccjHcktl.s 			page 131


 6307 0184 00000000 		.word	adc
 6308 0188 00000000 		.word	nop
 6309 018c 00000000 		.word	rra
 6310 0190 00000000 		.word	nop
 6311 0194 00000000 		.word	adc
 6312 0198 00000000 		.word	ror
 6313 019c 00000000 		.word	rra
 6314 01a0 00000000 		.word	pla
 6315 01a4 00000000 		.word	adc
 6316 01a8 00000000 		.word	ror
 6317 01ac 00000000 		.word	nop
 6318 01b0 00000000 		.word	jmp
 6319 01b4 00000000 		.word	adc
 6320 01b8 00000000 		.word	ror
 6321 01bc 00000000 		.word	rra
 6322 01c0 00000000 		.word	bvs
 6323 01c4 00000000 		.word	adc
 6324 01c8 00000000 		.word	nop
 6325 01cc 00000000 		.word	rra
 6326 01d0 00000000 		.word	nop
 6327 01d4 00000000 		.word	adc
 6328 01d8 00000000 		.word	ror
 6329 01dc 00000000 		.word	rra
 6330 01e0 00000000 		.word	sei
 6331 01e4 00000000 		.word	adc
 6332 01e8 00000000 		.word	nop
 6333 01ec 00000000 		.word	rra
 6334 01f0 00000000 		.word	nop
 6335 01f4 00000000 		.word	adc
 6336 01f8 00000000 		.word	ror
 6337 01fc 00000000 		.word	rra
 6338 0200 00000000 		.word	nop
 6339 0204 00000000 		.word	sta
 6340 0208 00000000 		.word	nop
 6341 020c 00000000 		.word	sax
 6342 0210 00000000 		.word	sty
 6343 0214 00000000 		.word	sta
 6344 0218 00000000 		.word	stx
 6345 021c 00000000 		.word	sax
 6346 0220 00000000 		.word	dey
 6347 0224 00000000 		.word	nop
 6348 0228 00000000 		.word	txa
 6349 022c 00000000 		.word	nop
 6350 0230 00000000 		.word	sty
 6351 0234 00000000 		.word	sta
 6352 0238 00000000 		.word	stx
 6353 023c 00000000 		.word	sax
 6354 0240 00000000 		.word	bcc
 6355 0244 00000000 		.word	sta
 6356 0248 00000000 		.word	nop
 6357 024c 00000000 		.word	nop
 6358 0250 00000000 		.word	sty
 6359 0254 00000000 		.word	sta
 6360 0258 00000000 		.word	stx
 6361 025c 00000000 		.word	sax
 6362 0260 00000000 		.word	tya
 6363 0264 00000000 		.word	sta
ARM GAS  /tmp/ccjHcktl.s 			page 132


 6364 0268 00000000 		.word	txs
 6365 026c 00000000 		.word	nop
 6366 0270 00000000 		.word	nop
 6367 0274 00000000 		.word	sta
 6368 0278 00000000 		.word	nop
 6369 027c 00000000 		.word	nop
 6370 0280 00000000 		.word	ldy
 6371 0284 00000000 		.word	lda
 6372 0288 00000000 		.word	ldx
 6373 028c 00000000 		.word	lax
 6374 0290 00000000 		.word	ldy
 6375 0294 00000000 		.word	lda
 6376 0298 00000000 		.word	ldx
 6377 029c 00000000 		.word	lax
 6378 02a0 00000000 		.word	tay
 6379 02a4 00000000 		.word	lda
 6380 02a8 00000000 		.word	tax
 6381 02ac 00000000 		.word	nop
 6382 02b0 00000000 		.word	ldy
 6383 02b4 00000000 		.word	lda
 6384 02b8 00000000 		.word	ldx
 6385 02bc 00000000 		.word	lax
 6386 02c0 00000000 		.word	bcs
 6387 02c4 00000000 		.word	lda
 6388 02c8 00000000 		.word	nop
 6389 02cc 00000000 		.word	lax
 6390 02d0 00000000 		.word	ldy
 6391 02d4 00000000 		.word	lda
 6392 02d8 00000000 		.word	ldx
 6393 02dc 00000000 		.word	lax
 6394 02e0 00000000 		.word	clv
 6395 02e4 00000000 		.word	lda
 6396 02e8 00000000 		.word	tsx
 6397 02ec 00000000 		.word	lax
 6398 02f0 00000000 		.word	ldy
 6399 02f4 00000000 		.word	lda
 6400 02f8 00000000 		.word	ldx
 6401 02fc 00000000 		.word	lax
 6402 0300 00000000 		.word	cpy
 6403 0304 00000000 		.word	cmp
 6404 0308 00000000 		.word	nop
 6405 030c 00000000 		.word	dcp
 6406 0310 00000000 		.word	cpy
 6407 0314 00000000 		.word	cmp
 6408 0318 00000000 		.word	dec
 6409 031c 00000000 		.word	dcp
 6410 0320 00000000 		.word	iny
 6411 0324 00000000 		.word	cmp
 6412 0328 00000000 		.word	dex
 6413 032c 00000000 		.word	nop
 6414 0330 00000000 		.word	cpy
 6415 0334 00000000 		.word	cmp
 6416 0338 00000000 		.word	dec
 6417 033c 00000000 		.word	dcp
 6418 0340 00000000 		.word	bne
 6419 0344 00000000 		.word	cmp
 6420 0348 00000000 		.word	nop
ARM GAS  /tmp/ccjHcktl.s 			page 133


 6421 034c 00000000 		.word	dcp
 6422 0350 00000000 		.word	nop
 6423 0354 00000000 		.word	cmp
 6424 0358 00000000 		.word	dec
 6425 035c 00000000 		.word	dcp
 6426 0360 00000000 		.word	cld
 6427 0364 00000000 		.word	cmp
 6428 0368 00000000 		.word	nop
 6429 036c 00000000 		.word	dcp
 6430 0370 00000000 		.word	nop
 6431 0374 00000000 		.word	cmp
 6432 0378 00000000 		.word	dec
 6433 037c 00000000 		.word	dcp
 6434 0380 00000000 		.word	cpx
 6435 0384 00000000 		.word	sbc
 6436 0388 00000000 		.word	nop
 6437 038c 00000000 		.word	isb
 6438 0390 00000000 		.word	cpx
 6439 0394 00000000 		.word	sbc
 6440 0398 00000000 		.word	inc
 6441 039c 00000000 		.word	isb
 6442 03a0 00000000 		.word	inx
 6443 03a4 00000000 		.word	sbc
 6444 03a8 00000000 		.word	nop
 6445 03ac 00000000 		.word	sbc
 6446 03b0 00000000 		.word	cpx
 6447 03b4 00000000 		.word	sbc
 6448 03b8 00000000 		.word	inc
 6449 03bc 00000000 		.word	isb
 6450 03c0 00000000 		.word	beq
 6451 03c4 00000000 		.word	sbc
 6452 03c8 00000000 		.word	nop
 6453 03cc 00000000 		.word	isb
 6454 03d0 00000000 		.word	nop
 6455 03d4 00000000 		.word	sbc
 6456 03d8 00000000 		.word	inc
 6457 03dc 00000000 		.word	isb
 6458 03e0 00000000 		.word	sed
 6459 03e4 00000000 		.word	sbc
 6460 03e8 00000000 		.word	nop
 6461 03ec 00000000 		.word	isb
 6462 03f0 00000000 		.word	nop
 6463 03f4 00000000 		.word	sbc
 6464 03f8 00000000 		.word	inc
 6465 03fc 00000000 		.word	isb
 6466              		.section	.rodata.ticktable,"a",%progbits
 6467              		.align	2
 6468              		.set	.LANCHOR4,. + 0
 6471              	ticktable:
 6472 0000 07000000 		.word	7
 6473 0004 06000000 		.word	6
 6474 0008 02000000 		.word	2
 6475 000c 08000000 		.word	8
 6476 0010 03000000 		.word	3
 6477 0014 03000000 		.word	3
 6478 0018 05000000 		.word	5
 6479 001c 05000000 		.word	5
ARM GAS  /tmp/ccjHcktl.s 			page 134


 6480 0020 03000000 		.word	3
 6481 0024 02000000 		.word	2
 6482 0028 02000000 		.word	2
 6483 002c 02000000 		.word	2
 6484 0030 04000000 		.word	4
 6485 0034 04000000 		.word	4
 6486 0038 06000000 		.word	6
 6487 003c 06000000 		.word	6
 6488 0040 02000000 		.word	2
 6489 0044 05000000 		.word	5
 6490 0048 02000000 		.word	2
 6491 004c 08000000 		.word	8
 6492 0050 04000000 		.word	4
 6493 0054 04000000 		.word	4
 6494 0058 06000000 		.word	6
 6495 005c 06000000 		.word	6
 6496 0060 02000000 		.word	2
 6497 0064 04000000 		.word	4
 6498 0068 02000000 		.word	2
 6499 006c 07000000 		.word	7
 6500 0070 04000000 		.word	4
 6501 0074 04000000 		.word	4
 6502 0078 07000000 		.word	7
 6503 007c 07000000 		.word	7
 6504 0080 06000000 		.word	6
 6505 0084 06000000 		.word	6
 6506 0088 02000000 		.word	2
 6507 008c 08000000 		.word	8
 6508 0090 03000000 		.word	3
 6509 0094 03000000 		.word	3
 6510 0098 05000000 		.word	5
 6511 009c 05000000 		.word	5
 6512 00a0 04000000 		.word	4
 6513 00a4 02000000 		.word	2
 6514 00a8 02000000 		.word	2
 6515 00ac 02000000 		.word	2
 6516 00b0 04000000 		.word	4
 6517 00b4 04000000 		.word	4
 6518 00b8 06000000 		.word	6
 6519 00bc 06000000 		.word	6
 6520 00c0 02000000 		.word	2
 6521 00c4 05000000 		.word	5
 6522 00c8 02000000 		.word	2
 6523 00cc 08000000 		.word	8
 6524 00d0 04000000 		.word	4
 6525 00d4 04000000 		.word	4
 6526 00d8 06000000 		.word	6
 6527 00dc 06000000 		.word	6
 6528 00e0 02000000 		.word	2
 6529 00e4 04000000 		.word	4
 6530 00e8 02000000 		.word	2
 6531 00ec 07000000 		.word	7
 6532 00f0 04000000 		.word	4
 6533 00f4 04000000 		.word	4
 6534 00f8 07000000 		.word	7
 6535 00fc 07000000 		.word	7
 6536 0100 06000000 		.word	6
ARM GAS  /tmp/ccjHcktl.s 			page 135


 6537 0104 06000000 		.word	6
 6538 0108 02000000 		.word	2
 6539 010c 08000000 		.word	8
 6540 0110 03000000 		.word	3
 6541 0114 03000000 		.word	3
 6542 0118 05000000 		.word	5
 6543 011c 05000000 		.word	5
 6544 0120 03000000 		.word	3
 6545 0124 02000000 		.word	2
 6546 0128 02000000 		.word	2
 6547 012c 02000000 		.word	2
 6548 0130 03000000 		.word	3
 6549 0134 04000000 		.word	4
 6550 0138 06000000 		.word	6
 6551 013c 06000000 		.word	6
 6552 0140 02000000 		.word	2
 6553 0144 05000000 		.word	5
 6554 0148 02000000 		.word	2
 6555 014c 08000000 		.word	8
 6556 0150 04000000 		.word	4
 6557 0154 04000000 		.word	4
 6558 0158 06000000 		.word	6
 6559 015c 06000000 		.word	6
 6560 0160 02000000 		.word	2
 6561 0164 04000000 		.word	4
 6562 0168 02000000 		.word	2
 6563 016c 07000000 		.word	7
 6564 0170 04000000 		.word	4
 6565 0174 04000000 		.word	4
 6566 0178 07000000 		.word	7
 6567 017c 07000000 		.word	7
 6568 0180 06000000 		.word	6
 6569 0184 06000000 		.word	6
 6570 0188 02000000 		.word	2
 6571 018c 08000000 		.word	8
 6572 0190 03000000 		.word	3
 6573 0194 03000000 		.word	3
 6574 0198 05000000 		.word	5
 6575 019c 05000000 		.word	5
 6576 01a0 04000000 		.word	4
 6577 01a4 02000000 		.word	2
 6578 01a8 02000000 		.word	2
 6579 01ac 02000000 		.word	2
 6580 01b0 05000000 		.word	5
 6581 01b4 04000000 		.word	4
 6582 01b8 06000000 		.word	6
 6583 01bc 06000000 		.word	6
 6584 01c0 02000000 		.word	2
 6585 01c4 05000000 		.word	5
 6586 01c8 02000000 		.word	2
 6587 01cc 08000000 		.word	8
 6588 01d0 04000000 		.word	4
 6589 01d4 04000000 		.word	4
 6590 01d8 06000000 		.word	6
 6591 01dc 06000000 		.word	6
 6592 01e0 02000000 		.word	2
 6593 01e4 04000000 		.word	4
ARM GAS  /tmp/ccjHcktl.s 			page 136


 6594 01e8 02000000 		.word	2
 6595 01ec 07000000 		.word	7
 6596 01f0 04000000 		.word	4
 6597 01f4 04000000 		.word	4
 6598 01f8 07000000 		.word	7
 6599 01fc 07000000 		.word	7
 6600 0200 02000000 		.word	2
 6601 0204 06000000 		.word	6
 6602 0208 02000000 		.word	2
 6603 020c 06000000 		.word	6
 6604 0210 03000000 		.word	3
 6605 0214 03000000 		.word	3
 6606 0218 03000000 		.word	3
 6607 021c 03000000 		.word	3
 6608 0220 02000000 		.word	2
 6609 0224 02000000 		.word	2
 6610 0228 02000000 		.word	2
 6611 022c 02000000 		.word	2
 6612 0230 04000000 		.word	4
 6613 0234 04000000 		.word	4
 6614 0238 04000000 		.word	4
 6615 023c 04000000 		.word	4
 6616 0240 02000000 		.word	2
 6617 0244 06000000 		.word	6
 6618 0248 02000000 		.word	2
 6619 024c 06000000 		.word	6
 6620 0250 04000000 		.word	4
 6621 0254 04000000 		.word	4
 6622 0258 04000000 		.word	4
 6623 025c 04000000 		.word	4
 6624 0260 02000000 		.word	2
 6625 0264 05000000 		.word	5
 6626 0268 02000000 		.word	2
 6627 026c 05000000 		.word	5
 6628 0270 05000000 		.word	5
 6629 0274 05000000 		.word	5
 6630 0278 05000000 		.word	5
 6631 027c 05000000 		.word	5
 6632 0280 02000000 		.word	2
 6633 0284 06000000 		.word	6
 6634 0288 02000000 		.word	2
 6635 028c 06000000 		.word	6
 6636 0290 03000000 		.word	3
 6637 0294 03000000 		.word	3
 6638 0298 03000000 		.word	3
 6639 029c 03000000 		.word	3
 6640 02a0 02000000 		.word	2
 6641 02a4 02000000 		.word	2
 6642 02a8 02000000 		.word	2
 6643 02ac 02000000 		.word	2
 6644 02b0 04000000 		.word	4
 6645 02b4 04000000 		.word	4
 6646 02b8 04000000 		.word	4
 6647 02bc 04000000 		.word	4
 6648 02c0 02000000 		.word	2
 6649 02c4 05000000 		.word	5
 6650 02c8 02000000 		.word	2
ARM GAS  /tmp/ccjHcktl.s 			page 137


 6651 02cc 05000000 		.word	5
 6652 02d0 04000000 		.word	4
 6653 02d4 04000000 		.word	4
 6654 02d8 04000000 		.word	4
 6655 02dc 04000000 		.word	4
 6656 02e0 02000000 		.word	2
 6657 02e4 04000000 		.word	4
 6658 02e8 02000000 		.word	2
 6659 02ec 04000000 		.word	4
 6660 02f0 04000000 		.word	4
 6661 02f4 04000000 		.word	4
 6662 02f8 04000000 		.word	4
 6663 02fc 04000000 		.word	4
 6664 0300 02000000 		.word	2
 6665 0304 06000000 		.word	6
 6666 0308 02000000 		.word	2
 6667 030c 08000000 		.word	8
 6668 0310 03000000 		.word	3
 6669 0314 03000000 		.word	3
 6670 0318 05000000 		.word	5
 6671 031c 05000000 		.word	5
 6672 0320 02000000 		.word	2
 6673 0324 02000000 		.word	2
 6674 0328 02000000 		.word	2
 6675 032c 02000000 		.word	2
 6676 0330 04000000 		.word	4
 6677 0334 04000000 		.word	4
 6678 0338 06000000 		.word	6
 6679 033c 06000000 		.word	6
 6680 0340 02000000 		.word	2
 6681 0344 05000000 		.word	5
 6682 0348 02000000 		.word	2
 6683 034c 08000000 		.word	8
 6684 0350 04000000 		.word	4
 6685 0354 04000000 		.word	4
 6686 0358 06000000 		.word	6
 6687 035c 06000000 		.word	6
 6688 0360 02000000 		.word	2
 6689 0364 04000000 		.word	4
 6690 0368 02000000 		.word	2
 6691 036c 07000000 		.word	7
 6692 0370 04000000 		.word	4
 6693 0374 04000000 		.word	4
 6694 0378 07000000 		.word	7
 6695 037c 07000000 		.word	7
 6696 0380 02000000 		.word	2
 6697 0384 06000000 		.word	6
 6698 0388 02000000 		.word	2
 6699 038c 08000000 		.word	8
 6700 0390 03000000 		.word	3
 6701 0394 03000000 		.word	3
 6702 0398 05000000 		.word	5
 6703 039c 05000000 		.word	5
 6704 03a0 02000000 		.word	2
 6705 03a4 02000000 		.word	2
 6706 03a8 02000000 		.word	2
 6707 03ac 02000000 		.word	2
ARM GAS  /tmp/ccjHcktl.s 			page 138


 6708 03b0 04000000 		.word	4
 6709 03b4 04000000 		.word	4
 6710 03b8 06000000 		.word	6
 6711 03bc 06000000 		.word	6
 6712 03c0 02000000 		.word	2
 6713 03c4 05000000 		.word	5
 6714 03c8 02000000 		.word	2
 6715 03cc 08000000 		.word	8
 6716 03d0 04000000 		.word	4
 6717 03d4 04000000 		.word	4
 6718 03d8 06000000 		.word	6
 6719 03dc 06000000 		.word	6
 6720 03e0 02000000 		.word	2
 6721 03e4 04000000 		.word	4
 6722 03e8 02000000 		.word	2
 6723 03ec 07000000 		.word	7
 6724 03f0 04000000 		.word	4
 6725 03f4 04000000 		.word	4
 6726 03f8 07000000 		.word	7
 6727 03fc 07000000 		.word	7
 6728              		.text
 6729              	.Letext0:
 6730              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 6731              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 6732              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 6733              		.file 5 "/usr/include/newlib/sys/lock.h"
 6734              		.file 6 "/usr/include/newlib/sys/_types.h"
 6735              		.file 7 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 6736              		.file 8 "/usr/include/newlib/sys/reent.h"
ARM GAS  /tmp/ccjHcktl.s 			page 139


DEFINED SYMBOLS
                            *ABS*:0000000000000000 6502.c
     /tmp/ccjHcktl.s:16     .text.imp:0000000000000000 $t
     /tmp/ccjHcktl.s:22     .text.imp:0000000000000000 imp
     /tmp/ccjHcktl.s:37     .text.acc:0000000000000000 $t
     /tmp/ccjHcktl.s:43     .text.acc:0000000000000000 acc
     /tmp/ccjHcktl.s:57     .text.imm:0000000000000000 $t
     /tmp/ccjHcktl.s:63     .text.imm:0000000000000000 imm
     /tmp/ccjHcktl.s:83     .text.imm:0000000000000010 $d
                            *COM*:0000000000000002 pc
                            *COM*:0000000000000002 ea
     /tmp/ccjHcktl.s:89     .text.bcc:0000000000000000 $t
     /tmp/ccjHcktl.s:95     .text.bcc:0000000000000000 bcc
     /tmp/ccjHcktl.s:157    .text.bcc:000000000000004c $d
                            *COM*:0000000000000001 status
                            *COM*:0000000000000002 oldpc
                            *COM*:0000000000000002 reladdr
     /tmp/ccjHcktl.s:166    .text.bcs:0000000000000000 $t
     /tmp/ccjHcktl.s:172    .text.bcs:0000000000000000 bcs
     /tmp/ccjHcktl.s:234    .text.bcs:000000000000004c $d
     /tmp/ccjHcktl.s:243    .text.beq:0000000000000000 $t
     /tmp/ccjHcktl.s:249    .text.beq:0000000000000000 beq
     /tmp/ccjHcktl.s:311    .text.beq:000000000000004c $d
     /tmp/ccjHcktl.s:320    .text.bmi:0000000000000000 $t
     /tmp/ccjHcktl.s:326    .text.bmi:0000000000000000 bmi
     /tmp/ccjHcktl.s:392    .text.bmi:0000000000000050 $d
     /tmp/ccjHcktl.s:401    .text.bne:0000000000000000 $t
     /tmp/ccjHcktl.s:407    .text.bne:0000000000000000 bne
     /tmp/ccjHcktl.s:469    .text.bne:000000000000004c $d
     /tmp/ccjHcktl.s:478    .text.bpl:0000000000000000 $t
     /tmp/ccjHcktl.s:484    .text.bpl:0000000000000000 bpl
     /tmp/ccjHcktl.s:547    .text.bpl:0000000000000050 $d
     /tmp/ccjHcktl.s:556    .text.bvc:0000000000000000 $t
     /tmp/ccjHcktl.s:562    .text.bvc:0000000000000000 bvc
     /tmp/ccjHcktl.s:624    .text.bvc:000000000000004c $d
     /tmp/ccjHcktl.s:633    .text.bvs:0000000000000000 $t
     /tmp/ccjHcktl.s:639    .text.bvs:0000000000000000 bvs
     /tmp/ccjHcktl.s:701    .text.bvs:000000000000004c $d
     /tmp/ccjHcktl.s:710    .text.clc:0000000000000000 $t
     /tmp/ccjHcktl.s:716    .text.clc:0000000000000000 clc
     /tmp/ccjHcktl.s:735    .text.clc:000000000000000c $d
     /tmp/ccjHcktl.s:740    .text.cld:0000000000000000 $t
     /tmp/ccjHcktl.s:746    .text.cld:0000000000000000 cld
     /tmp/ccjHcktl.s:765    .text.cld:000000000000000c $d
     /tmp/ccjHcktl.s:770    .text.cli:0000000000000000 $t
     /tmp/ccjHcktl.s:776    .text.cli:0000000000000000 cli
     /tmp/ccjHcktl.s:795    .text.cli:000000000000000c $d
     /tmp/ccjHcktl.s:800    .text.clv:0000000000000000 $t
     /tmp/ccjHcktl.s:806    .text.clv:0000000000000000 clv
     /tmp/ccjHcktl.s:825    .text.clv:000000000000000c $d
     /tmp/ccjHcktl.s:830    .text.dex:0000000000000000 $t
     /tmp/ccjHcktl.s:836    .text.dex:0000000000000000 dex
     /tmp/ccjHcktl.s:893    .text.dex:0000000000000044 $d
                            *COM*:0000000000000001 x
     /tmp/ccjHcktl.s:899    .text.dey:0000000000000000 $t
     /tmp/ccjHcktl.s:905    .text.dey:0000000000000000 dey
     /tmp/ccjHcktl.s:962    .text.dey:0000000000000044 $d
ARM GAS  /tmp/ccjHcktl.s 			page 140


                            *COM*:0000000000000001 y
     /tmp/ccjHcktl.s:968    .text.inx:0000000000000000 $t
     /tmp/ccjHcktl.s:974    .text.inx:0000000000000000 inx
     /tmp/ccjHcktl.s:1031   .text.inx:0000000000000044 $d
     /tmp/ccjHcktl.s:1037   .text.iny:0000000000000000 $t
     /tmp/ccjHcktl.s:1043   .text.iny:0000000000000000 iny
     /tmp/ccjHcktl.s:1100   .text.iny:0000000000000044 $d
     /tmp/ccjHcktl.s:1106   .text.jmp:0000000000000000 $t
     /tmp/ccjHcktl.s:1112   .text.jmp:0000000000000000 jmp
     /tmp/ccjHcktl.s:1130   .text.jmp:000000000000000c $d
     /tmp/ccjHcktl.s:1136   .text.nop:0000000000000000 $t
     /tmp/ccjHcktl.s:1142   .text.nop:0000000000000000 nop
     /tmp/ccjHcktl.s:1182   .text.nop:0000000000000030 $d
                            *COM*:0000000000000001 opcode
                            *COM*:0000000000000001 penaltyop
     /tmp/ccjHcktl.s:1188   .text.sec:0000000000000000 $t
     /tmp/ccjHcktl.s:1194   .text.sec:0000000000000000 sec
     /tmp/ccjHcktl.s:1213   .text.sec:000000000000000c $d
     /tmp/ccjHcktl.s:1218   .text.sed:0000000000000000 $t
     /tmp/ccjHcktl.s:1224   .text.sed:0000000000000000 sed
     /tmp/ccjHcktl.s:1243   .text.sed:000000000000000c $d
     /tmp/ccjHcktl.s:1248   .text.sei:0000000000000000 $t
     /tmp/ccjHcktl.s:1254   .text.sei:0000000000000000 sei
     /tmp/ccjHcktl.s:1273   .text.sei:000000000000000c $d
     /tmp/ccjHcktl.s:1278   .text.tax:0000000000000000 $t
     /tmp/ccjHcktl.s:1284   .text.tax:0000000000000000 tax
     /tmp/ccjHcktl.s:1340   .text.tax:0000000000000044 $d
                            *COM*:0000000000000001 a
     /tmp/ccjHcktl.s:1347   .text.tay:0000000000000000 $t
     /tmp/ccjHcktl.s:1353   .text.tay:0000000000000000 tay
     /tmp/ccjHcktl.s:1409   .text.tay:0000000000000044 $d
     /tmp/ccjHcktl.s:1416   .text.tsx:0000000000000000 $t
     /tmp/ccjHcktl.s:1422   .text.tsx:0000000000000000 tsx
     /tmp/ccjHcktl.s:1478   .text.tsx:0000000000000044 $d
                            *COM*:0000000000000001 sp
     /tmp/ccjHcktl.s:1485   .text.txa:0000000000000000 $t
     /tmp/ccjHcktl.s:1491   .text.txa:0000000000000000 txa
     /tmp/ccjHcktl.s:1547   .text.txa:0000000000000044 $d
     /tmp/ccjHcktl.s:1554   .text.txs:0000000000000000 $t
     /tmp/ccjHcktl.s:1560   .text.txs:0000000000000000 txs
     /tmp/ccjHcktl.s:1578   .text.txs:000000000000000c $d
     /tmp/ccjHcktl.s:1584   .text.tya:0000000000000000 $t
     /tmp/ccjHcktl.s:1590   .text.tya:0000000000000000 tya
     /tmp/ccjHcktl.s:1646   .text.tya:0000000000000044 $d
     /tmp/ccjHcktl.s:1653   .text.putvalue:0000000000000000 $t
     /tmp/ccjHcktl.s:1659   .text.putvalue:0000000000000000 putvalue
     /tmp/ccjHcktl.s:1700   .text.putvalue:0000000000000024 $d
     /tmp/ccjHcktl.s:1709   .text.stx:0000000000000000 $t
     /tmp/ccjHcktl.s:1715   .text.stx:0000000000000000 stx
     /tmp/ccjHcktl.s:1737   .text.stx:000000000000000c $d
     /tmp/ccjHcktl.s:1742   .text.sty:0000000000000000 $t
     /tmp/ccjHcktl.s:1748   .text.sty:0000000000000000 sty
     /tmp/ccjHcktl.s:1770   .text.sty:000000000000000c $d
     /tmp/ccjHcktl.s:1775   .text.sta:0000000000000000 $t
     /tmp/ccjHcktl.s:1781   .text.sta:0000000000000000 sta
     /tmp/ccjHcktl.s:1803   .text.sta:000000000000000c $d
     /tmp/ccjHcktl.s:1808   .text.sax:0000000000000000 $t
ARM GAS  /tmp/ccjHcktl.s 			page 141


     /tmp/ccjHcktl.s:1814   .text.sax:0000000000000000 sax
     /tmp/ccjHcktl.s:1869   .text.sax:0000000000000040 $d
                            *COM*:0000000000000001 penaltyaddr
     /tmp/ccjHcktl.s:1878   .text.getvalue:0000000000000000 $t
     /tmp/ccjHcktl.s:1884   .text.getvalue:0000000000000000 getvalue
     /tmp/ccjHcktl.s:1922   .text.getvalue:0000000000000024 $d
     /tmp/ccjHcktl.s:1931   .text.inc:0000000000000000 $t
     /tmp/ccjHcktl.s:1937   .text.inc:0000000000000000 inc
     /tmp/ccjHcktl.s:2005   .text.inc:0000000000000050 $d
                            *COM*:0000000000000002 value
                            *COM*:0000000000000002 result
     /tmp/ccjHcktl.s:2012   .text.sbc:0000000000000000 $t
     /tmp/ccjHcktl.s:2018   .text.sbc:0000000000000000 sbc
     /tmp/ccjHcktl.s:2192   .text.sbc:00000000000000f4 $d
     /tmp/ccjHcktl.s:2202   .text.isb:0000000000000000 $t
     /tmp/ccjHcktl.s:2208   .text.isb:0000000000000000 isb
     /tmp/ccjHcktl.s:2255   .text.isb:0000000000000030 $d
     /tmp/ccjHcktl.s:2262   .text.cpx:0000000000000000 $t
     /tmp/ccjHcktl.s:2268   .text.cpx:0000000000000000 cpx
     /tmp/ccjHcktl.s:2355   .text.cpx:000000000000006c $d
     /tmp/ccjHcktl.s:2363   .text.dec:0000000000000000 $t
     /tmp/ccjHcktl.s:2369   .text.dec:0000000000000000 dec
     /tmp/ccjHcktl.s:2437   .text.dec:0000000000000050 $d
     /tmp/ccjHcktl.s:2444   .text.cmp:0000000000000000 $t
     /tmp/ccjHcktl.s:2450   .text.cmp:0000000000000000 cmp
     /tmp/ccjHcktl.s:2541   .text.cmp:0000000000000070 $d
     /tmp/ccjHcktl.s:2550   .text.dcp:0000000000000000 $t
     /tmp/ccjHcktl.s:2556   .text.dcp:0000000000000000 dcp
     /tmp/ccjHcktl.s:2603   .text.dcp:0000000000000030 $d
     /tmp/ccjHcktl.s:2610   .text.cpy:0000000000000000 $t
     /tmp/ccjHcktl.s:2616   .text.cpy:0000000000000000 cpy
     /tmp/ccjHcktl.s:2703   .text.cpy:000000000000006c $d
     /tmp/ccjHcktl.s:2711   .text.ldx:0000000000000000 $t
     /tmp/ccjHcktl.s:2717   .text.ldx:0000000000000000 ldx
     /tmp/ccjHcktl.s:2785   .text.ldx:0000000000000050 $d
     /tmp/ccjHcktl.s:2793   .text.lda:0000000000000000 $t
     /tmp/ccjHcktl.s:2799   .text.lda:0000000000000000 lda
     /tmp/ccjHcktl.s:2867   .text.lda:0000000000000050 $d
     /tmp/ccjHcktl.s:2875   .text.lax:0000000000000000 $t
     /tmp/ccjHcktl.s:2881   .text.lax:0000000000000000 lax
     /tmp/ccjHcktl.s:2905   .text.ldy:0000000000000000 $t
     /tmp/ccjHcktl.s:2911   .text.ldy:0000000000000000 ldy
     /tmp/ccjHcktl.s:2979   .text.ldy:0000000000000050 $d
     /tmp/ccjHcktl.s:2987   .text.ror:0000000000000000 $t
     /tmp/ccjHcktl.s:2993   .text.ror:0000000000000000 ror
     /tmp/ccjHcktl.s:3083   .text.ror:0000000000000074 $d
     /tmp/ccjHcktl.s:3090   .text.adc:0000000000000000 $t
     /tmp/ccjHcktl.s:3096   .text.adc:0000000000000000 adc
     /tmp/ccjHcktl.s:3262   .text.adc:00000000000000e8 $d
     /tmp/ccjHcktl.s:3272   .text.rra:0000000000000000 $t
     /tmp/ccjHcktl.s:3278   .text.rra:0000000000000000 rra
     /tmp/ccjHcktl.s:3325   .text.rra:0000000000000030 $d
     /tmp/ccjHcktl.s:3332   .text.lsr:0000000000000000 $t
     /tmp/ccjHcktl.s:3338   .text.lsr:0000000000000000 lsr
     /tmp/ccjHcktl.s:3424   .text.lsr:000000000000006c $d
     /tmp/ccjHcktl.s:3431   .text.eor:0000000000000000 $t
     /tmp/ccjHcktl.s:3437   .text.eor:0000000000000000 eor
ARM GAS  /tmp/ccjHcktl.s 			page 142


     /tmp/ccjHcktl.s:3510   .text.eor:0000000000000058 $d
     /tmp/ccjHcktl.s:3519   .text.sre:0000000000000000 $t
     /tmp/ccjHcktl.s:3525   .text.sre:0000000000000000 sre
     /tmp/ccjHcktl.s:3572   .text.sre:0000000000000030 $d
     /tmp/ccjHcktl.s:3579   .text.rol:0000000000000000 $t
     /tmp/ccjHcktl.s:3585   .text.rol:0000000000000000 rol
     /tmp/ccjHcktl.s:3676   .text.rol:0000000000000074 $d
     /tmp/ccjHcktl.s:3683   .text.bit:0000000000000000 $t
     /tmp/ccjHcktl.s:3689   .text.bit:0000000000000000 bit
     /tmp/ccjHcktl.s:3744   .text.bit:0000000000000040 $d
     /tmp/ccjHcktl.s:3752   .text.and:0000000000000000 $t
     /tmp/ccjHcktl.s:3758   .text.and:0000000000000000 and
     /tmp/ccjHcktl.s:3830   .text.and:0000000000000058 $d
     /tmp/ccjHcktl.s:3839   .text.rla:0000000000000000 $t
     /tmp/ccjHcktl.s:3845   .text.rla:0000000000000000 rla
     /tmp/ccjHcktl.s:3892   .text.rla:0000000000000030 $d
     /tmp/ccjHcktl.s:3899   .text.asl:0000000000000000 $t
     /tmp/ccjHcktl.s:3905   .text.asl:0000000000000000 asl
     /tmp/ccjHcktl.s:3993   .text.asl:0000000000000070 $d
     /tmp/ccjHcktl.s:4000   .text.ora:0000000000000000 $t
     /tmp/ccjHcktl.s:4006   .text.ora:0000000000000000 ora
     /tmp/ccjHcktl.s:4079   .text.ora:0000000000000058 $d
     /tmp/ccjHcktl.s:4088   .text.slo:0000000000000000 $t
     /tmp/ccjHcktl.s:4094   .text.slo:0000000000000000 slo
     /tmp/ccjHcktl.s:4141   .text.slo:0000000000000030 $d
     /tmp/ccjHcktl.s:4148   .text.zpy:0000000000000000 $t
     /tmp/ccjHcktl.s:4154   .text.zpy:0000000000000000 zpy
     /tmp/ccjHcktl.s:4184   .text.zpy:000000000000001c $d
     /tmp/ccjHcktl.s:4191   .text.ind:0000000000000000 $t
     /tmp/ccjHcktl.s:4197   .text.ind:0000000000000000 ind
     /tmp/ccjHcktl.s:4259   .text.ind:000000000000004c $d
     /tmp/ccjHcktl.s:4265   .text.absx:0000000000000000 $t
     /tmp/ccjHcktl.s:4271   .text.absx:0000000000000000 absx
     /tmp/ccjHcktl.s:4330   .text.absx:0000000000000044 $d
     /tmp/ccjHcktl.s:4338   .text.absy:0000000000000000 $t
     /tmp/ccjHcktl.s:4344   .text.absy:0000000000000000 absy
     /tmp/ccjHcktl.s:4403   .text.absy:0000000000000044 $d
     /tmp/ccjHcktl.s:4411   .text.zpx:0000000000000000 $t
     /tmp/ccjHcktl.s:4417   .text.zpx:0000000000000000 zpx
     /tmp/ccjHcktl.s:4447   .text.zpx:000000000000001c $d
     /tmp/ccjHcktl.s:4454   .text.indy:0000000000000000 $t
     /tmp/ccjHcktl.s:4460   .text.indy:0000000000000000 indy
     /tmp/ccjHcktl.s:4532   .text.indy:0000000000000054 $d
     /tmp/ccjHcktl.s:4540   .text.rel:0000000000000000 $t
     /tmp/ccjHcktl.s:4546   .text.rel:0000000000000000 rel
     /tmp/ccjHcktl.s:4582   .text.rel:0000000000000024 $d
     /tmp/ccjHcktl.s:4589   .text.abso:0000000000000000 $t
     /tmp/ccjHcktl.s:4595   .text.abso:0000000000000000 abso
     /tmp/ccjHcktl.s:4633   .text.abso:0000000000000028 $d
     /tmp/ccjHcktl.s:4639   .text.zp:0000000000000000 $t
     /tmp/ccjHcktl.s:4645   .text.zp:0000000000000000 zp
     /tmp/ccjHcktl.s:4671   .text.zp:0000000000000014 $d
     /tmp/ccjHcktl.s:4677   .text.indx:0000000000000000 $t
     /tmp/ccjHcktl.s:4683   .text.indx:0000000000000000 indx
     /tmp/ccjHcktl.s:4730   .text.indx:0000000000000034 $d
     /tmp/ccjHcktl.s:4737   .text.push16:0000000000000000 $t
     /tmp/ccjHcktl.s:4744   .text.push16:0000000000000000 push16
ARM GAS  /tmp/ccjHcktl.s 			page 143


     /tmp/ccjHcktl.s:4788   .text.push16:000000000000002c $d
     /tmp/ccjHcktl.s:4793   .text.jsr:0000000000000000 $t
     /tmp/ccjHcktl.s:4799   .text.jsr:0000000000000000 jsr
     /tmp/ccjHcktl.s:4827   .text.jsr:0000000000000018 $d
     /tmp/ccjHcktl.s:4833   .text.push8:0000000000000000 $t
     /tmp/ccjHcktl.s:4840   .text.push8:0000000000000000 push8
     /tmp/ccjHcktl.s:4869   .text.push8:0000000000000018 $d
     /tmp/ccjHcktl.s:4874   .text.pha:0000000000000000 $t
     /tmp/ccjHcktl.s:4880   .text.pha:0000000000000000 pha
     /tmp/ccjHcktl.s:4902   .text.pha:000000000000000c $d
     /tmp/ccjHcktl.s:4907   .text.php:0000000000000000 $t
     /tmp/ccjHcktl.s:4913   .text.php:0000000000000000 php
     /tmp/ccjHcktl.s:4938   .text.php:0000000000000014 $d
     /tmp/ccjHcktl.s:4943   .text.brk:0000000000000000 $t
     /tmp/ccjHcktl.s:4949   .text.brk:0000000000000000 brk
     /tmp/ccjHcktl.s:5001   .text.brk:000000000000003c $d
     /tmp/ccjHcktl.s:5009   .text.pull16:0000000000000000 $t
     /tmp/ccjHcktl.s:5016   .text.pull16:0000000000000000 pull16
     /tmp/ccjHcktl.s:5061   .text.pull16:0000000000000034 $d
     /tmp/ccjHcktl.s:5066   .text.rts:0000000000000000 $t
     /tmp/ccjHcktl.s:5072   .text.rts:0000000000000000 rts
     /tmp/ccjHcktl.s:5098   .text.rts:0000000000000014 $d
     /tmp/ccjHcktl.s:5104   .text.pull8:0000000000000000 $t
     /tmp/ccjHcktl.s:5111   .text.pull8:0000000000000000 pull8
     /tmp/ccjHcktl.s:5138   .text.pull8:0000000000000018 $d
     /tmp/ccjHcktl.s:5143   .text.pla:0000000000000000 $t
     /tmp/ccjHcktl.s:5149   .text.pla:0000000000000000 pla
     /tmp/ccjHcktl.s:5208   .text.pla:0000000000000044 $d
     /tmp/ccjHcktl.s:5214   .text.rti:0000000000000000 $t
     /tmp/ccjHcktl.s:5220   .text.rti:0000000000000000 rti
     /tmp/ccjHcktl.s:5250   .text.rti:0000000000000018 $d
     /tmp/ccjHcktl.s:5257   .text.plp:0000000000000000 $t
     /tmp/ccjHcktl.s:5263   .text.plp:0000000000000000 plp
     /tmp/ccjHcktl.s:5287   .text.plp:0000000000000010 $d
     /tmp/ccjHcktl.s:5292   .text.reset6502:0000000000000000 $t
     /tmp/ccjHcktl.s:5299   .text.reset6502:0000000000000000 reset6502
     /tmp/ccjHcktl.s:5348   .text.reset6502:0000000000000038 $d
     /tmp/ccjHcktl.s:5360   .text.nmi6502:0000000000000000 $t
     /tmp/ccjHcktl.s:5367   .text.nmi6502:0000000000000000 nmi6502
     /tmp/ccjHcktl.s:5412   .text.nmi6502:0000000000000030 $d
     /tmp/ccjHcktl.s:5420   .text.irq6502:0000000000000000 $t
     /tmp/ccjHcktl.s:5427   .text.irq6502:0000000000000000 irq6502
     /tmp/ccjHcktl.s:5480   .text.irq6502:000000000000003c $d
     /tmp/ccjHcktl.s:5488   .text.exec6502:0000000000000000 $t
     /tmp/ccjHcktl.s:5495   .text.exec6502:0000000000000000 exec6502
     /tmp/ccjHcktl.s:5652   .text.exec6502:00000000000000d0 $d
                            *COM*:0000000000000004 loopexternal
     /tmp/ccjHcktl.s:5669   .text.step6502:0000000000000000 $t
     /tmp/ccjHcktl.s:5676   .text.step6502:0000000000000000 step6502
     /tmp/ccjHcktl.s:5771   .text.step6502:000000000000007c $d
     /tmp/ccjHcktl.s:5788   .text.hookexternal:0000000000000000 $t
     /tmp/ccjHcktl.s:5795   .text.hookexternal:0000000000000000 hookexternal
     /tmp/ccjHcktl.s:5827   .text.hookexternal:0000000000000018 $d
     /tmp/ccjHcktl.s:5833   .text.getPC:0000000000000000 $t
     /tmp/ccjHcktl.s:5840   .text.getPC:0000000000000000 getPC
     /tmp/ccjHcktl.s:5856   .text.getPC:0000000000000008 $d
     /tmp/ccjHcktl.s:5861   .text.getclockticks:0000000000000000 $t
ARM GAS  /tmp/ccjHcktl.s 			page 144


     /tmp/ccjHcktl.s:5868   .text.getclockticks:0000000000000000 getclockticks
     /tmp/ccjHcktl.s:5885   .text.getclockticks:0000000000000008 $d
     /tmp/ccjHcktl.s:5940   .bss.showdump:0000000000000000 showdump
     /tmp/ccjHcktl.s:5914   .bss.callexternal:0000000000000000 callexternal
                            *COM*:0000000000000001 oldstatus
     /tmp/ccjHcktl.s:5921   .bss.clockgoal6502:0000000000000000 clockgoal6502
     /tmp/ccjHcktl.s:5928   .bss.clockticks6502:0000000000000000 clockticks6502
     /tmp/ccjHcktl.s:5935   .bss.instructions:0000000000000000 instructions
     /tmp/ccjHcktl.s:5915   .bss.callexternal:0000000000000000 $d
     /tmp/ccjHcktl.s:5917   .bss.clockgoal6502:0000000000000000 $d
     /tmp/ccjHcktl.s:5924   .bss.clockticks6502:0000000000000000 $d
     /tmp/ccjHcktl.s:5931   .bss.instructions:0000000000000000 $d
     /tmp/ccjHcktl.s:5941   .bss.showdump:0000000000000000 $d
     /tmp/ccjHcktl.s:5943   .rodata.addrtable:0000000000000000 $d
     /tmp/ccjHcktl.s:5947   .rodata.addrtable:0000000000000000 addrtable
     /tmp/ccjHcktl.s:6205   .rodata.optable:0000000000000000 $d
     /tmp/ccjHcktl.s:6209   .rodata.optable:0000000000000000 optable
     /tmp/ccjHcktl.s:6467   .rodata.ticktable:0000000000000000 $d
     /tmp/ccjHcktl.s:6471   .rodata.ticktable:0000000000000000 ticktable
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
write6502
read6502
